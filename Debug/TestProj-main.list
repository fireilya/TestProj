
TestProj-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0c4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016f0  0800c2c4  0800c2c4  0000d2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9b4  0800d9b4  0000f1c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9b4  0800d9b4  0000e9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9bc  0800d9bc  0000f1c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9bc  0800d9bc  0000e9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9c0  0800d9c0  0000e9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800d9c4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000080  0800da44  0000f080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000120  0800dae4  0000f120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008398  200001c0  0800db84  0000f1c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008558  0800db84  0000f558  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000f1c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021e1c  00000000  00000000  0000f1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000577e  00000000  00000000  0003100a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b10  00000000  00000000  00036788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014e9  00000000  00000000  00038298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000349c4  00000000  00000000  00039781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002c72a  00000000  00000000  0006e145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011497c  00000000  00000000  0009a86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001af1eb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000078fc  00000000  00000000  001af230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  001b6b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c0 	.word	0x200001c0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c2ac 	.word	0x0800c2ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001c4 	.word	0x200001c4
 800023c:	0800c2ac 	.word	0x0800c2ac

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  // отправляем пакет раз в секунду
	udp_send_msg("hi!\0", 4);
 80005d8:	2104      	movs	r1, #4
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80005dc:	f000 fc80 	bl	8000ee0 <udp_send_msg>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	0800c2c4 	.word	0x0800c2c4

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fe3a 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f814 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f92e 	bl	8000858 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 f8ce 	bl	800079c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000600:	f000 f8fc 	bl	80007fc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000604:	f000 f87c 	bl	8000700 <MX_TIM2_Init>
  MX_LWIP_Init();
 8000608:	f005 fa50 	bl	8005aac <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udp_create_socket();
 800060c:	f000 fc30 	bl	8000e70 <udp_create_socket>
  HAL_TIM_Base_Start_IT(&htim2);
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <main+0x30>)
 8000612:	f003 fe7f 	bl	8004314 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000616:	f005 fb95 	bl	8005d44 <MX_LWIP_Process>
 800061a:	e7fc      	b.n	8000616 <main+0x2a>
 800061c:	200001dc 	.word	0x200001dc

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2234      	movs	r2, #52	@ 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f00a ff97 	bl	800b562 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000644:	f002 fcb2 	bl	8002fac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <SystemClock_Config+0xd8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a2a      	ldr	r2, [pc, #168]	@ (80006f8 <SystemClock_Config+0xd8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <SystemClock_Config+0xd8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemClock_Config+0xdc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a25      	ldr	r2, [pc, #148]	@ (80006fc <SystemClock_Config+0xdc>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <SystemClock_Config+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800068a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000690:	23d8      	movs	r3, #216	@ 0xd8
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fce1 	bl	800306c <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 f974 	bl	800099c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b4:	f002 fc8a 	bl	8002fcc <HAL_PWREx_EnableOverDrive>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006be:	f000 f96d 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	2107      	movs	r1, #7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 ff71 	bl	80035c8 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006ec:	f000 f956 	bl	800099c <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	@ 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800071e:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <MX_TIM2_Init+0x94>)
 8000720:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8000726:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_TIM2_Init+0x94>)
 8000728:	226b      	movs	r2, #107	@ 0x6b
 800072a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <MX_TIM2_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_TIM2_Init+0x94>)
 8000734:	4a18      	ldr	r2, [pc, #96]	@ (8000798 <MX_TIM2_Init+0x98>)
 8000736:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <MX_TIM2_Init+0x94>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_TIM2_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000744:	4813      	ldr	r0, [pc, #76]	@ (8000794 <MX_TIM2_Init+0x94>)
 8000746:	f003 fd8d 	bl	8004264 <HAL_TIM_Base_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000750:	f000 f924 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000758:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	480c      	ldr	r0, [pc, #48]	@ (8000794 <MX_TIM2_Init+0x94>)
 8000762:	f003 ff6f 	bl	8004644 <HAL_TIM_ConfigClockSource>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800076c:	f000 f916 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_TIM2_Init+0x94>)
 800077e:	f004 f98d 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000788:	f000 f908 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001dc 	.word	0x200001dc
 8000798:	000f423f 	.word	0x000f423f

0800079c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_USART3_UART_Init+0x58>)
 80007a2:	4a15      	ldr	r2, [pc, #84]	@ (80007f8 <MX_USART3_UART_Init+0x5c>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a6:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_USART3_UART_Init+0x58>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_USART3_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_USART3_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_USART3_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_USART3_UART_Init+0x58>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_USART3_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_USART3_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_USART3_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_USART3_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_USART3_UART_Init+0x58>)
 80007e0:	f004 fa08 	bl	8004bf4 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007ea:	f000 f8d7 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000228 	.word	0x20000228
 80007f8:	40004800 	.word	0x40004800

080007fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000806:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2206      	movs	r2, #6
 800080c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2202      	movs	r2, #2
 8000812:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2202      	movs	r2, #2
 800081e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2201      	movs	r2, #1
 8000824:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2201      	movs	r2, #1
 8000836:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	f002 fa6b 	bl	8002d1a <HAL_PCD_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f8a7 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200002b0 	.word	0x200002b0

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	@ 0x30
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b47      	ldr	r3, [pc, #284]	@ (800098c <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a46      	ldr	r2, [pc, #280]	@ (800098c <MX_GPIO_Init+0x134>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b44      	ldr	r3, [pc, #272]	@ (800098c <MX_GPIO_Init+0x134>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	4b41      	ldr	r3, [pc, #260]	@ (800098c <MX_GPIO_Init+0x134>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a40      	ldr	r2, [pc, #256]	@ (800098c <MX_GPIO_Init+0x134>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b3e      	ldr	r3, [pc, #248]	@ (800098c <MX_GPIO_Init+0x134>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b3b      	ldr	r3, [pc, #236]	@ (800098c <MX_GPIO_Init+0x134>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a3a      	ldr	r2, [pc, #232]	@ (800098c <MX_GPIO_Init+0x134>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b38      	ldr	r3, [pc, #224]	@ (800098c <MX_GPIO_Init+0x134>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b35      	ldr	r3, [pc, #212]	@ (800098c <MX_GPIO_Init+0x134>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <MX_GPIO_Init+0x134>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b32      	ldr	r3, [pc, #200]	@ (800098c <MX_GPIO_Init+0x134>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <MX_GPIO_Init+0x134>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a2e      	ldr	r2, [pc, #184]	@ (800098c <MX_GPIO_Init+0x134>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <MX_GPIO_Init+0x134>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <MX_GPIO_Init+0x134>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a28      	ldr	r2, [pc, #160]	@ (800098c <MX_GPIO_Init+0x134>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b26      	ldr	r3, [pc, #152]	@ (800098c <MX_GPIO_Init+0x134>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000904:	4822      	ldr	r0, [pc, #136]	@ (8000990 <MX_GPIO_Init+0x138>)
 8000906:	f002 f9d5 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	@ 0x40
 800090e:	4821      	ldr	r0, [pc, #132]	@ (8000994 <MX_GPIO_Init+0x13c>)
 8000910:	f002 f9d0 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	481b      	ldr	r0, [pc, #108]	@ (8000998 <MX_GPIO_Init+0x140>)
 800092c:	f002 f816 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000930:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4811      	ldr	r0, [pc, #68]	@ (8000990 <MX_GPIO_Init+0x138>)
 800094a:	f002 f807 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800094e:	2340      	movs	r3, #64	@ 0x40
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	480b      	ldr	r0, [pc, #44]	@ (8000994 <MX_GPIO_Init+0x13c>)
 8000966:	f001 fff9 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096a:	2380      	movs	r3, #128	@ 0x80
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_GPIO_Init+0x13c>)
 800097e:	f001 ffed 	bl	800295c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3730      	adds	r7, #48	@ 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40020400 	.word	0x40020400
 8000994:	40021800 	.word	0x40021800
 8000998:	40020800 	.word	0x40020800

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <HAL_MspInit+0x44>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	4a0e      	ldr	r2, [pc, #56]	@ (80009ec <HAL_MspInit+0x44>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <HAL_MspInit+0x44>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <HAL_MspInit+0x44>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <HAL_MspInit+0x44>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_MspInit+0x44>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a00:	d113      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	4a0b      	ldr	r2, [pc, #44]	@ (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	201c      	movs	r0, #28
 8000a20:	f000 fd7f 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a24:	201c      	movs	r0, #28
 8000a26:	f000 fd98 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0ae      	sub	sp, #184	@ 0xb8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2290      	movs	r2, #144	@ 0x90
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f00a fd82 	bl	800b562 <memset>
  if(huart->Instance==USART3)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a22      	ldr	r2, [pc, #136]	@ (8000aec <HAL_UART_MspInit+0xb4>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d13c      	bne.n	8000ae2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 ffcc 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a82:	f7ff ff8b 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a19      	ldr	r2, [pc, #100]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a13      	ldr	r2, [pc, #76]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ab6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_UART_MspInit+0xbc>)
 8000ade:	f001 ff3d 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	37b8      	adds	r7, #184	@ 0xb8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004800 	.word	0x40004800
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020c00 	.word	0x40020c00

08000af8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0ae      	sub	sp, #184	@ 0xb8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2290      	movs	r2, #144	@ 0x90
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f00a fd22 	bl	800b562 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b26:	d166      	bne.n	8000bf6 <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000b2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b2e:	23c0      	movs	r3, #192	@ 0xc0
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000b42:	2300      	movs	r3, #0
 8000b44:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000b46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 ff5e 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8000b5e:	f7ff ff1d 	bl	800099c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a26      	ldr	r2, [pc, #152]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b24      	ldr	r3, [pc, #144]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b7a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b94:	230a      	movs	r3, #10
 8000b96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4818      	ldr	r0, [pc, #96]	@ (8000c04 <HAL_PCD_MspInit+0x10c>)
 8000ba2:	f001 fedb 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ba6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000baa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4810      	ldr	r0, [pc, #64]	@ (8000c04 <HAL_PCD_MspInit+0x10c>)
 8000bc2:	f001 fecb 	bl	800295c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bca:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd0:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	37b8      	adds	r7, #184	@ 0xb8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <NMI_Handler+0x4>

08000c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <MemManage_Handler+0x4>

08000c20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5e:	f000 fb41 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <TIM2_IRQHandler+0x10>)
 8000c6e:	f003 fbc9 	bl	8004404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001dc 	.word	0x200001dc

08000c7c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <ETH_IRQHandler+0x10>)
 8000c82:	f000 ff85 	bl	8001b90 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200051a0 	.word	0x200051a0

08000c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_kill>:

int _kill(int pid, int sig)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000caa:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <_kill+0x20>)
 8000cac:	2216      	movs	r2, #22
 8000cae:	601a      	str	r2, [r3, #0]
  return -1;
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20008548 	.word	0x20008548

08000cc4 <_exit>:

void _exit (int status)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffe5 	bl	8000ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cd6:	bf00      	nop
 8000cd8:	e7fd      	b.n	8000cd6 <_exit+0x12>

08000cda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e00a      	b.n	8000d02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cec:	f3af 8000 	nop.w
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	60ba      	str	r2, [r7, #8]
 8000cf8:	b2ca      	uxtb	r2, r1
 8000cfa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbf0      	blt.n	8000cec <_read+0x12>
  }

  return len;
 8000d0a:	687b      	ldr	r3, [r7, #4]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	e009      	b.n	8000d3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	60ba      	str	r2, [r7, #8]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3301      	adds	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dbf1      	blt.n	8000d26 <_write+0x12>
  }
  return len;
 8000d42:	687b      	ldr	r3, [r7, #4]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_close>:

int _close(int file)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d74:	605a      	str	r2, [r3, #4]
  return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_isatty>:

int _isatty(int file)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b085      	sub	sp, #20
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d205      	bcs.n	8000df0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <_sbrk+0x6c>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a06      	ldr	r2, [pc, #24]	@ (8000e18 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	20080000 	.word	0x20080000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	200007b8 	.word	0x200007b8
 8000e1c:	20008558 	.word	0x20008558
 8000e20:	20008548 	.word	0x20008548

08000e24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <udp_receive_callback>:

static struct udp_pcb* upcb = NULL;

static void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
	    const ip_addr_t *addr, u16_t port)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	603b      	str	r3, [r7, #0]
	// в этой функции обязательно должны очистить p, иначе память потечёт
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000e56:	2180      	movs	r1, #128	@ 0x80
 8000e58:	4804      	ldr	r0, [pc, #16]	@ (8000e6c <udp_receive_callback+0x24>)
 8000e5a:	f001 ff44 	bl	8002ce6 <HAL_GPIO_TogglePin>
	pbuf_free(p);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f006 fe74 	bl	8007b4c <pbuf_free>
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40020400 	.word	0x40020400

08000e70 <udp_create_socket>:

err_t udp_create_socket()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	// проверяем, что не инициализировали сокет еще
	if (upcb == NULL)
 8000e76:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <udp_create_socket+0x64>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10b      	bne.n	8000e96 <udp_create_socket+0x26>
	{
		// создание сокета
		upcb = udp_new();
 8000e7e:	f007 ff07 	bl	8008c90 <udp_new>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4a13      	ldr	r2, [pc, #76]	@ (8000ed4 <udp_create_socket+0x64>)
 8000e86:	6013      	str	r3, [r2, #0]

		// если не удалось создать сокет, то на выход с ошибкой
		if (upcb == NULL)
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <udp_create_socket+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <udp_create_socket+0x26>
		{
			return ERR_ABRT;
 8000e90:	f06f 030c 	mvn.w	r3, #12
 8000e94:	e01a      	b.n	8000ecc <udp_create_socket+0x5c>
		}
	}

	ip4_addr_t dest;
	IP4_ADDR(&dest, 169, 254, 248, 52);
 8000e96:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <udp_create_socket+0x68>)
 8000e98:	603b      	str	r3, [r7, #0]
	// коннектимся к удаленному серверу по ИП и порту (сервер должен быть настроен именно на так)
	err_t err = udp_connect(upcb, &dest, 3333);
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <udp_create_socket+0x64>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4639      	mov	r1, r7
 8000ea0:	f640 5205 	movw	r2, #3333	@ 0xd05
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f007 fe65 	bl	8008b74 <udp_connect>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	if (ERR_OK != err)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <udp_create_socket+0x4c>
	{
		return err;
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	e007      	b.n	8000ecc <udp_create_socket+0x5c>
	}

	// регистрируем колбэк на прием пакета
	udp_recv(upcb, udp_receive_callback, NULL);
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <udp_create_socket+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4906      	ldr	r1, [pc, #24]	@ (8000edc <udp_create_socket+0x6c>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 fec3 	bl	8008c50 <udp_recv>
	return ERR_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200007bc 	.word	0x200007bc
 8000ed8:	34f8fea9 	.word	0x34f8fea9
 8000edc:	08000e49 	.word	0x08000e49

08000ee0 <udp_send_msg>:

err_t udp_send_msg(char* message, int n)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	// если сокет не создался, то на выход с ошибкой
	if (upcb == NULL)
 8000eea:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <udp_send_msg+0x70>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <udp_send_msg+0x18>
	{
		return ERR_ABRT;
 8000ef2:	f06f 030c 	mvn.w	r3, #12
 8000ef6:	e027      	b.n	8000f48 <udp_send_msg+0x68>
	}
	// аллоцируем память под буфер с данными
	struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, n, PBUF_RAM);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f00:	4619      	mov	r1, r3
 8000f02:	2036      	movs	r0, #54	@ 0x36
 8000f04:	f006 fb40 	bl	8007588 <pbuf_alloc>
 8000f08:	60b8      	str	r0, [r7, #8]
	err_t err = ERR_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
	if (p != NULL)
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d017      	beq.n	8000f44 <udp_send_msg+0x64>
	{
		// кладём данные в аллоцированный буфер
		err = pbuf_take(p, message, n);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	68b8      	ldr	r0, [r7, #8]
 8000f1e:	f007 f80f 	bl	8007f40 <pbuf_take>
 8000f22:	4603      	mov	r3, r0
 8000f24:	73fb      	strb	r3, [r7, #15]
		if (err==ERR_OK)
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d107      	bne.n	8000f3e <udp_send_msg+0x5e>
		{
			// отсылаем пакет
			err = udp_send(upcb, p);
 8000f2e:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <udp_send_msg+0x70>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 fbab 	bl	8008690 <udp_send>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73fb      	strb	r3, [r7, #15]
		}
		pbuf_free(p);
 8000f3e:	68b8      	ldr	r0, [r7, #8]
 8000f40:	f006 fe04 	bl	8007b4c <pbuf_free>
	}
	return err;
 8000f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200007bc 	.word	0x200007bc

08000f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5a:	490e      	ldr	r1, [pc, #56]	@ (8000f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f60:	e002      	b.n	8000f68 <LoopCopyDataInit>

08000f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f66:	3304      	adds	r3, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f6c:	d3f9      	bcc.n	8000f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f70:	4c0b      	ldr	r4, [pc, #44]	@ (8000fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f74:	e001      	b.n	8000f7a <LoopFillZerobss>

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f78:	3204      	adds	r2, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7e:	f7ff ff51 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f82:	f00a fb3d 	bl	800b600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f86:	f7ff fb31 	bl	80005ec <main>
  bx  lr    
 8000f8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f8c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f98:	0800d9c4 	.word	0x0800d9c4
  ldr r2, =_sbss
 8000f9c:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8000fa0:	20008558 	.word	0x20008558

08000fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC_IRQHandler>

08000fa6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <LAN8742_RegisterBusIO+0x28>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <LAN8742_RegisterBusIO+0x28>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <LAN8742_RegisterBusIO+0x28>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e014      	b.n	8000ffe <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d17c      	bne.n	8001124 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2220      	movs	r2, #32
 800103c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e01c      	b.n	800107e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f107 0208 	add.w	r2, r7, #8
 800104c:	2112      	movs	r1, #18
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	4798      	blx	r3
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	da03      	bge.n	8001060 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001058:	f06f 0304 	mvn.w	r3, #4
 800105c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800105e:	e00b      	b.n	8001078 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f003 031f 	and.w	r3, r3, #31
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	429a      	cmp	r2, r3
 800106a:	d105      	bne.n	8001078 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
         break;
 8001076:	e005      	b.n	8001084 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2b1f      	cmp	r3, #31
 8001082:	d9df      	bls.n	8001044 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b1f      	cmp	r3, #31
 800108a:	d902      	bls.n	8001092 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800108c:	f06f 0302 	mvn.w	r3, #2
 8001090:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d145      	bne.n	8001124 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6810      	ldr	r0, [r2, #0]
 80010a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010a4:	2100      	movs	r1, #0
 80010a6:	4798      	blx	r3
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db37      	blt.n	800111e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	6810      	ldr	r0, [r2, #0]
 80010b6:	f107 0208 	add.w	r2, r7, #8
 80010ba:	2100      	movs	r1, #0
 80010bc:	4798      	blx	r3
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db28      	blt.n	8001116 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4798      	blx	r3
 80010ca:	4603      	mov	r3, r0
 80010cc:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80010ce:	e01c      	b.n	800110a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4798      	blx	r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010e2:	d80e      	bhi.n	8001102 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6810      	ldr	r0, [r2, #0]
 80010ec:	f107 0208 	add.w	r2, r7, #8
 80010f0:	2100      	movs	r1, #0
 80010f2:	4798      	blx	r3
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da07      	bge.n	800110a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80010fa:	f06f 0304 	mvn.w	r3, #4
 80010fe:	613b      	str	r3, [r7, #16]
                 break;
 8001100:	e010      	b.n	8001124 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001102:	f06f 0301 	mvn.w	r3, #1
 8001106:	613b      	str	r3, [r7, #16]
               break;
 8001108:	e00c      	b.n	8001124 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1dd      	bne.n	80010d0 <LAN8742_Init+0xc6>
 8001114:	e006      	b.n	8001124 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001116:	f06f 0304 	mvn.w	r3, #4
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	e002      	b.n	8001124 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800111e:	f06f 0303 	mvn.w	r3, #3
 8001122:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d112      	bne.n	8001150 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4798      	blx	r3
 8001130:	4603      	mov	r3, r0
 8001132:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001134:	bf00      	nop
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4798      	blx	r3
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001148:	d9f5      	bls.n	8001136 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001150:	693b      	ldr	r3, [r7, #16]
 }
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6810      	ldr	r0, [r2, #0]
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	2101      	movs	r1, #1
 8001174:	4798      	blx	r3
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	da02      	bge.n	8001182 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800117c:	f06f 0304 	mvn.w	r3, #4
 8001180:	e06e      	b.n	8001260 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6810      	ldr	r0, [r2, #0]
 800118a:	f107 020c 	add.w	r2, r7, #12
 800118e:	2101      	movs	r1, #1
 8001190:	4798      	blx	r3
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	da02      	bge.n	800119e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001198:	f06f 0304 	mvn.w	r3, #4
 800119c:	e060      	b.n	8001260 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80011a8:	2301      	movs	r3, #1
 80011aa:	e059      	b.n	8001260 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6810      	ldr	r0, [r2, #0]
 80011b4:	f107 020c 	add.w	r2, r7, #12
 80011b8:	2100      	movs	r1, #0
 80011ba:	4798      	blx	r3
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	da02      	bge.n	80011c8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011c2:	f06f 0304 	mvn.w	r3, #4
 80011c6:	e04b      	b.n	8001260 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d11b      	bne.n	800120a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <LAN8742_GetLinkState+0x90>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011e6:	2302      	movs	r3, #2
 80011e8:	e03a      	b.n	8001260 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e033      	b.n	8001260 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001202:	2304      	movs	r3, #4
 8001204:	e02c      	b.n	8001260 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001206:	2305      	movs	r3, #5
 8001208:	e02a      	b.n	8001260 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6810      	ldr	r0, [r2, #0]
 8001212:	f107 020c 	add.w	r2, r7, #12
 8001216:	211f      	movs	r1, #31
 8001218:	4798      	blx	r3
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	da02      	bge.n	8001226 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001220:	f06f 0304 	mvn.w	r3, #4
 8001224:	e01c      	b.n	8001260 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001230:	2306      	movs	r3, #6
 8001232:	e015      	b.n	8001260 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 031c 	and.w	r3, r3, #28
 800123a:	2b18      	cmp	r3, #24
 800123c:	d101      	bne.n	8001242 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800123e:	2302      	movs	r3, #2
 8001240:	e00e      	b.n	8001260 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f003 031c 	and.w	r3, r3, #28
 8001248:	2b08      	cmp	r3, #8
 800124a:	d101      	bne.n	8001250 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800124c:	2303      	movs	r3, #3
 800124e:	e007      	b.n	8001260 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 031c 	and.w	r3, r3, #28
 8001256:	2b14      	cmp	r3, #20
 8001258:	d101      	bne.n	800125e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800125a:	2304      	movs	r3, #4
 800125c:	e000      	b.n	8001260 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800125e:	2305      	movs	r3, #5
    }				
  }
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 f94d 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001272:	2000      	movs	r0, #0
 8001274:	f000 f806 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001278:	f7ff fb96 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <HAL_InitTick+0x54>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <HAL_InitTick+0x58>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f967 	bl	8001576 <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00e      	b.n	80012d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d80a      	bhi.n	80012ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f000 f92f 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c4:	4a06      	ldr	r2, [pc, #24]	@ (80012e0 <HAL_InitTick+0x5c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000004 	.word	0x20000004

080012e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	@ (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008
 8001308:	200007c0 	.word	0x200007c0

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200007c0 	.word	0x200007c0

08001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff ffee 	bl	800130c <HAL_GetTick>
 8001330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d005      	beq.n	800134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_Delay+0x44>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134a:	bf00      	nop
 800134c:	f7ff ffde 	bl	800130c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f7      	bhi.n	800134c <HAL_Delay+0x28>
  {
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000008 	.word	0x20000008

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <__NVIC_SetPriorityGrouping+0x40>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	4313      	orrs	r3, r2
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <__NVIC_SetPriorityGrouping+0x40>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00
 80013b0:	05fa0000 	.word	0x05fa0000

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4907      	ldr	r1, [pc, #28]	@ (8001408 <__NVIC_EnableIRQ+0x38>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	@ (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	@ (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	@ 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	@ (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff29 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff3e 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff8e 	bl	8001460 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5d 	bl	800140c <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff31 	bl	80013d0 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa2 	bl	80014c8 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e06a      	b.n	8001678 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d106      	bne.n	80015ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2223      	movs	r2, #35	@ 0x23
 80015b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f004 fdad 	bl	8006114 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b31      	ldr	r3, [pc, #196]	@ (8001680 <HAL_ETH_Init+0xf0>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	4a30      	ldr	r2, [pc, #192]	@ (8001680 <HAL_ETH_Init+0xf0>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <HAL_ETH_Init+0xf0>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001684 <HAL_ETH_Init+0xf4>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001684 <HAL_ETH_Init+0xf4>)
 80015d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80015dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015de:	4b29      	ldr	r3, [pc, #164]	@ (8001684 <HAL_ETH_Init+0xf4>)
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4927      	ldr	r1, [pc, #156]	@ (8001684 <HAL_ETH_Init+0xf4>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80015ec:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <HAL_ETH_Init+0xf4>)
 80015ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001606:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001608:	f7ff fe80 	bl	800130c <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800160e:	e011      	b.n	8001634 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001610:	f7ff fe7c 	bl	800130c <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800161e:	d909      	bls.n	8001634 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2204      	movs	r2, #4
 8001624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	22e0      	movs	r2, #224	@ 0xe0
 800162c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e021      	b.n	8001678 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1e4      	bne.n	8001610 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fee4 	bl	8002414 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 ff8b 	bl	8002568 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 ffe1 	bl	800261a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	461a      	mov	r2, r3
 800165e:	2100      	movs	r1, #0
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 ff49 	bl	80024f8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2210      	movs	r2, #16
 8001672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	40013800 	.word	0x40013800

08001688 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001696:	2b10      	cmp	r3, #16
 8001698:	d150      	bne.n	800173c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2223      	movs	r2, #35	@ 0x23
 800169e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2204      	movs	r2, #4
 80016a6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f9fd 	bl	8001aa8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0208 	orr.w	r2, r2, #8
 80016bc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff fe2c 	bl	8001324 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0204 	orr.w	r2, r2, #4
 80016e2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff fe19 	bl	8001324 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fd2a 	bl	8002154 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001712:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001716:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800172e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2223      	movs	r2, #35	@ 0x23
 8001734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	e000      	b.n	800173e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
  }
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001754:	2b23      	cmp	r3, #35	@ 0x23
 8001756:	d14a      	bne.n	80017ee <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2223      	movs	r2, #35	@ 0x23
 800175c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001772:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001776:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f023 0302 	bic.w	r3, r3, #2
 800178a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800178e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0204 	bic.w	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff fdbb 	bl	8001324 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fccc 	bl	8002154 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0208 	bic.w	r2, r2, #8
 80017ca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7ff fda5 	bl	8001324 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2210      	movs	r2, #16
 80017e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
  }
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e07c      	b.n	8001918 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001824:	2b23      	cmp	r3, #35	@ 0x23
 8001826:	d176      	bne.n	8001916 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001828:	2200      	movs	r2, #0
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 ff61 	bl	80026f4 <ETH_Prepare_Tx_Descriptors>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d009      	beq.n	800184c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183e:	f043 0202 	orr.w	r2, r3, #2
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e065      	b.n	8001918 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800184c:	f3bf 8f4f 	dsb	sy
}
 8001850:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3206      	adds	r2, #6
 800185a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	629a      	str	r2, [r3, #40]	@ 0x28
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	2b03      	cmp	r3, #3
 8001870:	d904      	bls.n	800187c <HAL_ETH_Transmit+0x84>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001876:	1f1a      	subs	r2, r3, #4
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3106      	adds	r1, #6
 8001888:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800188c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001890:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001892:	f7ff fd3b 	bl	800130c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001898:	e037      	b.n	800190a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d011      	beq.n	80018d0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b2:	f043 0208 	orr.w	r2, r3, #8
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e023      	b.n	8001918 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d6:	d018      	beq.n	800190a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018d8:	f7ff fd18 	bl	800130c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d302      	bcc.n	80018ee <HAL_ETH_Transmit+0xf6>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10d      	bne.n	800190a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f4:	f043 0204 	orr.w	r2, r3, #4
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001904:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e006      	b.n	8001918 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	dbc3      	blt.n	800189a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
  }
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800193e:	f043 0201 	orr.w	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0a8      	b.n	8001a9e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001952:	2b23      	cmp	r3, #35	@ 0x23
 8001954:	d001      	beq.n	800195a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0a1      	b.n	8001a9e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	3212      	adds	r2, #18
 8001966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001970:	f1c3 0304 	rsb	r3, r3, #4
 8001974:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001976:	e06a      	b.n	8001a4e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	699a      	ldr	r2, [r3, #24]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <HAL_ETH_ReadData+0x88>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d040      	beq.n	8001a2a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00c      	beq.n	80019ec <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80019dc:	3b04      	subs	r3, #4
 80019de:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a04:	461a      	mov	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	f004 fd4d 	bl	80064a8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	441a      	add	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2200      	movs	r2, #0
 8001a28:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d902      	bls.n	8001a3c <HAL_ETH_ReadData+0x11c>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3b04      	subs	r3, #4
 8001a3a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	3212      	adds	r2, #18
 8001a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a46:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db06      	blt.n	8001a64 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d202      	bcs.n	8001a64 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d089      	beq.n	8001978 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f815 	bl	8001aa8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d108      	bne.n	8001a9c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001abc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	3212      	adds	r2, #18
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ace:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ad0:	e040      	b.n	8001b54 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d112      	bne.n	8001b00 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 fcb2 	bl	8006448 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	74fb      	strb	r3, [r7, #19]
 8001aee:	e007      	b.n	8001b00 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	461a      	mov	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	461a      	mov	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001b00:	7cfb      	ldrb	r3, [r7, #19]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d026      	beq.n	8001b54 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d103      	bne.n	8001b16 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	4a1e      	ldr	r2, [pc, #120]	@ (8001b8c <ETH_UpdateDescriptor+0xe4>)
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	e003      	b.n	8001b1e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001b1c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b1e:	f3bf 8f5f 	dmb	sy
}
 8001b22:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	3301      	adds	r3, #1
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d902      	bls.n	8001b42 <ETH_UpdateDescriptor+0x9a>
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	3212      	adds	r2, #18
 8001b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <ETH_UpdateDescriptor+0xb8>
 8001b5a:	7cfb      	ldrb	r3, [r7, #19]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1b8      	bne.n	8001ad2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d00c      	beq.n	8001b84 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b72:	461a      	mov	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001b84:	bf00      	nop
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	80004600 	.word	0x80004600

08001b90 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba6:	2b40      	cmp	r3, #64	@ 0x40
 8001ba8:	d112      	bne.n	8001bd0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb8:	2b40      	cmp	r3, #64	@ 0x40
 8001bba:	d109      	bne.n	8001bd0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b50      	ldr	r3, [pc, #320]	@ (8001d08 <HAL_ETH_IRQHandler+0x178>)
 8001bc8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8ac 	bl	8001d28 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d113      	bne.n	8001c0a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d10a      	bne.n	8001c0a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001c02:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f885 	bl	8001d14 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c1c:	d14c      	bne.n	8001cb8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c30:	d142      	bne.n	8001cb8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c38:	f043 0208 	orr.w	r2, r3, #8
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c54:	d11a      	bne.n	8001c8c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	4b2a      	ldr	r3, [pc, #168]	@ (8001d0c <HAL_ETH_IRQHandler+0x17c>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001c7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c80:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	22e0      	movs	r2, #224	@ 0xe0
 8001c86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001c8a:	e012      	b.n	8001cb2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001caa:	461a      	mov	r2, r3
 8001cac:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001cb0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f842 	bl	8001d3c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ccc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f83a 	bl	8001d50 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_ETH_IRQHandler+0x180>)
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d006      	beq.n	8001cfe <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001cf0:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <HAL_ETH_IRQHandler+0x180>)
 8001cf2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001cf6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f833 	bl	8001d64 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	00010040 	.word	0x00010040
 8001d0c:	007e2000 	.word	0x007e2000
 8001d10:	40013c00 	.word	0x40013c00

08001d14 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 031c 	and.w	r3, r3, #28
 8001d94:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	02db      	lsls	r3, r3, #11
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	019b      	lsls	r3, r3, #6
 8001da6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f023 0302 	bic.w	r3, r3, #2
 8001db6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001dc8:	f7ff faa0 	bl	800130c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dce:	e00d      	b.n	8001dec <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001dd0:	f7ff fa9c 	bl	800130c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dde:	d301      	bcc.n	8001de4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e010      	b.n	8001e06 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ec      	bne.n	8001dd0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 031c 	and.w	r3, r3, #28
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	02db      	lsls	r3, r3, #11
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	019b      	lsls	r3, r3, #6
 8001e3c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e68:	f7ff fa50 	bl	800130c <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e6e:	e00d      	b.n	8001e8c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001e70:	f7ff fa4c 	bl	800130c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7e:	d301      	bcc.n	8001e84 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e009      	b.n	8001e98 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ec      	bne.n	8001e70 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0d9      	b.n	8002068 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf14      	ite	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	2300      	moveq	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf14      	ite	ne
 8001fce:	2301      	movne	r3, #1
 8001fd0:	2300      	moveq	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf14      	ite	ne
 8001fe8:	2301      	movne	r3, #1
 8001fea:	2300      	moveq	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	0c1b      	lsrs	r3, r3, #16
 8002028:	b29a      	uxth	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf14      	ite	ne
 8002058:	2301      	movne	r3, #1
 800205a:	2300      	moveq	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e00b      	b.n	80020a0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800208e:	2b10      	cmp	r3, #16
 8002090:	d105      	bne.n	800209e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002092:	6839      	ldr	r1, [r7, #0]
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f883 	bl	80021a0 <ETH_SetMACConfig>

    return HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	e000      	b.n	80020a0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
  }
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f023 031c 	bic.w	r3, r3, #28
 80020be:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020c0:	f001 fc74 	bl	80039ac <HAL_RCC_GetHCLKFreq>
 80020c4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002140 <HAL_ETH_SetMDIOClockRange+0x98>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d908      	bls.n	80020e0 <HAL_ETH_SetMDIOClockRange+0x38>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002144 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d804      	bhi.n	80020e0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f043 0308 	orr.w	r3, r3, #8
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	e027      	b.n	8002130 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4a18      	ldr	r2, [pc, #96]	@ (8002144 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d908      	bls.n	80020fa <HAL_ETH_SetMDIOClockRange+0x52>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4a17      	ldr	r2, [pc, #92]	@ (8002148 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d204      	bcs.n	80020fa <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f043 030c 	orr.w	r3, r3, #12
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	e01a      	b.n	8002130 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d303      	bcc.n	800210a <HAL_ETH_SetMDIOClockRange+0x62>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4a11      	ldr	r2, [pc, #68]	@ (800214c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d911      	bls.n	800212e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4a0f      	ldr	r2, [pc, #60]	@ (800214c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d908      	bls.n	8002124 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4a0e      	ldr	r2, [pc, #56]	@ (8002150 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d804      	bhi.n	8002124 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	e005      	b.n	8002130 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f043 0310 	orr.w	r3, r3, #16
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e000      	b.n	8002130 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800212e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	611a      	str	r2, [r3, #16]
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	01312cff 	.word	0x01312cff
 8002144:	02160ebf 	.word	0x02160ebf
 8002148:	03938700 	.word	0x03938700
 800214c:	05f5e0ff 	.word	0x05f5e0ff
 8002150:	08f0d17f 	.word	0x08f0d17f

08002154 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002172:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002176:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002184:	2001      	movs	r0, #1
 8002186:	f7ff f8cd 	bl	8001324 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002194:	6193      	str	r3, [r2, #24]
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4b51      	ldr	r3, [pc, #324]	@ (80022fc <ETH_SetMACConfig+0x15c>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	7c1b      	ldrb	r3, [r3, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <ETH_SetMACConfig+0x28>
 80021c2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021c6:	e000      	b.n	80021ca <ETH_SetMACConfig+0x2a>
 80021c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	7c5b      	ldrb	r3, [r3, #17]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <ETH_SetMACConfig+0x38>
 80021d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021d6:	e000      	b.n	80021da <ETH_SetMACConfig+0x3a>
 80021d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	7fdb      	ldrb	r3, [r3, #31]
 80021e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	7f92      	ldrb	r2, [r2, #30]
 80021f4:	2a00      	cmp	r2, #0
 80021f6:	d102      	bne.n	80021fe <ETH_SetMACConfig+0x5e>
 80021f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021fc:	e000      	b.n	8002200 <ETH_SetMACConfig+0x60>
 80021fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8002200:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	7f1b      	ldrb	r3, [r3, #28]
 8002206:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002208:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800220e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	791b      	ldrb	r3, [r3, #4]
 8002214:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002216:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800221e:	2a00      	cmp	r2, #0
 8002220:	d102      	bne.n	8002228 <ETH_SetMACConfig+0x88>
 8002222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002226:	e000      	b.n	800222a <ETH_SetMACConfig+0x8a>
 8002228:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800222a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	7bdb      	ldrb	r3, [r3, #15]
 8002230:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002232:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002238:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002240:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002242:	4313      	orrs	r3, r2
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800225a:	2001      	movs	r0, #1
 800225c:	f7ff f862 	bl	8001324 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002276:	4013      	ands	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800227e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002286:	2a00      	cmp	r2, #0
 8002288:	d101      	bne.n	800228e <ETH_SetMACConfig+0xee>
 800228a:	2280      	movs	r2, #128	@ 0x80
 800228c:	e000      	b.n	8002290 <ETH_SetMACConfig+0xf0>
 800228e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002290:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002296:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800229e:	2a01      	cmp	r2, #1
 80022a0:	d101      	bne.n	80022a6 <ETH_SetMACConfig+0x106>
 80022a2:	2208      	movs	r2, #8
 80022a4:	e000      	b.n	80022a8 <ETH_SetMACConfig+0x108>
 80022a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80022b0:	2a01      	cmp	r2, #1
 80022b2:	d101      	bne.n	80022b8 <ETH_SetMACConfig+0x118>
 80022b4:	2204      	movs	r2, #4
 80022b6:	e000      	b.n	80022ba <ETH_SetMACConfig+0x11a>
 80022b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80022c2:	2a01      	cmp	r2, #1
 80022c4:	d101      	bne.n	80022ca <ETH_SetMACConfig+0x12a>
 80022c6:	2202      	movs	r2, #2
 80022c8:	e000      	b.n	80022cc <ETH_SetMACConfig+0x12c>
 80022ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022cc:	4313      	orrs	r3, r2
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7ff f81d 	bl	8001324 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	619a      	str	r2, [r3, #24]
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	ff20810f 	.word	0xff20810f

08002300 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <ETH_SetDMAConfig+0x110>)
 800231a:	4013      	ands	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	7b1b      	ldrb	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <ETH_SetDMAConfig+0x2c>
 8002326:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800232a:	e000      	b.n	800232e <ETH_SetDMAConfig+0x2e>
 800232c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	7b5b      	ldrb	r3, [r3, #13]
 8002332:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002334:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	7f52      	ldrb	r2, [r2, #29]
 800233a:	2a00      	cmp	r2, #0
 800233c:	d102      	bne.n	8002344 <ETH_SetDMAConfig+0x44>
 800233e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002342:	e000      	b.n	8002346 <ETH_SetDMAConfig+0x46>
 8002344:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002346:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	7b9b      	ldrb	r3, [r3, #14]
 800234c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800234e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002354:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	7f1b      	ldrb	r3, [r3, #28]
 800235a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800235c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	7f9b      	ldrb	r3, [r3, #30]
 8002362:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002364:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800236a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002372:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002374:	4313      	orrs	r3, r2
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002384:	461a      	mov	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002396:	2001      	movs	r0, #1
 8002398:	f7fe ffc4 	bl	8001324 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023a4:	461a      	mov	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	791b      	ldrb	r3, [r3, #4]
 80023ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7fe ff95 	bl	8001324 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	f8de3f23 	.word	0xf8de3f23

08002414 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0a6      	sub	sp, #152	@ 0x98
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800241c:	2301      	movs	r3, #1
 800241e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002422:	2301      	movs	r3, #1
 8002424:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002428:	2300      	movs	r3, #0
 800242a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002432:	2301      	movs	r3, #1
 8002434:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800243e:	2301      	movs	r3, #1
 8002440:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002450:	2300      	movs	r3, #0
 8002452:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800245a:	2300      	movs	r3, #0
 800245c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002476:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800247a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800247c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002480:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002488:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff fe86 	bl	80021a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002494:	2301      	movs	r3, #1
 8002496:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002498:	2301      	movs	r3, #1
 800249a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024c0:	2301      	movs	r3, #1
 80024c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024c8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ff08 	bl	8002300 <ETH_SetDMAConfig>
}
 80024f0:	bf00      	nop
 80024f2:	3798      	adds	r7, #152	@ 0x98
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3305      	adds	r3, #5
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	3204      	adds	r2, #4
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <ETH_MACAddressConfig+0x68>)
 800251a:	4413      	add	r3, r2
 800251c:	461a      	mov	r2, r3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3303      	adds	r3, #3
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	061a      	lsls	r2, r3, #24
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3302      	adds	r3, #2
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	041b      	lsls	r3, r3, #16
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3301      	adds	r3, #1
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	4313      	orrs	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <ETH_MACAddressConfig+0x6c>)
 800254a:	4413      	add	r3, r2
 800254c:	461a      	mov	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	6013      	str	r3, [r2, #0]
}
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40028040 	.word	0x40028040
 8002564:	40028044 	.word	0x40028044

08002568 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e03e      	b.n	80025f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68d9      	ldr	r1, [r3, #12]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2200      	movs	r2, #0
 8002592:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2200      	movs	r2, #0
 800259e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	3206      	adds	r2, #6
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d80c      	bhi.n	80025d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68d9      	ldr	r1, [r3, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	461a      	mov	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	e004      	b.n	80025e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	461a      	mov	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3301      	adds	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d9bd      	bls.n	8002576 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800260c:	611a      	str	r2, [r3, #16]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	e046      	b.n	80026b6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6919      	ldr	r1, [r3, #16]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	440b      	add	r3, r1
 8002638:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2200      	movs	r2, #0
 8002644:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002664:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 800266c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	3212      	adds	r2, #18
 8002682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d80c      	bhi.n	80026a6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6919      	ldr	r1, [r3, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	461a      	mov	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	e004      	b.n	80026b0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3301      	adds	r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d9b5      	bls.n	8002628 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026e6:	60da      	str	r2, [r3, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b08d      	sub	sp, #52	@ 0x34
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3318      	adds	r3, #24
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800271a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002732:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002736:	d007      	beq.n	8002748 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273c:	3304      	adds	r3, #4
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002748:	2302      	movs	r3, #2
 800274a:	e0ff      	b.n	800294c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	3301      	adds	r3, #1
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002762:	4013      	ands	r3, r2
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	6852      	ldr	r2, [r2, #4]
 8002768:	431a      	orrs	r2, r3
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	431a      	orrs	r2, r3
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80027ce:	f3bf 8f5f 	dmb	sy
}
 80027d2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80027e0:	e082      	b.n	80028e8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d006      	beq.n	8002802 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	e005      	b.n	800280e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	3301      	adds	r3, #1
 8002812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002816:	2b03      	cmp	r3, #3
 8002818:	d902      	bls.n	8002820 <ETH_Prepare_Tx_Descriptors+0x12c>
 800281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281c:	3b04      	subs	r3, #4
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800283e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002842:	d007      	beq.n	8002854 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002848:	3304      	adds	r3, #4
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d029      	beq.n	80028a8 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002862:	2300      	movs	r3, #0
 8002864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002866:	e019      	b.n	800289c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002868:	f3bf 8f5f 	dmb	sy
}
 800286c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800287a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287c:	3301      	adds	r3, #1
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002882:	2b03      	cmp	r3, #3
 8002884:	d902      	bls.n	800288c <ETH_Prepare_Tx_Descriptors+0x198>
 8002886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002888:	3b04      	subs	r3, #4
 800288a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002894:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002898:	3301      	adds	r3, #1
 800289a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800289c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d3e1      	bcc.n	8002868 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80028a4:	2302      	movs	r3, #2
 80028a6:	e051      	b.n	800294c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	3301      	adds	r3, #1
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <ETH_Prepare_Tx_Descriptors+0x264>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	6852      	ldr	r2, [r2, #4]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	3301      	adds	r3, #1
 80028d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80028d6:	f3bf 8f5f 	dmb	sy
}
 80028da:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f af78 	bne.w	80027e2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e005      	b.n	8002912 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002922:	6979      	ldr	r1, [r7, #20]
 8002924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002926:	3304      	adds	r3, #4
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002932:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002934:	b672      	cpsid	i
}
 8002936:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4413      	add	r3, r2
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002946:	b662      	cpsie	i
}
 8002948:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3734      	adds	r7, #52	@ 0x34
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	ffffe000 	.word	0xffffe000

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	@ 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	e175      	b.n	8002c68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800297c:	2201      	movs	r2, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	f040 8164 	bne.w	8002c62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d005      	beq.n	80029b2 <HAL_GPIO_Init+0x56>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d130      	bne.n	8002a14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 0201 	and.w	r2, r3, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d017      	beq.n	8002a50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d123      	bne.n	8002aa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	08da      	lsrs	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3208      	adds	r2, #8
 8002a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	220f      	movs	r2, #15
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	08da      	lsrs	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3208      	adds	r2, #8
 8002a9e:	69b9      	ldr	r1, [r7, #24]
 8002aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0203 	and.w	r2, r3, #3
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80be 	beq.w	8002c62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae6:	4b66      	ldr	r3, [pc, #408]	@ (8002c80 <HAL_GPIO_Init+0x324>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	4a65      	ldr	r2, [pc, #404]	@ (8002c80 <HAL_GPIO_Init+0x324>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002af2:	4b63      	ldr	r3, [pc, #396]	@ (8002c80 <HAL_GPIO_Init+0x324>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002afe:	4a61      	ldr	r2, [pc, #388]	@ (8002c84 <HAL_GPIO_Init+0x328>)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a58      	ldr	r2, [pc, #352]	@ (8002c88 <HAL_GPIO_Init+0x32c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d037      	beq.n	8002b9a <HAL_GPIO_Init+0x23e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a57      	ldr	r2, [pc, #348]	@ (8002c8c <HAL_GPIO_Init+0x330>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d031      	beq.n	8002b96 <HAL_GPIO_Init+0x23a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a56      	ldr	r2, [pc, #344]	@ (8002c90 <HAL_GPIO_Init+0x334>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02b      	beq.n	8002b92 <HAL_GPIO_Init+0x236>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a55      	ldr	r2, [pc, #340]	@ (8002c94 <HAL_GPIO_Init+0x338>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d025      	beq.n	8002b8e <HAL_GPIO_Init+0x232>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a54      	ldr	r2, [pc, #336]	@ (8002c98 <HAL_GPIO_Init+0x33c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01f      	beq.n	8002b8a <HAL_GPIO_Init+0x22e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a53      	ldr	r2, [pc, #332]	@ (8002c9c <HAL_GPIO_Init+0x340>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d019      	beq.n	8002b86 <HAL_GPIO_Init+0x22a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a52      	ldr	r2, [pc, #328]	@ (8002ca0 <HAL_GPIO_Init+0x344>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_GPIO_Init+0x226>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a51      	ldr	r2, [pc, #324]	@ (8002ca4 <HAL_GPIO_Init+0x348>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00d      	beq.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a50      	ldr	r2, [pc, #320]	@ (8002ca8 <HAL_GPIO_Init+0x34c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <HAL_GPIO_Init+0x21e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4f      	ldr	r2, [pc, #316]	@ (8002cac <HAL_GPIO_Init+0x350>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_GPIO_Init+0x21a>
 8002b72:	2309      	movs	r3, #9
 8002b74:	e012      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b76:	230a      	movs	r3, #10
 8002b78:	e010      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	e00e      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b7e:	2307      	movs	r3, #7
 8002b80:	e00c      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b82:	2306      	movs	r3, #6
 8002b84:	e00a      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b86:	2305      	movs	r3, #5
 8002b88:	e008      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e004      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	f002 0203 	and.w	r2, r2, #3
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	4093      	lsls	r3, r2
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bac:	4935      	ldr	r1, [pc, #212]	@ (8002c84 <HAL_GPIO_Init+0x328>)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bba:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bde:	4a34      	ldr	r2, [pc, #208]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be4:	4b32      	ldr	r3, [pc, #200]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c08:	4a29      	ldr	r2, [pc, #164]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c0e:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c32:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c38:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c5c:	4a14      	ldr	r2, [pc, #80]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3301      	adds	r3, #1
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b0f      	cmp	r3, #15
 8002c6c:	f67f ae86 	bls.w	800297c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3724      	adds	r7, #36	@ 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40013800 	.word	0x40013800
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40020400 	.word	0x40020400
 8002c90:	40020800 	.word	0x40020800
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40021400 	.word	0x40021400
 8002ca0:	40021800 	.word	0x40021800
 8002ca4:	40021c00 	.word	0x40021c00
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40022400 	.word	0x40022400
 8002cb0:	40013c00 	.word	0x40013c00

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cd0:	e003      	b.n	8002cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cf8:	887a      	ldrh	r2, [r7, #2]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	041a      	lsls	r2, r3, #16
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	400b      	ands	r3, r1
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1c:	b08f      	sub	sp, #60	@ 0x3c
 8002d1e:	af0a      	add	r7, sp, #40	@ 0x28
 8002d20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e116      	b.n	8002f5a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fd fed6 	bl	8000af8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2203      	movs	r2, #3
 8002d50:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 fc02 	bl	8005574 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	687e      	ldr	r6, [r7, #4]
 8002d78:	466d      	mov	r5, sp
 8002d7a:	f106 0410 	add.w	r4, r6, #16
 8002d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d8e:	1d33      	adds	r3, r6, #4
 8002d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d92:	6838      	ldr	r0, [r7, #0]
 8002d94:	f002 fb96 	bl	80054c4 <USB_CoreInit>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0d7      	b.n	8002f5a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f002 fbf0 	bl	8005596 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	e04a      	b.n	8002e52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dbc:	7bfa      	ldrb	r2, [r7, #15]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	333d      	adds	r3, #61	@ 0x3d
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	333c      	adds	r3, #60	@ 0x3c
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	b298      	uxth	r0, r3
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	3344      	adds	r3, #68	@ 0x44
 8002df8:	4602      	mov	r2, r0
 8002dfa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	3340      	adds	r3, #64	@ 0x40
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e10:	7bfa      	ldrb	r2, [r7, #15]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3348      	adds	r3, #72	@ 0x48
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	334c      	adds	r3, #76	@ 0x4c
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	3354      	adds	r3, #84	@ 0x54
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d3af      	bcc.n	8002dbc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	e044      	b.n	8002eec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e62:	7bfa      	ldrb	r2, [r7, #15]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d3b5      	bcc.n	8002e62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	687e      	ldr	r6, [r7, #4]
 8002efe:	466d      	mov	r5, sp
 8002f00:	f106 0410 	add.w	r4, r6, #16
 8002f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f10:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f14:	1d33      	adds	r3, r6, #4
 8002f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f18:	6838      	ldr	r0, [r7, #0]
 8002f1a:	f002 fb89 	bl	8005630 <USB_DevInit>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e014      	b.n	8002f5a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d102      	bne.n	8002f4e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f80b 	bl	8002f64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 fd47 	bl	80059e6 <USB_DevDisconnect>

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f92:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	10000003 	.word	0x10000003

08002fac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40007000 	.word	0x40007000

08002fcc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	4a22      	ldr	r2, [pc, #136]	@ (8003064 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe2:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fee:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8003068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ffa:	f7fe f987 	bl	800130c <HAL_GetTick>
 8002ffe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003000:	e009      	b.n	8003016 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003002:	f7fe f983 	bl	800130c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003010:	d901      	bls.n	8003016 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e022      	b.n	800305c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003016:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800301e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003022:	d1ee      	bne.n	8003002 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003024:	4b10      	ldr	r3, [pc, #64]	@ (8003068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0f      	ldr	r2, [pc, #60]	@ (8003068 <HAL_PWREx_EnableOverDrive+0x9c>)
 800302a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800302e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003030:	f7fe f96c 	bl	800130c <HAL_GetTick>
 8003034:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003036:	e009      	b.n	800304c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003038:	f7fe f968 	bl	800130c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003046:	d901      	bls.n	800304c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e007      	b.n	800305c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800304c:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_PWREx_EnableOverDrive+0x9c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003054:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003058:	d1ee      	bne.n	8003038 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	40007000 	.word	0x40007000

0800306c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003074:	2300      	movs	r3, #0
 8003076:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e29b      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8087 	beq.w	800319e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003090:	4b96      	ldr	r3, [pc, #600]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b04      	cmp	r3, #4
 800309a:	d00c      	beq.n	80030b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309c:	4b93      	ldr	r3, [pc, #588]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d112      	bne.n	80030ce <HAL_RCC_OscConfig+0x62>
 80030a8:	4b90      	ldr	r3, [pc, #576]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030b4:	d10b      	bne.n	80030ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b6:	4b8d      	ldr	r3, [pc, #564]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d06c      	beq.n	800319c <HAL_RCC_OscConfig+0x130>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d168      	bne.n	800319c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e275      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x7a>
 80030d8:	4b84      	ldr	r3, [pc, #528]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a83      	ldr	r2, [pc, #524]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	e02e      	b.n	8003144 <HAL_RCC_OscConfig+0xd8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x9c>
 80030ee:	4b7f      	ldr	r3, [pc, #508]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7e      	ldr	r2, [pc, #504]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80030f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b7c      	ldr	r3, [pc, #496]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7b      	ldr	r2, [pc, #492]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e01d      	b.n	8003144 <HAL_RCC_OscConfig+0xd8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0xc0>
 8003112:	4b76      	ldr	r3, [pc, #472]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a75      	ldr	r2, [pc, #468]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b73      	ldr	r3, [pc, #460]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a72      	ldr	r2, [pc, #456]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0xd8>
 800312c:	4b6f      	ldr	r3, [pc, #444]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a6e      	ldr	r2, [pc, #440]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b6c      	ldr	r3, [pc, #432]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6b      	ldr	r2, [pc, #428]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d013      	beq.n	8003174 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe f8de 	bl	800130c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7fe f8da 	bl	800130c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	@ 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e229      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b61      	ldr	r3, [pc, #388]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0xe8>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe f8ca 	bl	800130c <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317c:	f7fe f8c6 	bl	800130c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	@ 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e215      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	4b57      	ldr	r3, [pc, #348]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x110>
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d069      	beq.n	800327e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031aa:	4b50      	ldr	r3, [pc, #320]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b4d      	ldr	r3, [pc, #308]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d11c      	bne.n	80031fc <HAL_RCC_OscConfig+0x190>
 80031c2:	4b4a      	ldr	r3, [pc, #296]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	4b47      	ldr	r3, [pc, #284]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e1e9      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b41      	ldr	r3, [pc, #260]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	493d      	ldr	r1, [pc, #244]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fa:	e040      	b.n	800327e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d023      	beq.n	800324c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003204:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a38      	ldr	r2, [pc, #224]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe f87c 	bl	800130c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003218:	f7fe f878 	bl	800130c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1c7      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	4b30      	ldr	r3, [pc, #192]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b2d      	ldr	r3, [pc, #180]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4929      	ldr	r1, [pc, #164]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
 800324a:	e018      	b.n	800327e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324c:	4b27      	ldr	r3, [pc, #156]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a26      	ldr	r2, [pc, #152]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe f858 	bl	800130c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003260:	f7fe f854 	bl	800130c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1a3      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4b1e      	ldr	r3, [pc, #120]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d038      	beq.n	80032fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d019      	beq.n	80032c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003296:	4a15      	ldr	r2, [pc, #84]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7fe f835 	bl	800130c <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a6:	f7fe f831 	bl	800130c <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e180      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b8:	4b0c      	ldr	r3, [pc, #48]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80032ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x23a>
 80032c4:	e01a      	b.n	80032fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80032c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ca:	4a08      	ldr	r2, [pc, #32]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fe f81b 	bl	800130c <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032da:	f7fe f817 	bl	800130c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d903      	bls.n	80032f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e166      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
 80032ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b92      	ldr	r3, [pc, #584]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ee      	bne.n	80032da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80a4 	beq.w	8003452 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330a:	4b8c      	ldr	r3, [pc, #560]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	4b89      	ldr	r3, [pc, #548]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	4a88      	ldr	r2, [pc, #544]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	@ 0x40
 8003322:	4b86      	ldr	r3, [pc, #536]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003332:	4b83      	ldr	r3, [pc, #524]	@ (8003540 <HAL_RCC_OscConfig+0x4d4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800333e:	4b80      	ldr	r3, [pc, #512]	@ (8003540 <HAL_RCC_OscConfig+0x4d4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7f      	ldr	r2, [pc, #508]	@ (8003540 <HAL_RCC_OscConfig+0x4d4>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7fd ffdf 	bl	800130c <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fd ffdb 	bl	800130c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b64      	cmp	r3, #100	@ 0x64
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e12a      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003364:	4b76      	ldr	r3, [pc, #472]	@ (8003540 <HAL_RCC_OscConfig+0x4d4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x31a>
 8003378:	4b70      	ldr	r3, [pc, #448]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337c:	4a6f      	ldr	r2, [pc, #444]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	@ 0x70
 8003384:	e02d      	b.n	80033e2 <HAL_RCC_OscConfig+0x376>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x33c>
 800338e:	4b6b      	ldr	r3, [pc, #428]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	4a6a      	ldr	r2, [pc, #424]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6713      	str	r3, [r2, #112]	@ 0x70
 800339a:	4b68      	ldr	r3, [pc, #416]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339e:	4a67      	ldr	r2, [pc, #412]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a6:	e01c      	b.n	80033e2 <HAL_RCC_OscConfig+0x376>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_OscConfig+0x35e>
 80033b0:	4b62      	ldr	r3, [pc, #392]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	4a61      	ldr	r2, [pc, #388]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80033bc:	4b5f      	ldr	r3, [pc, #380]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c0:	4a5e      	ldr	r2, [pc, #376]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c8:	e00b      	b.n	80033e2 <HAL_RCC_OscConfig+0x376>
 80033ca:	4b5c      	ldr	r3, [pc, #368]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	4a5b      	ldr	r2, [pc, #364]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d6:	4b59      	ldr	r3, [pc, #356]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033da:	4a58      	ldr	r2, [pc, #352]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d015      	beq.n	8003416 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7fd ff8f 	bl	800130c <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fd ff8b 	bl	800130c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0d8      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	4b4c      	ldr	r3, [pc, #304]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ee      	beq.n	80033f2 <HAL_RCC_OscConfig+0x386>
 8003414:	e014      	b.n	8003440 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fd ff79 	bl	800130c <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7fd ff75 	bl	800130c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e0c2      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	4b41      	ldr	r3, [pc, #260]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ee      	bne.n	800341e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b3d      	ldr	r3, [pc, #244]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	4a3c      	ldr	r2, [pc, #240]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003450:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80ae 	beq.w	80035b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800345c:	4b37      	ldr	r3, [pc, #220]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d06d      	beq.n	8003544 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d14b      	bne.n	8003508 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b32      	ldr	r3, [pc, #200]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a31      	ldr	r2, [pc, #196]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800347a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fd ff46 	bl	800130c <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fd ff42 	bl	800130c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e091      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b29      	ldr	r3, [pc, #164]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	3b01      	subs	r3, #1
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034cc:	071b      	lsls	r3, r3, #28
 80034ce:	491b      	ldr	r1, [pc, #108]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d4:	4b19      	ldr	r3, [pc, #100]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a18      	ldr	r2, [pc, #96]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fd ff14 	bl	800130c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fd ff10 	bl	800130c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e05f      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fa:	4b10      	ldr	r3, [pc, #64]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x47c>
 8003506:	e057      	b.n	80035b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0b      	ldr	r2, [pc, #44]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 800350e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fd fefa 	bl	800130c <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fd fef6 	bl	800130c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e045      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b03      	ldr	r3, [pc, #12]	@ (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x4b0>
 800353a:	e03d      	b.n	80035b8 <HAL_RCC_OscConfig+0x54c>
 800353c:	40023800 	.word	0x40023800
 8003540:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003544:	4b1f      	ldr	r3, [pc, #124]	@ (80035c4 <HAL_RCC_OscConfig+0x558>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d030      	beq.n	80035b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d129      	bne.n	80035b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d122      	bne.n	80035b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003574:	4013      	ands	r3, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800357a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800357c:	4293      	cmp	r3, r2
 800357e:	d119      	bne.n	80035b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	3b01      	subs	r3, #1
 800358e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d10f      	bne.n	80035b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800

080035c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0d0      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b6a      	ldr	r3, [pc, #424]	@ (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d910      	bls.n	8003610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b67      	ldr	r3, [pc, #412]	@ (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 020f 	bic.w	r2, r3, #15
 80035f6:	4965      	ldr	r1, [pc, #404]	@ (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b63      	ldr	r3, [pc, #396]	@ (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0b8      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d020      	beq.n	800365e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003628:	4b59      	ldr	r3, [pc, #356]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a58      	ldr	r2, [pc, #352]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003632:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003640:	4b53      	ldr	r3, [pc, #332]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a52      	ldr	r2, [pc, #328]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800364a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364c:	4b50      	ldr	r3, [pc, #320]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	494d      	ldr	r1, [pc, #308]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d040      	beq.n	80036ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	4b47      	ldr	r3, [pc, #284]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d115      	bne.n	80036aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e07f      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368a:	4b41      	ldr	r3, [pc, #260]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e073      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369a:	4b3d      	ldr	r3, [pc, #244]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e06b      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036aa:	4b39      	ldr	r3, [pc, #228]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 0203 	bic.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4936      	ldr	r1, [pc, #216]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036bc:	f7fd fe26 	bl	800130c <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	e00a      	b.n	80036da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c4:	f7fd fe22 	bl	800130c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e053      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036da:	4b2d      	ldr	r3, [pc, #180]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 020c 	and.w	r2, r3, #12
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d1eb      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ec:	4b27      	ldr	r3, [pc, #156]	@ (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d210      	bcs.n	800371c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b24      	ldr	r3, [pc, #144]	@ (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 020f 	bic.w	r2, r3, #15
 8003702:	4922      	ldr	r1, [pc, #136]	@ (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4b20      	ldr	r3, [pc, #128]	@ (800378c <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e032      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003728:	4b19      	ldr	r3, [pc, #100]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4916      	ldr	r1, [pc, #88]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003746:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	490e      	ldr	r1, [pc, #56]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800375a:	f000 f821 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 800375e:	4602      	mov	r2, r0
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	490a      	ldr	r1, [pc, #40]	@ (8003794 <HAL_RCC_ClockConfig+0x1cc>)
 800376c:	5ccb      	ldrb	r3, [r1, r3]
 800376e:	fa22 f303 	lsr.w	r3, r2, r3
 8003772:	4a09      	ldr	r2, [pc, #36]	@ (8003798 <HAL_RCC_ClockConfig+0x1d0>)
 8003774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003776:	4b09      	ldr	r3, [pc, #36]	@ (800379c <HAL_RCC_ClockConfig+0x1d4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fd82 	bl	8001284 <HAL_InitTick>

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023c00 	.word	0x40023c00
 8003790:	40023800 	.word	0x40023800
 8003794:	0800d830 	.word	0x0800d830
 8003798:	20000000 	.word	0x20000000
 800379c:	20000004 	.word	0x20000004

080037a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a4:	b094      	sub	sp, #80	@ 0x50
 80037a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ac:	2300      	movs	r3, #0
 80037ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037b0:	2300      	movs	r3, #0
 80037b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b8:	4b79      	ldr	r3, [pc, #484]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d00d      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x40>
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	f200 80e1 	bhi.w	800398c <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x34>
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d003      	beq.n	80037da <HAL_RCC_GetSysClockFreq+0x3a>
 80037d2:	e0db      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b73      	ldr	r3, [pc, #460]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037d8:	e0db      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037da:	4b73      	ldr	r3, [pc, #460]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80037dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037de:	e0d8      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037e0:	4b6f      	ldr	r3, [pc, #444]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037ea:	4b6d      	ldr	r3, [pc, #436]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d063      	beq.n	80038be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f6:	4b6a      	ldr	r3, [pc, #424]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	099b      	lsrs	r3, r3, #6
 80037fc:	2200      	movs	r2, #0
 80037fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003800:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003808:	633b      	str	r3, [r7, #48]	@ 0x30
 800380a:	2300      	movs	r3, #0
 800380c:	637b      	str	r3, [r7, #52]	@ 0x34
 800380e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003812:	4622      	mov	r2, r4
 8003814:	462b      	mov	r3, r5
 8003816:	f04f 0000 	mov.w	r0, #0
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	0159      	lsls	r1, r3, #5
 8003820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003824:	0150      	lsls	r0, r2, #5
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4621      	mov	r1, r4
 800382c:	1a51      	subs	r1, r2, r1
 800382e:	6139      	str	r1, [r7, #16]
 8003830:	4629      	mov	r1, r5
 8003832:	eb63 0301 	sbc.w	r3, r3, r1
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003844:	4659      	mov	r1, fp
 8003846:	018b      	lsls	r3, r1, #6
 8003848:	4651      	mov	r1, sl
 800384a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800384e:	4651      	mov	r1, sl
 8003850:	018a      	lsls	r2, r1, #6
 8003852:	4651      	mov	r1, sl
 8003854:	ebb2 0801 	subs.w	r8, r2, r1
 8003858:	4659      	mov	r1, fp
 800385a:	eb63 0901 	sbc.w	r9, r3, r1
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800386a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800386e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003872:	4690      	mov	r8, r2
 8003874:	4699      	mov	r9, r3
 8003876:	4623      	mov	r3, r4
 8003878:	eb18 0303 	adds.w	r3, r8, r3
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	462b      	mov	r3, r5
 8003880:	eb49 0303 	adc.w	r3, r9, r3
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003892:	4629      	mov	r1, r5
 8003894:	024b      	lsls	r3, r1, #9
 8003896:	4621      	mov	r1, r4
 8003898:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800389c:	4621      	mov	r1, r4
 800389e:	024a      	lsls	r2, r1, #9
 80038a0:	4610      	mov	r0, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038a6:	2200      	movs	r2, #0
 80038a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038b0:	f7fc fd16 	bl	80002e0 <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4613      	mov	r3, r2
 80038ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038bc:	e058      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038be:	4b38      	ldr	r3, [pc, #224]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	2200      	movs	r2, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	4611      	mov	r1, r2
 80038ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038ce:	623b      	str	r3, [r7, #32]
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038d8:	4642      	mov	r2, r8
 80038da:	464b      	mov	r3, r9
 80038dc:	f04f 0000 	mov.w	r0, #0
 80038e0:	f04f 0100 	mov.w	r1, #0
 80038e4:	0159      	lsls	r1, r3, #5
 80038e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ea:	0150      	lsls	r0, r2, #5
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4641      	mov	r1, r8
 80038f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038f6:	4649      	mov	r1, r9
 80038f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003908:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800390c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003910:	ebb2 040a 	subs.w	r4, r2, sl
 8003914:	eb63 050b 	sbc.w	r5, r3, fp
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	00eb      	lsls	r3, r5, #3
 8003922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003926:	00e2      	lsls	r2, r4, #3
 8003928:	4614      	mov	r4, r2
 800392a:	461d      	mov	r5, r3
 800392c:	4643      	mov	r3, r8
 800392e:	18e3      	adds	r3, r4, r3
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	464b      	mov	r3, r9
 8003934:	eb45 0303 	adc.w	r3, r5, r3
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003946:	4629      	mov	r1, r5
 8003948:	028b      	lsls	r3, r1, #10
 800394a:	4621      	mov	r1, r4
 800394c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003950:	4621      	mov	r1, r4
 8003952:	028a      	lsls	r2, r1, #10
 8003954:	4610      	mov	r0, r2
 8003956:	4619      	mov	r1, r3
 8003958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800395a:	2200      	movs	r2, #0
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	61fa      	str	r2, [r7, #28]
 8003960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003964:	f7fc fcbc 	bl	80002e0 <__aeabi_uldivmod>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4613      	mov	r3, r2
 800396e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003970:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	3301      	adds	r3, #1
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003980:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800398a:	e002      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800398e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003994:	4618      	mov	r0, r3
 8003996:	3750      	adds	r7, #80	@ 0x50
 8003998:	46bd      	mov	sp, r7
 800399a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800
 80039a4:	00f42400 	.word	0x00f42400
 80039a8:	007a1200 	.word	0x007a1200

080039ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b0:	4b03      	ldr	r3, [pc, #12]	@ (80039c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039b2:	681b      	ldr	r3, [r3, #0]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000000 	.word	0x20000000

080039c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039c8:	f7ff fff0 	bl	80039ac <HAL_RCC_GetHCLKFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	0a9b      	lsrs	r3, r3, #10
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4903      	ldr	r1, [pc, #12]	@ (80039e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40023800 	.word	0x40023800
 80039e8:	0800d840 	.word	0x0800d840

080039ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039f0:	f7ff ffdc 	bl	80039ac <HAL_RCC_GetHCLKFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b05      	ldr	r3, [pc, #20]	@ (8003a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	0b5b      	lsrs	r3, r3, #13
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4903      	ldr	r1, [pc, #12]	@ (8003a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	0800d840 	.word	0x0800d840

08003a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d012      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a3c:	4b69      	ldr	r3, [pc, #420]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a68      	ldr	r2, [pc, #416]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a46:	6093      	str	r3, [r2, #8]
 8003a48:	4b66      	ldr	r3, [pc, #408]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a50:	4964      	ldr	r1, [pc, #400]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d017      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	4959      	ldr	r1, [pc, #356]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d017      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ab0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	494a      	ldr	r1, [pc, #296]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac8:	d101      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 808b 	beq.w	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	4b3a      	ldr	r3, [pc, #232]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	4a39      	ldr	r2, [pc, #228]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b04:	4b37      	ldr	r3, [pc, #220]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b10:	4b35      	ldr	r3, [pc, #212]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a34      	ldr	r2, [pc, #208]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fd fbf6 	bl	800130c <HAL_GetTick>
 8003b20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b24:	f7fd fbf2 	bl	800130c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	@ 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e38f      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b36:	4b2c      	ldr	r3, [pc, #176]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b42:	4b28      	ldr	r3, [pc, #160]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d035      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d02e      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b60:	4b20      	ldr	r3, [pc, #128]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b76:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b82:	4a18      	ldr	r2, [pc, #96]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b88:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d114      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd fbba 	bl	800130c <HAL_GetTick>
 8003b98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9c:	f7fd fbb6 	bl	800130c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e351      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ee      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bca:	d111      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bd8:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bda:	400b      	ands	r3, r1
 8003bdc:	4901      	ldr	r1, [pc, #4]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
 8003be2:	e00b      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40007000 	.word	0x40007000
 8003bec:	0ffffcff 	.word	0x0ffffcff
 8003bf0:	4bac      	ldr	r3, [pc, #688]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4aab      	ldr	r2, [pc, #684]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bfa:	6093      	str	r3, [r2, #8]
 8003bfc:	4ba9      	ldr	r3, [pc, #676]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	49a6      	ldr	r1, [pc, #664]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d010      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c1a:	4ba2      	ldr	r3, [pc, #648]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c20:	4aa0      	ldr	r2, [pc, #640]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c2a:	4b9e      	ldr	r3, [pc, #632]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c34:	499b      	ldr	r1, [pc, #620]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c48:	4b96      	ldr	r3, [pc, #600]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c56:	4993      	ldr	r1, [pc, #588]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c6a:	4b8e      	ldr	r3, [pc, #568]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c78:	498a      	ldr	r1, [pc, #552]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c8c:	4b85      	ldr	r3, [pc, #532]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c9a:	4982      	ldr	r1, [pc, #520]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cae:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbc:	4979      	ldr	r1, [pc, #484]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd0:	4b74      	ldr	r3, [pc, #464]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	4971      	ldr	r1, [pc, #452]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf8:	f023 020c 	bic.w	r2, r3, #12
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d00:	4968      	ldr	r1, [pc, #416]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d14:	4b63      	ldr	r3, [pc, #396]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d22:	4960      	ldr	r1, [pc, #384]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d36:	4b5b      	ldr	r3, [pc, #364]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d44:	4957      	ldr	r1, [pc, #348]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d58:	4b52      	ldr	r3, [pc, #328]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	494f      	ldr	r1, [pc, #316]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	4946      	ldr	r1, [pc, #280]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d9c:	4b41      	ldr	r3, [pc, #260]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003daa:	493e      	ldr	r1, [pc, #248]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003dbe:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dcc:	4935      	ldr	r1, [pc, #212]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003de0:	4b30      	ldr	r3, [pc, #192]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dee:	492d      	ldr	r1, [pc, #180]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d011      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e02:	4b28      	ldr	r3, [pc, #160]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e08:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e10:	4924      	ldr	r1, [pc, #144]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e20:	d101      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e42:	4b18      	ldr	r3, [pc, #96]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e48:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e50:	4914      	ldr	r1, [pc, #80]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00b      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e74:	490b      	ldr	r1, [pc, #44]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00f      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e88:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e98:	4902      	ldr	r1, [pc, #8]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ea0:	e002      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00b      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec4:	4986      	ldr	r1, [pc, #536]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ed8:	4b81      	ldr	r3, [pc, #516]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ede:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ee8:	497d      	ldr	r1, [pc, #500]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d006      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80d6 	beq.w	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f04:	4b76      	ldr	r3, [pc, #472]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a75      	ldr	r2, [pc, #468]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f10:	f7fd f9fc 	bl	800130c <HAL_GetTick>
 8003f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f18:	f7fd f9f8 	bl	800130c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	@ 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e195      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d021      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d11d      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f4a:	4b65      	ldr	r3, [pc, #404]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f58:	4b61      	ldr	r3, [pc, #388]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f5e:	0e1b      	lsrs	r3, r3, #24
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	019a      	lsls	r2, r3, #6
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	071b      	lsls	r3, r3, #28
 8003f7e:	4958      	ldr	r1, [pc, #352]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d02e      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fb0:	d129      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fc0:	4b47      	ldr	r3, [pc, #284]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc6:	0f1b      	lsrs	r3, r3, #28
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	019a      	lsls	r2, r3, #6
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	071b      	lsls	r3, r3, #28
 8003fe6:	493e      	ldr	r1, [pc, #248]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fee:	4b3c      	ldr	r3, [pc, #240]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ff4:	f023 021f 	bic.w	r2, r3, #31
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	4938      	ldr	r1, [pc, #224]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01d      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004012:	4b33      	ldr	r3, [pc, #204]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004018:	0e1b      	lsrs	r3, r3, #24
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004020:	4b2f      	ldr	r3, [pc, #188]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004026:	0f1b      	lsrs	r3, r3, #28
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	019a      	lsls	r2, r3, #6
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	431a      	orrs	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	071b      	lsls	r3, r3, #28
 8004046:	4926      	ldr	r1, [pc, #152]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d011      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	019a      	lsls	r2, r3, #6
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	071b      	lsls	r3, r3, #28
 8004076:	491a      	ldr	r1, [pc, #104]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800407e:	4b18      	ldr	r3, [pc, #96]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a17      	ldr	r2, [pc, #92]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004084:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408a:	f7fd f93f 	bl	800130c <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004092:	f7fd f93b 	bl	800130c <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b64      	cmp	r3, #100	@ 0x64
 800409e:	d901      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0d8      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040a4:	4b0e      	ldr	r3, [pc, #56]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	f040 80ce 	bne.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a08      	ldr	r2, [pc, #32]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c4:	f7fd f922 	bl	800130c <HAL_GetTick>
 80040c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040ca:	e00b      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040cc:	f7fd f91e 	bl	800130c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	@ 0x64
 80040d8:	d904      	bls.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0bb      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f0:	d0ec      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800410e:	2b00      	cmp	r3, #0
 8004110:	d02e      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d12a      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800411a:	4b51      	ldr	r3, [pc, #324]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004128:	4b4d      	ldr	r3, [pc, #308]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	0f1b      	lsrs	r3, r3, #28
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	019a      	lsls	r2, r3, #6
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	071b      	lsls	r3, r3, #28
 800414e:	4944      	ldr	r1, [pc, #272]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004156:	4b42      	ldr	r3, [pc, #264]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800415c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	3b01      	subs	r3, #1
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	493d      	ldr	r1, [pc, #244]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d022      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004184:	d11d      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004186:	4b36      	ldr	r3, [pc, #216]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418c:	0e1b      	lsrs	r3, r3, #24
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004194:	4b32      	ldr	r3, [pc, #200]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	0f1b      	lsrs	r3, r3, #28
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	019a      	lsls	r2, r3, #6
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	431a      	orrs	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	061b      	lsls	r3, r3, #24
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	071b      	lsls	r3, r3, #28
 80041ba:	4929      	ldr	r1, [pc, #164]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d028      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041ce:	4b24      	ldr	r3, [pc, #144]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d4:	0e1b      	lsrs	r3, r3, #24
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041dc:	4b20      	ldr	r3, [pc, #128]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	019a      	lsls	r2, r3, #6
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	431a      	orrs	r2, r3
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	061b      	lsls	r3, r3, #24
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	071b      	lsls	r3, r3, #28
 8004202:	4917      	ldr	r1, [pc, #92]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800420a:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004210:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	4911      	ldr	r1, [pc, #68]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004220:	4b0f      	ldr	r3, [pc, #60]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0e      	ldr	r2, [pc, #56]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800422a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800422c:	f7fd f86e 	bl	800130c <HAL_GetTick>
 8004230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004234:	f7fd f86a 	bl	800130c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	@ 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e007      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004246:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800424e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004252:	d1ef      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800

08004264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e049      	b.n	800430a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fc fbb0 	bl	80009f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f000 fac0 	bl	8004828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d001      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e054      	b.n	80043d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a26      	ldr	r2, [pc, #152]	@ (80043e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d022      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004356:	d01d      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a22      	ldr	r2, [pc, #136]	@ (80043e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a21      	ldr	r2, [pc, #132]	@ (80043ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1f      	ldr	r2, [pc, #124]	@ (80043f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1e      	ldr	r2, [pc, #120]	@ (80043f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1c      	ldr	r2, [pc, #112]	@ (80043f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x80>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1b      	ldr	r2, [pc, #108]	@ (80043fc <HAL_TIM_Base_Start_IT+0xe8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d115      	bne.n	80043c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	4b19      	ldr	r3, [pc, #100]	@ (8004400 <HAL_TIM_Base_Start_IT+0xec>)
 800439c:	4013      	ands	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b06      	cmp	r3, #6
 80043a4:	d015      	beq.n	80043d2 <HAL_TIM_Base_Start_IT+0xbe>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ac:	d011      	beq.n	80043d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043be:	e008      	b.n	80043d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	e000      	b.n	80043d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40010400 	.word	0x40010400
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40001800 	.word	0x40001800
 8004400:	00010007 	.word	0x00010007

08004404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	d122      	bne.n	8004460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b02      	cmp	r3, #2
 8004426:	d11b      	bne.n	8004460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0202 	mvn.w	r2, #2
 8004430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f9d0 	bl	80047ec <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f9c2 	bl	80047d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f9d3 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b04      	cmp	r3, #4
 800446c:	d122      	bne.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b04      	cmp	r3, #4
 800447a:	d11b      	bne.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0204 	mvn.w	r2, #4
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f9a6 	bl	80047ec <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f998 	bl	80047d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f9a9 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d122      	bne.n	8004508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d11b      	bne.n	8004508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0208 	mvn.w	r2, #8
 80044d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2204      	movs	r2, #4
 80044de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f97c 	bl	80047ec <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f96e 	bl	80047d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f97f 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b10      	cmp	r3, #16
 8004514:	d122      	bne.n	800455c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b10      	cmp	r3, #16
 8004522:	d11b      	bne.n	800455c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0210 	mvn.w	r2, #16
 800452c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2208      	movs	r2, #8
 8004532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f952 	bl	80047ec <HAL_TIM_IC_CaptureCallback>
 8004548:	e005      	b.n	8004556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f944 	bl	80047d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f955 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d10e      	bne.n	8004588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d107      	bne.n	8004588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0201 	mvn.w	r2, #1
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc f824 	bl	80005d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004592:	2b80      	cmp	r3, #128	@ 0x80
 8004594:	d10e      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a0:	2b80      	cmp	r3, #128	@ 0x80
 80045a2:	d107      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fb0c 	bl	8004bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045c2:	d10e      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ce:	2b80      	cmp	r3, #128	@ 0x80
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 faff 	bl	8004be0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ec:	2b40      	cmp	r3, #64	@ 0x40
 80045ee:	d10e      	bne.n	800460e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fa:	2b40      	cmp	r3, #64	@ 0x40
 80045fc:	d107      	bne.n	800460e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f903 	bl	8004814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b20      	cmp	r3, #32
 800461a:	d10e      	bne.n	800463a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b20      	cmp	r3, #32
 8004628:	d107      	bne.n	800463a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f06f 0220 	mvn.w	r2, #32
 8004632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fabf 	bl	8004bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_TIM_ConfigClockSource+0x1c>
 800465c:	2302      	movs	r3, #2
 800465e:	e0b4      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x186>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	4b56      	ldr	r3, [pc, #344]	@ (80047d4 <HAL_TIM_ConfigClockSource+0x190>)
 800467c:	4013      	ands	r3, r2
 800467e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004698:	d03e      	beq.n	8004718 <HAL_TIM_ConfigClockSource+0xd4>
 800469a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800469e:	f200 8087 	bhi.w	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046a6:	f000 8086 	beq.w	80047b6 <HAL_TIM_ConfigClockSource+0x172>
 80046aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ae:	d87f      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b70      	cmp	r3, #112	@ 0x70
 80046b2:	d01a      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0xa6>
 80046b4:	2b70      	cmp	r3, #112	@ 0x70
 80046b6:	d87b      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b60      	cmp	r3, #96	@ 0x60
 80046ba:	d050      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x11a>
 80046bc:	2b60      	cmp	r3, #96	@ 0x60
 80046be:	d877      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b50      	cmp	r3, #80	@ 0x50
 80046c2:	d03c      	beq.n	800473e <HAL_TIM_ConfigClockSource+0xfa>
 80046c4:	2b50      	cmp	r3, #80	@ 0x50
 80046c6:	d873      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b40      	cmp	r3, #64	@ 0x40
 80046ca:	d058      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x13a>
 80046cc:	2b40      	cmp	r3, #64	@ 0x40
 80046ce:	d86f      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d0:	2b30      	cmp	r3, #48	@ 0x30
 80046d2:	d064      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046d4:	2b30      	cmp	r3, #48	@ 0x30
 80046d6:	d86b      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d060      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d867      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05c      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d05a      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046e8:	e062      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046fa:	f000 f9af 	bl	8004a5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800470c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	609a      	str	r2, [r3, #8]
      break;
 8004716:	e04f      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004728:	f000 f998 	bl	8004a5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800473a:	609a      	str	r2, [r3, #8]
      break;
 800473c:	e03c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800474a:	461a      	mov	r2, r3
 800474c:	f000 f90c 	bl	8004968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2150      	movs	r1, #80	@ 0x50
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f965 	bl	8004a26 <TIM_ITRx_SetConfig>
      break;
 800475c:	e02c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800476a:	461a      	mov	r2, r3
 800476c:	f000 f92b 	bl	80049c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2160      	movs	r1, #96	@ 0x60
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f955 	bl	8004a26 <TIM_ITRx_SetConfig>
      break;
 800477c:	e01c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800478a:	461a      	mov	r2, r3
 800478c:	f000 f8ec 	bl	8004968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2140      	movs	r1, #64	@ 0x40
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f945 	bl	8004a26 <TIM_ITRx_SetConfig>
      break;
 800479c:	e00c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f000 f93c 	bl	8004a26 <TIM_ITRx_SetConfig>
      break;
 80047ae:	e003      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
      break;
 80047b4:	e000      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	fffeff88 	.word	0xfffeff88

080047d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a40      	ldr	r2, [pc, #256]	@ (800493c <TIM_Base_SetConfig+0x114>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004846:	d00f      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a3d      	ldr	r2, [pc, #244]	@ (8004940 <TIM_Base_SetConfig+0x118>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00b      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a3c      	ldr	r2, [pc, #240]	@ (8004944 <TIM_Base_SetConfig+0x11c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d007      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3b      	ldr	r2, [pc, #236]	@ (8004948 <TIM_Base_SetConfig+0x120>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3a      	ldr	r2, [pc, #232]	@ (800494c <TIM_Base_SetConfig+0x124>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d108      	bne.n	800487a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2f      	ldr	r2, [pc, #188]	@ (800493c <TIM_Base_SetConfig+0x114>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d02b      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004888:	d027      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2c      	ldr	r2, [pc, #176]	@ (8004940 <TIM_Base_SetConfig+0x118>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d023      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2b      	ldr	r2, [pc, #172]	@ (8004944 <TIM_Base_SetConfig+0x11c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01f      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2a      	ldr	r2, [pc, #168]	@ (8004948 <TIM_Base_SetConfig+0x120>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d01b      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a29      	ldr	r2, [pc, #164]	@ (800494c <TIM_Base_SetConfig+0x124>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d017      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a28      	ldr	r2, [pc, #160]	@ (8004950 <TIM_Base_SetConfig+0x128>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a27      	ldr	r2, [pc, #156]	@ (8004954 <TIM_Base_SetConfig+0x12c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00f      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a26      	ldr	r2, [pc, #152]	@ (8004958 <TIM_Base_SetConfig+0x130>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00b      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a25      	ldr	r2, [pc, #148]	@ (800495c <TIM_Base_SetConfig+0x134>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d007      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a24      	ldr	r2, [pc, #144]	@ (8004960 <TIM_Base_SetConfig+0x138>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a23      	ldr	r2, [pc, #140]	@ (8004964 <TIM_Base_SetConfig+0x13c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d108      	bne.n	80048ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a0a      	ldr	r2, [pc, #40]	@ (800493c <TIM_Base_SetConfig+0x114>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_Base_SetConfig+0xf8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a0c      	ldr	r2, [pc, #48]	@ (800494c <TIM_Base_SetConfig+0x124>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d103      	bne.n	8004928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	615a      	str	r2, [r3, #20]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40010000 	.word	0x40010000
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40010400 	.word	0x40010400
 8004950:	40014000 	.word	0x40014000
 8004954:	40014400 	.word	0x40014400
 8004958:	40014800 	.word	0x40014800
 800495c:	40001800 	.word	0x40001800
 8004960:	40001c00 	.word	0x40001c00
 8004964:	40002000 	.word	0x40002000

08004968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f023 0201 	bic.w	r2, r3, #1
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f023 030a 	bic.w	r3, r3, #10
 80049a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b087      	sub	sp, #28
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f023 0210 	bic.w	r2, r3, #16
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	031b      	lsls	r3, r3, #12
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	621a      	str	r2, [r3, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f043 0307 	orr.w	r3, r3, #7
 8004a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	609a      	str	r2, [r3, #8]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	021a      	lsls	r2, r3, #8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	609a      	str	r2, [r3, #8]
}
 8004a90:	bf00      	nop
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e06d      	b.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a30      	ldr	r2, [pc, #192]	@ (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d108      	bne.n	8004afa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004aee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a20      	ldr	r2, [pc, #128]	@ (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d022      	beq.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b26:	d01d      	beq.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d018      	beq.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d013      	beq.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1a      	ldr	r2, [pc, #104]	@ (8004bac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00e      	beq.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a15      	ldr	r2, [pc, #84]	@ (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d009      	beq.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a16      	ldr	r2, [pc, #88]	@ (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a15      	ldr	r2, [pc, #84]	@ (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d10c      	bne.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	40010400 	.word	0x40010400
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800
 8004bac:	40000c00 	.word	0x40000c00
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	40001800 	.word	0x40001800

08004bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e040      	b.n	8004c88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fb ff0e 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2224      	movs	r2, #36	@ 0x24
 8004c20:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f82c 	bl	8004c90 <UART_SetConfig>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e022      	b.n	8004c88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa84 	bl	8005158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fb0b 	bl	800529c <UART_CheckIdleState>
 8004c86:	4603      	mov	r3, r0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4ba6      	ldr	r3, [pc, #664]	@ (8004f54 <UART_SetConfig+0x2c4>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	6979      	ldr	r1, [r7, #20]
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a94      	ldr	r2, [pc, #592]	@ (8004f58 <UART_SetConfig+0x2c8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d120      	bne.n	8004d4e <UART_SetConfig+0xbe>
 8004d0c:	4b93      	ldr	r3, [pc, #588]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d816      	bhi.n	8004d48 <UART_SetConfig+0xb8>
 8004d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d20 <UART_SetConfig+0x90>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d31 	.word	0x08004d31
 8004d24:	08004d3d 	.word	0x08004d3d
 8004d28:	08004d37 	.word	0x08004d37
 8004d2c:	08004d43 	.word	0x08004d43
 8004d30:	2301      	movs	r3, #1
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e150      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004d36:	2302      	movs	r3, #2
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	e14d      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e14a      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004d42:	2308      	movs	r3, #8
 8004d44:	77fb      	strb	r3, [r7, #31]
 8004d46:	e147      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	e144      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a83      	ldr	r2, [pc, #524]	@ (8004f60 <UART_SetConfig+0x2d0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d132      	bne.n	8004dbe <UART_SetConfig+0x12e>
 8004d58:	4b80      	ldr	r3, [pc, #512]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d828      	bhi.n	8004db8 <UART_SetConfig+0x128>
 8004d66:	a201      	add	r2, pc, #4	@ (adr r2, 8004d6c <UART_SetConfig+0xdc>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004db9 	.word	0x08004db9
 8004d74:	08004db9 	.word	0x08004db9
 8004d78:	08004db9 	.word	0x08004db9
 8004d7c:	08004dad 	.word	0x08004dad
 8004d80:	08004db9 	.word	0x08004db9
 8004d84:	08004db9 	.word	0x08004db9
 8004d88:	08004db9 	.word	0x08004db9
 8004d8c:	08004da7 	.word	0x08004da7
 8004d90:	08004db9 	.word	0x08004db9
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004db9 	.word	0x08004db9
 8004d9c:	08004db3 	.word	0x08004db3
 8004da0:	2300      	movs	r3, #0
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e118      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004da6:	2302      	movs	r3, #2
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e115      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004dac:	2304      	movs	r3, #4
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e112      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004db2:	2308      	movs	r3, #8
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e10f      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004db8:	2310      	movs	r3, #16
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e10c      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a68      	ldr	r2, [pc, #416]	@ (8004f64 <UART_SetConfig+0x2d4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d120      	bne.n	8004e0a <UART_SetConfig+0x17a>
 8004dc8:	4b64      	ldr	r3, [pc, #400]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004dd2:	2b30      	cmp	r3, #48	@ 0x30
 8004dd4:	d013      	beq.n	8004dfe <UART_SetConfig+0x16e>
 8004dd6:	2b30      	cmp	r3, #48	@ 0x30
 8004dd8:	d814      	bhi.n	8004e04 <UART_SetConfig+0x174>
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d009      	beq.n	8004df2 <UART_SetConfig+0x162>
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d810      	bhi.n	8004e04 <UART_SetConfig+0x174>
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <UART_SetConfig+0x15c>
 8004de6:	2b10      	cmp	r3, #16
 8004de8:	d006      	beq.n	8004df8 <UART_SetConfig+0x168>
 8004dea:	e00b      	b.n	8004e04 <UART_SetConfig+0x174>
 8004dec:	2300      	movs	r3, #0
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e0f2      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004df2:	2302      	movs	r3, #2
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e0ef      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004df8:	2304      	movs	r3, #4
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	e0ec      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004dfe:	2308      	movs	r3, #8
 8004e00:	77fb      	strb	r3, [r7, #31]
 8004e02:	e0e9      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004e04:	2310      	movs	r3, #16
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e0e6      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a56      	ldr	r2, [pc, #344]	@ (8004f68 <UART_SetConfig+0x2d8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d120      	bne.n	8004e56 <UART_SetConfig+0x1c6>
 8004e14:	4b51      	ldr	r3, [pc, #324]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e20:	d013      	beq.n	8004e4a <UART_SetConfig+0x1ba>
 8004e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e24:	d814      	bhi.n	8004e50 <UART_SetConfig+0x1c0>
 8004e26:	2b80      	cmp	r3, #128	@ 0x80
 8004e28:	d009      	beq.n	8004e3e <UART_SetConfig+0x1ae>
 8004e2a:	2b80      	cmp	r3, #128	@ 0x80
 8004e2c:	d810      	bhi.n	8004e50 <UART_SetConfig+0x1c0>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <UART_SetConfig+0x1a8>
 8004e32:	2b40      	cmp	r3, #64	@ 0x40
 8004e34:	d006      	beq.n	8004e44 <UART_SetConfig+0x1b4>
 8004e36:	e00b      	b.n	8004e50 <UART_SetConfig+0x1c0>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e0cc      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	77fb      	strb	r3, [r7, #31]
 8004e42:	e0c9      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004e44:	2304      	movs	r3, #4
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e0c6      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	e0c3      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004e50:	2310      	movs	r3, #16
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e0c0      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a44      	ldr	r2, [pc, #272]	@ (8004f6c <UART_SetConfig+0x2dc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d125      	bne.n	8004eac <UART_SetConfig+0x21c>
 8004e60:	4b3e      	ldr	r3, [pc, #248]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e6e:	d017      	beq.n	8004ea0 <UART_SetConfig+0x210>
 8004e70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e74:	d817      	bhi.n	8004ea6 <UART_SetConfig+0x216>
 8004e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7a:	d00b      	beq.n	8004e94 <UART_SetConfig+0x204>
 8004e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e80:	d811      	bhi.n	8004ea6 <UART_SetConfig+0x216>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <UART_SetConfig+0x1fe>
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e8a:	d006      	beq.n	8004e9a <UART_SetConfig+0x20a>
 8004e8c:	e00b      	b.n	8004ea6 <UART_SetConfig+0x216>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e0a1      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004e94:	2302      	movs	r3, #2
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e09e      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e09b      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e098      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004ea6:	2310      	movs	r3, #16
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e095      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a2f      	ldr	r2, [pc, #188]	@ (8004f70 <UART_SetConfig+0x2e0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d125      	bne.n	8004f02 <UART_SetConfig+0x272>
 8004eb6:	4b29      	ldr	r3, [pc, #164]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ec0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ec4:	d017      	beq.n	8004ef6 <UART_SetConfig+0x266>
 8004ec6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004eca:	d817      	bhi.n	8004efc <UART_SetConfig+0x26c>
 8004ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ed0:	d00b      	beq.n	8004eea <UART_SetConfig+0x25a>
 8004ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ed6:	d811      	bhi.n	8004efc <UART_SetConfig+0x26c>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <UART_SetConfig+0x254>
 8004edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee0:	d006      	beq.n	8004ef0 <UART_SetConfig+0x260>
 8004ee2:	e00b      	b.n	8004efc <UART_SetConfig+0x26c>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e076      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004eea:	2302      	movs	r3, #2
 8004eec:	77fb      	strb	r3, [r7, #31]
 8004eee:	e073      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e070      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e06d      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004efc:	2310      	movs	r3, #16
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e06a      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <UART_SetConfig+0x2e4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d138      	bne.n	8004f7e <UART_SetConfig+0x2ee>
 8004f0c:	4b13      	ldr	r3, [pc, #76]	@ (8004f5c <UART_SetConfig+0x2cc>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f1a:	d017      	beq.n	8004f4c <UART_SetConfig+0x2bc>
 8004f1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f20:	d82a      	bhi.n	8004f78 <UART_SetConfig+0x2e8>
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f26:	d00b      	beq.n	8004f40 <UART_SetConfig+0x2b0>
 8004f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f2c:	d824      	bhi.n	8004f78 <UART_SetConfig+0x2e8>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <UART_SetConfig+0x2aa>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f36:	d006      	beq.n	8004f46 <UART_SetConfig+0x2b6>
 8004f38:	e01e      	b.n	8004f78 <UART_SetConfig+0x2e8>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e04b      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004f40:	2302      	movs	r3, #2
 8004f42:	77fb      	strb	r3, [r7, #31]
 8004f44:	e048      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004f46:	2304      	movs	r3, #4
 8004f48:	77fb      	strb	r3, [r7, #31]
 8004f4a:	e045      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e042      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004f52:	bf00      	nop
 8004f54:	efff69f3 	.word	0xefff69f3
 8004f58:	40011000 	.word	0x40011000
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	40004400 	.word	0x40004400
 8004f64:	40004800 	.word	0x40004800
 8004f68:	40004c00 	.word	0x40004c00
 8004f6c:	40005000 	.word	0x40005000
 8004f70:	40011400 	.word	0x40011400
 8004f74:	40007800 	.word	0x40007800
 8004f78:	2310      	movs	r3, #16
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e02c      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a72      	ldr	r2, [pc, #456]	@ (800514c <UART_SetConfig+0x4bc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d125      	bne.n	8004fd4 <UART_SetConfig+0x344>
 8004f88:	4b71      	ldr	r3, [pc, #452]	@ (8005150 <UART_SetConfig+0x4c0>)
 8004f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f8e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004f92:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004f96:	d017      	beq.n	8004fc8 <UART_SetConfig+0x338>
 8004f98:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004f9c:	d817      	bhi.n	8004fce <UART_SetConfig+0x33e>
 8004f9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fa2:	d00b      	beq.n	8004fbc <UART_SetConfig+0x32c>
 8004fa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fa8:	d811      	bhi.n	8004fce <UART_SetConfig+0x33e>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <UART_SetConfig+0x326>
 8004fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fb2:	d006      	beq.n	8004fc2 <UART_SetConfig+0x332>
 8004fb4:	e00b      	b.n	8004fce <UART_SetConfig+0x33e>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e00d      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e00a      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e007      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004fc8:	2308      	movs	r3, #8
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e004      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004fce:	2310      	movs	r3, #16
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e001      	b.n	8004fd8 <UART_SetConfig+0x348>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe0:	d15b      	bne.n	800509a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004fe2:	7ffb      	ldrb	r3, [r7, #31]
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d828      	bhi.n	800503a <UART_SetConfig+0x3aa>
 8004fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff0 <UART_SetConfig+0x360>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005025 	.word	0x08005025
 8004ffc:	0800503b 	.word	0x0800503b
 8005000:	0800502b 	.word	0x0800502b
 8005004:	0800503b 	.word	0x0800503b
 8005008:	0800503b 	.word	0x0800503b
 800500c:	0800503b 	.word	0x0800503b
 8005010:	08005033 	.word	0x08005033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005014:	f7fe fcd6 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8005018:	61b8      	str	r0, [r7, #24]
        break;
 800501a:	e013      	b.n	8005044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800501c:	f7fe fce6 	bl	80039ec <HAL_RCC_GetPCLK2Freq>
 8005020:	61b8      	str	r0, [r7, #24]
        break;
 8005022:	e00f      	b.n	8005044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005024:	4b4b      	ldr	r3, [pc, #300]	@ (8005154 <UART_SetConfig+0x4c4>)
 8005026:	61bb      	str	r3, [r7, #24]
        break;
 8005028:	e00c      	b.n	8005044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502a:	f7fe fbb9 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 800502e:	61b8      	str	r0, [r7, #24]
        break;
 8005030:	e008      	b.n	8005044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005036:	61bb      	str	r3, [r7, #24]
        break;
 8005038:	e004      	b.n	8005044 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	77bb      	strb	r3, [r7, #30]
        break;
 8005042:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d074      	beq.n	8005134 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	005a      	lsls	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	441a      	add	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	d916      	bls.n	8005094 <UART_SetConfig+0x404>
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506c:	d212      	bcs.n	8005094 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f023 030f 	bic.w	r3, r3, #15
 8005076:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	b29b      	uxth	r3, r3
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	b29a      	uxth	r2, r3
 8005084:	89fb      	ldrh	r3, [r7, #14]
 8005086:	4313      	orrs	r3, r2
 8005088:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	89fa      	ldrh	r2, [r7, #14]
 8005090:	60da      	str	r2, [r3, #12]
 8005092:	e04f      	b.n	8005134 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	77bb      	strb	r3, [r7, #30]
 8005098:	e04c      	b.n	8005134 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800509a:	7ffb      	ldrb	r3, [r7, #31]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d828      	bhi.n	80050f2 <UART_SetConfig+0x462>
 80050a0:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <UART_SetConfig+0x418>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	080050d5 	.word	0x080050d5
 80050b0:	080050dd 	.word	0x080050dd
 80050b4:	080050f3 	.word	0x080050f3
 80050b8:	080050e3 	.word	0x080050e3
 80050bc:	080050f3 	.word	0x080050f3
 80050c0:	080050f3 	.word	0x080050f3
 80050c4:	080050f3 	.word	0x080050f3
 80050c8:	080050eb 	.word	0x080050eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050cc:	f7fe fc7a 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 80050d0:	61b8      	str	r0, [r7, #24]
        break;
 80050d2:	e013      	b.n	80050fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d4:	f7fe fc8a 	bl	80039ec <HAL_RCC_GetPCLK2Freq>
 80050d8:	61b8      	str	r0, [r7, #24]
        break;
 80050da:	e00f      	b.n	80050fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005154 <UART_SetConfig+0x4c4>)
 80050de:	61bb      	str	r3, [r7, #24]
        break;
 80050e0:	e00c      	b.n	80050fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050e2:	f7fe fb5d 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 80050e6:	61b8      	str	r0, [r7, #24]
        break;
 80050e8:	e008      	b.n	80050fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ee:	61bb      	str	r3, [r7, #24]
        break;
 80050f0:	e004      	b.n	80050fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	77bb      	strb	r3, [r7, #30]
        break;
 80050fa:	bf00      	nop
    }

    if (pclk != 0U)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d018      	beq.n	8005134 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	085a      	lsrs	r2, r3, #1
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	441a      	add	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b0f      	cmp	r3, #15
 800511a:	d909      	bls.n	8005130 <UART_SetConfig+0x4a0>
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005122:	d205      	bcs.n	8005130 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	b29a      	uxth	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60da      	str	r2, [r3, #12]
 800512e:	e001      	b.n	8005134 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005140:	7fbb      	ldrb	r3, [r7, #30]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40007c00 	.word	0x40007c00
 8005150:	40023800 	.word	0x40023800
 8005154:	00f42400 	.word	0x00f42400

08005158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01a      	beq.n	800526e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005256:	d10a      	bne.n	800526e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052ac:	f7fc f82e 	bl	800130c <HAL_GetTick>
 80052b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d10e      	bne.n	80052de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f831 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e027      	b.n	800532e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d10e      	bne.n	800530a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f81b 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e011      	b.n	800532e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b09c      	sub	sp, #112	@ 0x70
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	603b      	str	r3, [r7, #0]
 8005342:	4613      	mov	r3, r2
 8005344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005346:	e0a7      	b.n	8005498 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	f000 80a3 	beq.w	8005498 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005352:	f7fb ffdb 	bl	800130c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800535e:	429a      	cmp	r2, r3
 8005360:	d302      	bcc.n	8005368 <UART_WaitOnFlagUntilTimeout+0x32>
 8005362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005364:	2b00      	cmp	r3, #0
 8005366:	d13f      	bne.n	80053e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005378:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800537c:	667b      	str	r3, [r7, #100]	@ 0x64
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005386:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005388:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800538c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e6      	bne.n	8005368 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3308      	adds	r3, #8
 80053b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053ba:	64ba      	str	r2, [r7, #72]	@ 0x48
 80053bc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80053c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e5      	bne.n	800539a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e068      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d050      	beq.n	8005498 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005404:	d148      	bne.n	8005498 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800540e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005424:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005430:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005434:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800543c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e6      	bne.n	8005410 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	613b      	str	r3, [r7, #16]
   return(result);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	66bb      	str	r3, [r7, #104]	@ 0x68
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3308      	adds	r3, #8
 8005460:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005462:	623a      	str	r2, [r7, #32]
 8005464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	69f9      	ldr	r1, [r7, #28]
 8005468:	6a3a      	ldr	r2, [r7, #32]
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e5      	bne.n	8005442 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e010      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4013      	ands	r3, r2
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	bf0c      	ite	eq
 80054a8:	2301      	moveq	r3, #1
 80054aa:	2300      	movne	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	f43f af48 	beq.w	8005348 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3770      	adds	r7, #112	@ 0x70
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054c4:	b084      	sub	sp, #16
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	f107 001c 	add.w	r0, r7, #28
 80054d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d120      	bne.n	800551e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	4b20      	ldr	r3, [pc, #128]	@ (8005570 <USB_CoreInit+0xac>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d105      	bne.n	8005512 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa96 	bl	8005a44 <USB_CoreReset>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]
 800551c:	e010      	b.n	8005540 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fa8a 	bl	8005a44 <USB_CoreReset>
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005538:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005542:	2b01      	cmp	r3, #1
 8005544:	d10b      	bne.n	800555e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f043 0206 	orr.w	r2, r3, #6
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800555e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800556a:	b004      	add	sp, #16
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	ffbdffbf 	.word	0xffbdffbf

08005574 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f023 0201 	bic.w	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d115      	bne.n	80055e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055c4:	2001      	movs	r0, #1
 80055c6:	f7fb fead 	bl	8001324 <HAL_Delay>
      ms++;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3301      	adds	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fa29 	bl	8005a28 <USB_GetMode>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d01e      	beq.n	800561a <USB_SetCurrentMode+0x84>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b31      	cmp	r3, #49	@ 0x31
 80055e0:	d9f0      	bls.n	80055c4 <USB_SetCurrentMode+0x2e>
 80055e2:	e01a      	b.n	800561a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d115      	bne.n	8005616 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055f6:	2001      	movs	r0, #1
 80055f8:	f7fb fe94 	bl	8001324 <HAL_Delay>
      ms++;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3301      	adds	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa10 	bl	8005a28 <USB_GetMode>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <USB_SetCurrentMode+0x84>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b31      	cmp	r3, #49	@ 0x31
 8005612:	d9f0      	bls.n	80055f6 <USB_SetCurrentMode+0x60>
 8005614:	e001      	b.n	800561a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e005      	b.n	8005626 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b32      	cmp	r3, #50	@ 0x32
 800561e:	d101      	bne.n	8005624 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005630:	b084      	sub	sp, #16
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800563e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800564a:	2300      	movs	r3, #0
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	e009      	b.n	8005664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	3340      	adds	r3, #64	@ 0x40
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	2200      	movs	r2, #0
 800565c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	3301      	adds	r3, #1
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b0e      	cmp	r3, #14
 8005668:	d9f2      	bls.n	8005650 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800566a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d11c      	bne.n	80056aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800567e:	f043 0302 	orr.w	r3, r3, #2
 8005682:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005688:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e005      	b.n	80056b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056bc:	461a      	mov	r2, r3
 80056be:	2300      	movs	r3, #0
 80056c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c8:	4619      	mov	r1, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d0:	461a      	mov	r2, r3
 80056d2:	680b      	ldr	r3, [r1, #0]
 80056d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d10c      	bne.n	80056f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d104      	bne.n	80056ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056e2:	2100      	movs	r1, #0
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f965 	bl	80059b4 <USB_SetDevSpeed>
 80056ea:	e008      	b.n	80056fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056ec:	2101      	movs	r1, #1
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f960 	bl	80059b4 <USB_SetDevSpeed>
 80056f4:	e003      	b.n	80056fe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056f6:	2103      	movs	r1, #3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f95b 	bl	80059b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056fe:	2110      	movs	r1, #16
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f8f3 	bl	80058ec <USB_FlushTxFifo>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f91f 	bl	8005954 <USB_FlushRxFifo>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005726:	461a      	mov	r2, r3
 8005728:	2300      	movs	r3, #0
 800572a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005732:	461a      	mov	r2, r3
 8005734:	2300      	movs	r3, #0
 8005736:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800573e:	461a      	mov	r2, r3
 8005740:	2300      	movs	r3, #0
 8005742:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005744:	2300      	movs	r3, #0
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	e043      	b.n	80057d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800575c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005760:	d118      	bne.n	8005794 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005774:	461a      	mov	r2, r3
 8005776:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	e013      	b.n	80057a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800578a:	461a      	mov	r2, r3
 800578c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	e008      	b.n	80057a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a0:	461a      	mov	r2, r3
 80057a2:	2300      	movs	r3, #0
 80057a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b2:	461a      	mov	r2, r3
 80057b4:	2300      	movs	r3, #0
 80057b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c4:	461a      	mov	r2, r3
 80057c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	3301      	adds	r3, #1
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d3b7      	bcc.n	800574a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057da:	2300      	movs	r3, #0
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	e043      	b.n	8005868 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057f6:	d118      	bne.n	800582a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800580a:	461a      	mov	r2, r3
 800580c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e013      	b.n	800583c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005820:	461a      	mov	r2, r3
 8005822:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	e008      	b.n	800583c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005836:	461a      	mov	r2, r3
 8005838:	2300      	movs	r3, #0
 800583a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005848:	461a      	mov	r2, r3
 800584a:	2300      	movs	r3, #0
 800584c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585a:	461a      	mov	r2, r3
 800585c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005860:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	3301      	adds	r3, #1
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	429a      	cmp	r2, r3
 800586e:	d3b7      	bcc.n	80057e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800587e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005882:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005890:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	2b00      	cmp	r3, #0
 8005896:	d105      	bne.n	80058a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f043 0210 	orr.w	r2, r3, #16
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699a      	ldr	r2, [r3, #24]
 80058a8:	4b0e      	ldr	r3, [pc, #56]	@ (80058e4 <USB_DevInit+0x2b4>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f043 0208 	orr.w	r2, r3, #8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d105      	bne.n	80058d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	4b06      	ldr	r3, [pc, #24]	@ (80058e8 <USB_DevInit+0x2b8>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058e0:	b004      	add	sp, #16
 80058e2:	4770      	bx	lr
 80058e4:	803c3800 	.word	0x803c3800
 80058e8:	40000004 	.word	0x40000004

080058ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3301      	adds	r3, #1
 80058fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4a13      	ldr	r2, [pc, #76]	@ (8005950 <USB_FlushTxFifo+0x64>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d901      	bls.n	800590c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e01b      	b.n	8005944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	daf2      	bge.n	80058fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	019b      	lsls	r3, r3, #6
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4a08      	ldr	r2, [pc, #32]	@ (8005950 <USB_FlushTxFifo+0x64>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e006      	b.n	8005944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b20      	cmp	r3, #32
 8005940:	d0f0      	beq.n	8005924 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	00030d40 	.word	0x00030d40

08005954 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3301      	adds	r3, #1
 8005964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4a11      	ldr	r2, [pc, #68]	@ (80059b0 <USB_FlushRxFifo+0x5c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e018      	b.n	80059a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	daf2      	bge.n	8005960 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2210      	movs	r2, #16
 8005982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3301      	adds	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4a08      	ldr	r2, [pc, #32]	@ (80059b0 <USB_FlushRxFifo+0x5c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e006      	b.n	80059a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b10      	cmp	r3, #16
 80059a0:	d0f0      	beq.n	8005984 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	00030d40 	.word	0x00030d40

080059b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	68f9      	ldr	r1, [r7, #12]
 80059d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059d4:	4313      	orrs	r3, r2
 80059d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a00:	f023 0303 	bic.w	r3, r3, #3
 8005a04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f003 0301 	and.w	r3, r3, #1
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	3301      	adds	r3, #1
 8005a54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4a13      	ldr	r2, [pc, #76]	@ (8005aa8 <USB_CoreReset+0x64>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d901      	bls.n	8005a62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e01b      	b.n	8005a9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	daf2      	bge.n	8005a50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f043 0201 	orr.w	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4a09      	ldr	r2, [pc, #36]	@ (8005aa8 <USB_CoreReset+0x64>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e006      	b.n	8005a9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d0f0      	beq.n	8005a7a <USB_CoreReset+0x36>

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	00030d40 	.word	0x00030d40

08005aac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8005ab2:	4b8d      	ldr	r3, [pc, #564]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005ab4:	22a9      	movs	r2, #169	@ 0xa9
 8005ab6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8005ab8:	4b8b      	ldr	r3, [pc, #556]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005aba:	22fe      	movs	r2, #254	@ 0xfe
 8005abc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 248;
 8005abe:	4b8a      	ldr	r3, [pc, #552]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005ac0:	22f8      	movs	r2, #248	@ 0xf8
 8005ac2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8005ac4:	4b88      	ldr	r3, [pc, #544]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005aca:	4b88      	ldr	r3, [pc, #544]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005acc:	22ff      	movs	r2, #255	@ 0xff
 8005ace:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005ad0:	4b86      	ldr	r3, [pc, #536]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005ad2:	22ff      	movs	r2, #255	@ 0xff
 8005ad4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8005ad6:	4b85      	ldr	r3, [pc, #532]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005adc:	4b83      	ldr	r3, [pc, #524]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005ae2:	4b83      	ldr	r3, [pc, #524]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005ae8:	4b81      	ldr	r3, [pc, #516]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005aee:	4b80      	ldr	r3, [pc, #512]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005af4:	4b7e      	ldr	r3, [pc, #504]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005afa:	f000 fd2c 	bl	8006556 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005afe:	4b7a      	ldr	r3, [pc, #488]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	061a      	lsls	r2, r3, #24
 8005b04:	4b78      	ldr	r3, [pc, #480]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	041b      	lsls	r3, r3, #16
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	4b76      	ldr	r3, [pc, #472]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b0e:	789b      	ldrb	r3, [r3, #2]
 8005b10:	021b      	lsls	r3, r3, #8
 8005b12:	4313      	orrs	r3, r2
 8005b14:	4a74      	ldr	r2, [pc, #464]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b16:	78d2      	ldrb	r2, [r2, #3]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	061a      	lsls	r2, r3, #24
 8005b1c:	4b72      	ldr	r3, [pc, #456]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	0619      	lsls	r1, r3, #24
 8005b22:	4b71      	ldr	r3, [pc, #452]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	4319      	orrs	r1, r3
 8005b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b2c:	789b      	ldrb	r3, [r3, #2]
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	430b      	orrs	r3, r1
 8005b32:	496d      	ldr	r1, [pc, #436]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b34:	78c9      	ldrb	r1, [r1, #3]
 8005b36:	430b      	orrs	r3, r1
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	4b69      	ldr	r3, [pc, #420]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	0619      	lsls	r1, r3, #24
 8005b46:	4b68      	ldr	r3, [pc, #416]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	4319      	orrs	r1, r3
 8005b4e:	4b66      	ldr	r3, [pc, #408]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b50:	789b      	ldrb	r3, [r3, #2]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	430b      	orrs	r3, r1
 8005b56:	4964      	ldr	r1, [pc, #400]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b58:	78c9      	ldrb	r1, [r1, #3]
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	0a1b      	lsrs	r3, r3, #8
 8005b5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b62:	431a      	orrs	r2, r3
 8005b64:	4b60      	ldr	r3, [pc, #384]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	0619      	lsls	r1, r3, #24
 8005b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	4319      	orrs	r1, r3
 8005b72:	4b5d      	ldr	r3, [pc, #372]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b74:	789b      	ldrb	r3, [r3, #2]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	495b      	ldr	r1, [pc, #364]	@ (8005ce8 <MX_LWIP_Init+0x23c>)
 8005b7c:	78c9      	ldrb	r1, [r1, #3]
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	0e1b      	lsrs	r3, r3, #24
 8005b82:	4313      	orrs	r3, r2
 8005b84:	4a5b      	ldr	r2, [pc, #364]	@ (8005cf4 <MX_LWIP_Init+0x248>)
 8005b86:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005b88:	4b58      	ldr	r3, [pc, #352]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	061a      	lsls	r2, r3, #24
 8005b8e:	4b57      	ldr	r3, [pc, #348]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	431a      	orrs	r2, r3
 8005b96:	4b55      	ldr	r3, [pc, #340]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005b98:	789b      	ldrb	r3, [r3, #2]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	4a53      	ldr	r2, [pc, #332]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005ba0:	78d2      	ldrb	r2, [r2, #3]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	061a      	lsls	r2, r3, #24
 8005ba6:	4b51      	ldr	r3, [pc, #324]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	0619      	lsls	r1, r3, #24
 8005bac:	4b4f      	ldr	r3, [pc, #316]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	4319      	orrs	r1, r3
 8005bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005bb6:	789b      	ldrb	r3, [r3, #2]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	494b      	ldr	r1, [pc, #300]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005bbe:	78c9      	ldrb	r1, [r1, #3]
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	4b48      	ldr	r3, [pc, #288]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	0619      	lsls	r1, r3, #24
 8005bd0:	4b46      	ldr	r3, [pc, #280]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	4319      	orrs	r1, r3
 8005bd8:	4b44      	ldr	r3, [pc, #272]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005bda:	789b      	ldrb	r3, [r3, #2]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	430b      	orrs	r3, r1
 8005be0:	4942      	ldr	r1, [pc, #264]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005be2:	78c9      	ldrb	r1, [r1, #3]
 8005be4:	430b      	orrs	r3, r1
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005bec:	431a      	orrs	r2, r3
 8005bee:	4b3f      	ldr	r3, [pc, #252]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	0619      	lsls	r1, r3, #24
 8005bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	4319      	orrs	r1, r3
 8005bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005bfe:	789b      	ldrb	r3, [r3, #2]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	430b      	orrs	r3, r1
 8005c04:	4939      	ldr	r1, [pc, #228]	@ (8005cec <MX_LWIP_Init+0x240>)
 8005c06:	78c9      	ldrb	r1, [r1, #3]
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	0e1b      	lsrs	r3, r3, #24
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	4a3a      	ldr	r2, [pc, #232]	@ (8005cf8 <MX_LWIP_Init+0x24c>)
 8005c10:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005c12:	4b37      	ldr	r3, [pc, #220]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	061a      	lsls	r2, r3, #24
 8005c18:	4b35      	ldr	r3, [pc, #212]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	4b33      	ldr	r3, [pc, #204]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c22:	789b      	ldrb	r3, [r3, #2]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	4313      	orrs	r3, r2
 8005c28:	4a31      	ldr	r2, [pc, #196]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c2a:	78d2      	ldrb	r2, [r2, #3]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	061a      	lsls	r2, r3, #24
 8005c30:	4b2f      	ldr	r3, [pc, #188]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	0619      	lsls	r1, r3, #24
 8005c36:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	4319      	orrs	r1, r3
 8005c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c40:	789b      	ldrb	r3, [r3, #2]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	430b      	orrs	r3, r1
 8005c46:	492a      	ldr	r1, [pc, #168]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c48:	78c9      	ldrb	r1, [r1, #3]
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c52:	431a      	orrs	r2, r3
 8005c54:	4b26      	ldr	r3, [pc, #152]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	0619      	lsls	r1, r3, #24
 8005c5a:	4b25      	ldr	r3, [pc, #148]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	4319      	orrs	r1, r3
 8005c62:	4b23      	ldr	r3, [pc, #140]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c64:	789b      	ldrb	r3, [r3, #2]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	4921      	ldr	r1, [pc, #132]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c6c:	78c9      	ldrb	r1, [r1, #3]
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	0a1b      	lsrs	r3, r3, #8
 8005c72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005c76:	431a      	orrs	r2, r3
 8005c78:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	0619      	lsls	r1, r3, #24
 8005c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c80:	785b      	ldrb	r3, [r3, #1]
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	4319      	orrs	r1, r3
 8005c86:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c88:	789b      	ldrb	r3, [r3, #2]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	4918      	ldr	r1, [pc, #96]	@ (8005cf0 <MX_LWIP_Init+0x244>)
 8005c90:	78c9      	ldrb	r1, [r1, #3]
 8005c92:	430b      	orrs	r3, r1
 8005c94:	0e1b      	lsrs	r3, r3, #24
 8005c96:	4313      	orrs	r3, r2
 8005c98:	4a18      	ldr	r2, [pc, #96]	@ (8005cfc <MX_LWIP_Init+0x250>)
 8005c9a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005c9c:	4b18      	ldr	r3, [pc, #96]	@ (8005d00 <MX_LWIP_Init+0x254>)
 8005c9e:	9302      	str	r3, [sp, #8]
 8005ca0:	4b18      	ldr	r3, [pc, #96]	@ (8005d04 <MX_LWIP_Init+0x258>)
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	4b14      	ldr	r3, [pc, #80]	@ (8005cfc <MX_LWIP_Init+0x250>)
 8005caa:	4a13      	ldr	r2, [pc, #76]	@ (8005cf8 <MX_LWIP_Init+0x24c>)
 8005cac:	4911      	ldr	r1, [pc, #68]	@ (8005cf4 <MX_LWIP_Init+0x248>)
 8005cae:	4816      	ldr	r0, [pc, #88]	@ (8005d08 <MX_LWIP_Init+0x25c>)
 8005cb0:	f001 f93a 	bl	8006f28 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005cb4:	4814      	ldr	r0, [pc, #80]	@ (8005d08 <MX_LWIP_Init+0x25c>)
 8005cb6:	f001 fae5 	bl	8007284 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005cba:	4b13      	ldr	r3, [pc, #76]	@ (8005d08 <MX_LWIP_Init+0x25c>)
 8005cbc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005cc0:	089b      	lsrs	r3, r3, #2
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005ccc:	480e      	ldr	r0, [pc, #56]	@ (8005d08 <MX_LWIP_Init+0x25c>)
 8005cce:	f001 fae9 	bl	80072a4 <netif_set_up>
 8005cd2:	e002      	b.n	8005cda <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005cd4:	480c      	ldr	r0, [pc, #48]	@ (8005d08 <MX_LWIP_Init+0x25c>)
 8005cd6:	f001 fb51 	bl	800737c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005cda:	490c      	ldr	r1, [pc, #48]	@ (8005d0c <MX_LWIP_Init+0x260>)
 8005cdc:	480a      	ldr	r0, [pc, #40]	@ (8005d08 <MX_LWIP_Init+0x25c>)
 8005cde:	f001 fbe3 	bl	80074a8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005ce2:	bf00      	nop
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20000808 	.word	0x20000808
 8005cec:	2000080c 	.word	0x2000080c
 8005cf0:	20000810 	.word	0x20000810
 8005cf4:	200007fc 	.word	0x200007fc
 8005cf8:	20000800 	.word	0x20000800
 8005cfc:	20000804 	.word	0x20000804
 8005d00:	0800b0ed 	.word	0x0800b0ed
 8005d04:	08006075 	.word	0x08006075
 8005d08:	200007c8 	.word	0x200007c8
 8005d0c:	08005d61 	.word	0x08005d61

08005d10 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005d18:	f7fb faf8 	bl	800130c <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	4b08      	ldr	r3, [pc, #32]	@ (8005d40 <Ethernet_Link_Periodic_Handle+0x30>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b63      	cmp	r3, #99	@ 0x63
 8005d26:	d907      	bls.n	8005d38 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005d28:	f7fb faf0 	bl	800130c <HAL_GetTick>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	4a04      	ldr	r2, [pc, #16]	@ (8005d40 <Ethernet_Link_Periodic_Handle+0x30>)
 8005d30:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fafc 	bl	8006330 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	200007c4 	.word	0x200007c4

08005d44 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005d48:	4804      	ldr	r0, [pc, #16]	@ (8005d5c <MX_LWIP_Process+0x18>)
 8005d4a:	f000 f973 	bl	8006034 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005d4e:	f002 faa3 	bl	8008298 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005d52:	4802      	ldr	r0, [pc, #8]	@ (8005d5c <MX_LWIP_Process+0x18>)
 8005d54:	f7ff ffdc 	bl	8005d10 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005d58:	bf00      	nop
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	200007c8 	.word	0x200007c8

08005d60 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <SCB_InvalidateDCache_by_Addr>:
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005d86:	2320      	movs	r3, #32
 8005d88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d8a:	f3bf 8f4f 	dsb	sy
}
 8005d8e:	bf00      	nop
    while (op_size > 0) {
 8005d90:	e00b      	b.n	8005daa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005d92:	4a0d      	ldr	r2, [pc, #52]	@ (8005dc8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4413      	add	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	dcf0      	bgt.n	8005d92 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005db0:	f3bf 8f4f 	dsb	sy
}
 8005db4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005db6:	f3bf 8f6f 	isb	sy
}
 8005dba:	bf00      	nop
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	e000ed00 	.word	0xe000ed00

08005dcc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005dd8:	4b40      	ldr	r3, [pc, #256]	@ (8005edc <low_level_init+0x110>)
 8005dda:	4a41      	ldr	r2, [pc, #260]	@ (8005ee0 <low_level_init+0x114>)
 8005ddc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005dde:	2300      	movs	r3, #0
 8005de0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005de2:	2380      	movs	r3, #128	@ 0x80
 8005de4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005de6:	23e1      	movs	r3, #225	@ 0xe1
 8005de8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005dea:	2300      	movs	r3, #0
 8005dec:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005dee:	2300      	movs	r3, #0
 8005df0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005df2:	2300      	movs	r3, #0
 8005df4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005df6:	4a39      	ldr	r2, [pc, #228]	@ (8005edc <low_level_init+0x110>)
 8005df8:	f107 0308 	add.w	r3, r7, #8
 8005dfc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005dfe:	4b37      	ldr	r3, [pc, #220]	@ (8005edc <low_level_init+0x110>)
 8005e00:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005e04:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005e06:	4b35      	ldr	r3, [pc, #212]	@ (8005edc <low_level_init+0x110>)
 8005e08:	4a36      	ldr	r2, [pc, #216]	@ (8005ee4 <low_level_init+0x118>)
 8005e0a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005e0c:	4b33      	ldr	r3, [pc, #204]	@ (8005edc <low_level_init+0x110>)
 8005e0e:	4a36      	ldr	r2, [pc, #216]	@ (8005ee8 <low_level_init+0x11c>)
 8005e10:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005e12:	4b32      	ldr	r3, [pc, #200]	@ (8005edc <low_level_init+0x110>)
 8005e14:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005e18:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005e1a:	4830      	ldr	r0, [pc, #192]	@ (8005edc <low_level_init+0x110>)
 8005e1c:	f7fb fbb8 	bl	8001590 <HAL_ETH_Init>
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005e24:	2238      	movs	r2, #56	@ 0x38
 8005e26:	2100      	movs	r1, #0
 8005e28:	4830      	ldr	r0, [pc, #192]	@ (8005eec <low_level_init+0x120>)
 8005e2a:	f005 fb9a 	bl	800b562 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8005eec <low_level_init+0x120>)
 8005e30:	2221      	movs	r2, #33	@ 0x21
 8005e32:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005e34:	4b2d      	ldr	r3, [pc, #180]	@ (8005eec <low_level_init+0x120>)
 8005e36:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005e3a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005eec <low_level_init+0x120>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005e42:	482b      	ldr	r0, [pc, #172]	@ (8005ef0 <low_level_init+0x124>)
 8005e44:	f000 ff38 	bl	8006cb8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2206      	movs	r2, #6
 8005e4c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005e50:	4b22      	ldr	r3, [pc, #136]	@ (8005edc <low_level_init+0x110>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005edc <low_level_init+0x110>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	785a      	ldrb	r2, [r3, #1]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005e68:	4b1c      	ldr	r3, [pc, #112]	@ (8005edc <low_level_init+0x110>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	789a      	ldrb	r2, [r3, #2]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005e74:	4b19      	ldr	r3, [pc, #100]	@ (8005edc <low_level_init+0x110>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	78da      	ldrb	r2, [r3, #3]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005e80:	4b16      	ldr	r3, [pc, #88]	@ (8005edc <low_level_init+0x110>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	791a      	ldrb	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005e8c:	4b13      	ldr	r3, [pc, #76]	@ (8005edc <low_level_init+0x110>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	795a      	ldrb	r2, [r3, #5]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005e9e:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ea6:	f043 030a 	orr.w	r3, r3, #10
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005eb2:	4910      	ldr	r1, [pc, #64]	@ (8005ef4 <low_level_init+0x128>)
 8005eb4:	4810      	ldr	r0, [pc, #64]	@ (8005ef8 <low_level_init+0x12c>)
 8005eb6:	f7fb f876 	bl	8000fa6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005eba:	480f      	ldr	r0, [pc, #60]	@ (8005ef8 <low_level_init+0x12c>)
 8005ebc:	f7fb f8a5 	bl	800100a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d103      	bne.n	8005ece <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fa32 	bl	8006330 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005ecc:	e001      	b.n	8005ed2 <low_level_init+0x106>
    Error_Handler();
 8005ece:	f7fa fd65 	bl	800099c <Error_Handler>
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	200051a0 	.word	0x200051a0
 8005ee0:	40028000 	.word	0x40028000
 8005ee4:	20000120 	.word	0x20000120
 8005ee8:	20000080 	.word	0x20000080
 8005eec:	20005250 	.word	0x20005250
 8005ef0:	0800d848 	.word	0x0800d848
 8005ef4:	2000000c 	.word	0x2000000c
 8005ef8:	20005288 	.word	0x20005288

08005efc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b092      	sub	sp, #72	@ 0x48
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005f14:	f107 030c 	add.w	r3, r7, #12
 8005f18:	2230      	movs	r2, #48	@ 0x30
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f005 fb20 	bl	800b562 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005f22:	f107 030c 	add.w	r3, r7, #12
 8005f26:	2230      	movs	r2, #48	@ 0x30
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f005 fb19 	bl	800b562 <memset>

  for(q = p; q != NULL; q = q->next)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f34:	e045      	b.n	8005fc2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d902      	bls.n	8005f42 <low_level_output+0x46>
      return ERR_IF;
 8005f3c:	f06f 030b 	mvn.w	r3, #11
 8005f40:	e055      	b.n	8005fee <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f44:	6859      	ldr	r1, [r3, #4]
 8005f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f48:	4613      	mov	r3, r2
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	3348      	adds	r3, #72	@ 0x48
 8005f52:	443b      	add	r3, r7
 8005f54:	3b3c      	subs	r3, #60	@ 0x3c
 8005f56:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f5a:	895b      	ldrh	r3, [r3, #10]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f60:	4613      	mov	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	3348      	adds	r3, #72	@ 0x48
 8005f6a:	443b      	add	r3, r7
 8005f6c:	3b38      	subs	r3, #56	@ 0x38
 8005f6e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d011      	beq.n	8005f9a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f78:	1e5a      	subs	r2, r3, #1
 8005f7a:	f107 000c 	add.w	r0, r7, #12
 8005f7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f80:	460b      	mov	r3, r1
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	440b      	add	r3, r1
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	18c1      	adds	r1, r0, r3
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	3348      	adds	r3, #72	@ 0x48
 8005f94:	443b      	add	r3, r7
 8005f96:	3b34      	subs	r3, #52	@ 0x34
 8005f98:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005fa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	3348      	adds	r3, #72	@ 0x48
 8005fae:	443b      	add	r3, r7
 8005fb0:	3b34      	subs	r3, #52	@ 0x34
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fb8:	3301      	adds	r3, #1
 8005fba:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1b6      	bne.n	8005f36 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	891b      	ldrh	r3, [r3, #8]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff8 <low_level_output+0xfc>)
 8005fd0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005fd2:	4a09      	ldr	r2, [pc, #36]	@ (8005ff8 <low_level_output+0xfc>)
 8005fd4:	f107 030c 	add.w	r3, r7, #12
 8005fd8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005fda:	4a07      	ldr	r2, [pc, #28]	@ (8005ff8 <low_level_output+0xfc>)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005fe0:	2214      	movs	r2, #20
 8005fe2:	4905      	ldr	r1, [pc, #20]	@ (8005ff8 <low_level_output+0xfc>)
 8005fe4:	4805      	ldr	r0, [pc, #20]	@ (8005ffc <low_level_output+0x100>)
 8005fe6:	f7fb fc07 	bl	80017f8 <HAL_ETH_Transmit>

  return errval;
 8005fea:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3748      	adds	r7, #72	@ 0x48
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20005250 	.word	0x20005250
 8005ffc:	200051a0 	.word	0x200051a0

08006000 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800600c:	4b07      	ldr	r3, [pc, #28]	@ (800602c <low_level_input+0x2c>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d105      	bne.n	8006020 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006014:	f107 030c 	add.w	r3, r7, #12
 8006018:	4619      	mov	r1, r3
 800601a:	4805      	ldr	r0, [pc, #20]	@ (8006030 <low_level_input+0x30>)
 800601c:	f7fb fc80 	bl	8001920 <HAL_ETH_ReadData>
  }

  return p;
 8006020:	68fb      	ldr	r3, [r7, #12]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	2000519c 	.word	0x2000519c
 8006030:	200051a0 	.word	0x200051a0

08006034 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff ffdd 	bl	8006000 <low_level_input>
 8006046:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	4798      	blx	r3
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f001 fd74 	bl	8007b4c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1ea      	bne.n	8006040 <ethernetif_input+0xc>
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <ethernetif_init+0x1c>
 8006082:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <ethernetif_init+0x48>)
 8006084:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 8006088:	490d      	ldr	r1, [pc, #52]	@ (80060c0 <ethernetif_init+0x4c>)
 800608a:	480e      	ldr	r0, [pc, #56]	@ (80060c4 <ethernetif_init+0x50>)
 800608c:	f005 fa04 	bl	800b498 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2273      	movs	r2, #115	@ 0x73
 8006094:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2274      	movs	r2, #116	@ 0x74
 800609c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a09      	ldr	r2, [pc, #36]	@ (80060c8 <ethernetif_init+0x54>)
 80060a4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a08      	ldr	r2, [pc, #32]	@ (80060cc <ethernetif_init+0x58>)
 80060aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fe8d 	bl	8005dcc <low_level_init>

  return ERR_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	0800c2cc 	.word	0x0800c2cc
 80060c0:	0800c2e8 	.word	0x0800c2e8
 80060c4:	0800c2f8 	.word	0x0800c2f8
 80060c8:	080095b9 	.word	0x080095b9
 80060cc:	08005efd 	.word	0x08005efd

080060d0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80060dc:	68f9      	ldr	r1, [r7, #12]
 80060de:	4807      	ldr	r0, [pc, #28]	@ (80060fc <pbuf_free_custom+0x2c>)
 80060e0:	f000 fecc 	bl	8006e7c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80060e4:	4b06      	ldr	r3, [pc, #24]	@ (8006100 <pbuf_free_custom+0x30>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d102      	bne.n	80060f2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80060ec:	4b04      	ldr	r3, [pc, #16]	@ (8006100 <pbuf_free_custom+0x30>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	701a      	strb	r2, [r3, #0]
  }
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	0800d848 	.word	0x0800d848
 8006100:	2000519c 	.word	0x2000519c

08006104 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006108:	f7fb f900 	bl	800130c <HAL_GetTick>
 800610c:	4603      	mov	r3, r0
}
 800610e:	4618      	mov	r0, r3
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b08e      	sub	sp, #56	@ 0x38
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800611c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	605a      	str	r2, [r3, #4]
 8006126:	609a      	str	r2, [r3, #8]
 8006128:	60da      	str	r2, [r3, #12]
 800612a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a52      	ldr	r2, [pc, #328]	@ (800627c <HAL_ETH_MspInit+0x168>)
 8006132:	4293      	cmp	r3, r2
 8006134:	f040 809e 	bne.w	8006274 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006138:	4b51      	ldr	r3, [pc, #324]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 800613a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613c:	4a50      	ldr	r2, [pc, #320]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 800613e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006142:	6313      	str	r3, [r2, #48]	@ 0x30
 8006144:	4b4e      	ldr	r3, [pc, #312]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 8006146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	4b4b      	ldr	r3, [pc, #300]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 8006152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006154:	4a4a      	ldr	r2, [pc, #296]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 8006156:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800615a:	6313      	str	r3, [r2, #48]	@ 0x30
 800615c:	4b48      	ldr	r3, [pc, #288]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 800615e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006160:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006164:	61fb      	str	r3, [r7, #28]
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4b45      	ldr	r3, [pc, #276]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 800616a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616c:	4a44      	ldr	r2, [pc, #272]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 800616e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006172:	6313      	str	r3, [r2, #48]	@ 0x30
 8006174:	4b42      	ldr	r3, [pc, #264]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 8006176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006180:	4b3f      	ldr	r3, [pc, #252]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 8006182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006184:	4a3e      	ldr	r2, [pc, #248]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 8006186:	f043 0304 	orr.w	r3, r3, #4
 800618a:	6313      	str	r3, [r2, #48]	@ 0x30
 800618c:	4b3c      	ldr	r3, [pc, #240]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 800618e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006198:	4b39      	ldr	r3, [pc, #228]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 800619a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619c:	4a38      	ldr	r2, [pc, #224]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 800619e:	f043 0301 	orr.w	r3, r3, #1
 80061a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80061a4:	4b36      	ldr	r3, [pc, #216]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 80061a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061b0:	4b33      	ldr	r3, [pc, #204]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 80061b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b4:	4a32      	ldr	r2, [pc, #200]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 80061b6:	f043 0302 	orr.w	r3, r3, #2
 80061ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80061bc:	4b30      	ldr	r3, [pc, #192]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 80061be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80061c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 80061ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 80061ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80061d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006280 <HAL_ETH_MspInit+0x16c>)
 80061d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80061e0:	2332      	movs	r3, #50	@ 0x32
 80061e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e4:	2302      	movs	r3, #2
 80061e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061ec:	2303      	movs	r3, #3
 80061ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061f0:	230b      	movs	r3, #11
 80061f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061f8:	4619      	mov	r1, r3
 80061fa:	4822      	ldr	r0, [pc, #136]	@ (8006284 <HAL_ETH_MspInit+0x170>)
 80061fc:	f7fc fbae 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006200:	2386      	movs	r3, #134	@ 0x86
 8006202:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006204:	2302      	movs	r3, #2
 8006206:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006208:	2300      	movs	r3, #0
 800620a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800620c:	2303      	movs	r3, #3
 800620e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006210:	230b      	movs	r3, #11
 8006212:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006218:	4619      	mov	r1, r3
 800621a:	481b      	ldr	r0, [pc, #108]	@ (8006288 <HAL_ETH_MspInit+0x174>)
 800621c:	f7fc fb9e 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006224:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006226:	2302      	movs	r3, #2
 8006228:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800622a:	2300      	movs	r3, #0
 800622c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800622e:	2303      	movs	r3, #3
 8006230:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006232:	230b      	movs	r3, #11
 8006234:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800623a:	4619      	mov	r1, r3
 800623c:	4813      	ldr	r0, [pc, #76]	@ (800628c <HAL_ETH_MspInit+0x178>)
 800623e:	f7fc fb8d 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006242:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006246:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006248:	2302      	movs	r3, #2
 800624a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624c:	2300      	movs	r3, #0
 800624e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006250:	2303      	movs	r3, #3
 8006252:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006254:	230b      	movs	r3, #11
 8006256:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800625c:	4619      	mov	r1, r3
 800625e:	480c      	ldr	r0, [pc, #48]	@ (8006290 <HAL_ETH_MspInit+0x17c>)
 8006260:	f7fc fb7c 	bl	800295c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8006264:	2200      	movs	r2, #0
 8006266:	2100      	movs	r1, #0
 8006268:	203d      	movs	r0, #61	@ 0x3d
 800626a:	f7fb f95a 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800626e:	203d      	movs	r0, #61	@ 0x3d
 8006270:	f7fb f973 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006274:	bf00      	nop
 8006276:	3738      	adds	r7, #56	@ 0x38
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40028000 	.word	0x40028000
 8006280:	40023800 	.word	0x40023800
 8006284:	40020800 	.word	0x40020800
 8006288:	40020000 	.word	0x40020000
 800628c:	40020400 	.word	0x40020400
 8006290:	40021800 	.word	0x40021800

08006294 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006298:	4802      	ldr	r0, [pc, #8]	@ (80062a4 <ETH_PHY_IO_Init+0x10>)
 800629a:	f7fb ff05 	bl	80020a8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	200051a0 	.word	0x200051a0

080062a8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  return 0;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	68f9      	ldr	r1, [r7, #12]
 80062ca:	4807      	ldr	r0, [pc, #28]	@ (80062e8 <ETH_PHY_IO_ReadReg+0x30>)
 80062cc:	f7fb fd54 	bl	8001d78 <HAL_ETH_ReadPHYRegister>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80062d6:	f04f 33ff 	mov.w	r3, #4294967295
 80062da:	e000      	b.n	80062de <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	200051a0 	.word	0x200051a0

080062ec <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	68f9      	ldr	r1, [r7, #12]
 80062fe:	4807      	ldr	r0, [pc, #28]	@ (800631c <ETH_PHY_IO_WriteReg+0x30>)
 8006300:	f7fb fd85 	bl	8001e0e <HAL_ETH_WritePHYRegister>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800630a:	f04f 33ff 	mov.w	r3, #4294967295
 800630e:	e000      	b.n	8006312 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	200051a0 	.word	0x200051a0

08006320 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006324:	f7fa fff2 	bl	800130c <HAL_GetTick>
 8006328:	4603      	mov	r3, r0
}
 800632a:	4618      	mov	r0, r3
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b0a0      	sub	sp, #128	@ 0x80
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006338:	f107 030c 	add.w	r3, r7, #12
 800633c:	2264      	movs	r2, #100	@ 0x64
 800633e:	2100      	movs	r1, #0
 8006340:	4618      	mov	r0, r3
 8006342:	f005 f90e 	bl	800b562 <memset>
  int32_t PHYLinkState = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800634e:	2300      	movs	r3, #0
 8006350:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006352:	2300      	movs	r3, #0
 8006354:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006356:	483a      	ldr	r0, [pc, #232]	@ (8006440 <ethernet_link_check_state+0x110>)
 8006358:	f7fa feff 	bl	800115a <LAN8742_GetLinkState>
 800635c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006364:	089b      	lsrs	r3, r3, #2
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00c      	beq.n	800638a <ethernet_link_check_state+0x5a>
 8006370:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006372:	2b01      	cmp	r3, #1
 8006374:	dc09      	bgt.n	800638a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006376:	4833      	ldr	r0, [pc, #204]	@ (8006444 <ethernet_link_check_state+0x114>)
 8006378:	f7fb f9e5 	bl	8001746 <HAL_ETH_Stop>
    netif_set_down(netif);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fffd 	bl	800737c <netif_set_down>
    netif_set_link_down(netif);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 f860 	bl	8007448 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006388:	e055      	b.n	8006436 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d14e      	bne.n	8006436 <ethernet_link_check_state+0x106>
 8006398:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800639a:	2b01      	cmp	r3, #1
 800639c:	dd4b      	ble.n	8006436 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800639e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063a0:	3b02      	subs	r3, #2
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d82a      	bhi.n	80063fc <ethernet_link_check_state+0xcc>
 80063a6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <ethernet_link_check_state+0x7c>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063bd 	.word	0x080063bd
 80063b0:	080063cf 	.word	0x080063cf
 80063b4:	080063df 	.word	0x080063df
 80063b8:	080063ef 	.word	0x080063ef
      duplex = ETH_FULLDUPLEX_MODE;
 80063bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80063c0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80063c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80063c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80063c8:	2301      	movs	r3, #1
 80063ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80063cc:	e017      	b.n	80063fe <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80063ce:	2300      	movs	r3, #0
 80063d0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80063d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80063d6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80063d8:	2301      	movs	r3, #1
 80063da:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80063dc:	e00f      	b.n	80063fe <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80063de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80063e2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80063e4:	2300      	movs	r3, #0
 80063e6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80063e8:	2301      	movs	r3, #1
 80063ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80063ec:	e007      	b.n	80063fe <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80063f2:	2300      	movs	r3, #0
 80063f4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80063f6:	2301      	movs	r3, #1
 80063f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80063fa:	e000      	b.n	80063fe <ethernet_link_check_state+0xce>
      break;
 80063fc:	bf00      	nop
    if(linkchanged)
 80063fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d018      	beq.n	8006436 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006404:	f107 030c 	add.w	r3, r7, #12
 8006408:	4619      	mov	r1, r3
 800640a:	480e      	ldr	r0, [pc, #56]	@ (8006444 <ethernet_link_check_state+0x114>)
 800640c:	f7fb fd48 	bl	8001ea0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006410:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006412:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006416:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006418:	f107 030c 	add.w	r3, r7, #12
 800641c:	4619      	mov	r1, r3
 800641e:	4809      	ldr	r0, [pc, #36]	@ (8006444 <ethernet_link_check_state+0x114>)
 8006420:	f7fb fe28 	bl	8002074 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006424:	4807      	ldr	r0, [pc, #28]	@ (8006444 <ethernet_link_check_state+0x114>)
 8006426:	f7fb f92f 	bl	8001688 <HAL_ETH_Start>
      netif_set_up(netif);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 ff3a 	bl	80072a4 <netif_set_up>
      netif_set_link_up(netif);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 ffd5 	bl	80073e0 <netif_set_link_up>
}
 8006436:	bf00      	nop
 8006438:	3780      	adds	r7, #128	@ 0x80
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20005288 	.word	0x20005288
 8006444:	200051a0 	.word	0x200051a0

08006448 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af02      	add	r7, sp, #8
 800644e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006450:	4812      	ldr	r0, [pc, #72]	@ (800649c <HAL_ETH_RxAllocateCallback+0x54>)
 8006452:	f000 fca5 	bl	8006da0 <memp_malloc_pool>
 8006456:	60f8      	str	r0, [r7, #12]
  if (p)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d014      	beq.n	8006488 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f103 0220 	add.w	r2, r3, #32
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4a0d      	ldr	r2, [pc, #52]	@ (80064a0 <HAL_ETH_RxAllocateCallback+0x58>)
 800646c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006476:	9201      	str	r2, [sp, #4]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2241      	movs	r2, #65	@ 0x41
 800647e:	2100      	movs	r1, #0
 8006480:	2000      	movs	r0, #0
 8006482:	f001 f9a9 	bl	80077d8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006486:	e005      	b.n	8006494 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006488:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800648a:	2201      	movs	r2, #1
 800648c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
}
 8006494:	bf00      	nop
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	0800d848 	.word	0x0800d848
 80064a0:	080060d1 	.word	0x080060d1
 80064a4:	2000519c 	.word	0x2000519c

080064a8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3b20      	subs	r3, #32
 80064c6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	2200      	movs	r2, #0
 80064d2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	887a      	ldrh	r2, [r7, #2]
 80064d8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	e003      	b.n	80064f2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	e009      	b.n	8006514 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	891a      	ldrh	r2, [r3, #8]
 8006504:	887b      	ldrh	r3, [r7, #2]
 8006506:	4413      	add	r3, r2
 8006508:	b29a      	uxth	r2, r3
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f2      	bne.n	8006500 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff fc28 	bl	8005d74 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006524:	bf00      	nop
 8006526:	3720      	adds	r7, #32
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	4603      	mov	r3, r0
 8006534:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006536:	88fb      	ldrh	r3, [r7, #6]
 8006538:	021b      	lsls	r3, r3, #8
 800653a:	b21a      	sxth	r2, r3
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	b29b      	uxth	r3, r3
 8006542:	b21b      	sxth	r3, r3
 8006544:	4313      	orrs	r3, r2
 8006546:	b21b      	sxth	r3, r3
 8006548:	b29b      	uxth	r3, r3
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b082      	sub	sp, #8
 800655a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006560:	f000 f8d2 	bl	8006708 <mem_init>
  memp_init();
 8006564:	f000 fbd8 	bl	8006d18 <memp_init>
  pbuf_init();
  netif_init();
 8006568:	f000 fcd6 	bl	8006f18 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800656c:	f001 fece 	bl	800830c <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006570:	f001 fe4a 	bl	8008208 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	4603      	mov	r3, r0
 8006584:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006586:	4b05      	ldr	r3, [pc, #20]	@ (800659c <ptr_to_mem+0x20>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	4413      	add	r3, r2
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20005914 	.word	0x20005914

080065a0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80065a8:	4b05      	ldr	r3, [pc, #20]	@ (80065c0 <mem_to_ptr+0x20>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	b29b      	uxth	r3, r3
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	20005914 	.word	0x20005914

080065c4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80065c4:	b590      	push	{r4, r7, lr}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80065cc:	4b45      	ldr	r3, [pc, #276]	@ (80066e4 <plug_holes+0x120>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d206      	bcs.n	80065e4 <plug_holes+0x20>
 80065d6:	4b44      	ldr	r3, [pc, #272]	@ (80066e8 <plug_holes+0x124>)
 80065d8:	f240 12df 	movw	r2, #479	@ 0x1df
 80065dc:	4943      	ldr	r1, [pc, #268]	@ (80066ec <plug_holes+0x128>)
 80065de:	4844      	ldr	r0, [pc, #272]	@ (80066f0 <plug_holes+0x12c>)
 80065e0:	f004 ff5a 	bl	800b498 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80065e4:	4b43      	ldr	r3, [pc, #268]	@ (80066f4 <plug_holes+0x130>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d306      	bcc.n	80065fc <plug_holes+0x38>
 80065ee:	4b3e      	ldr	r3, [pc, #248]	@ (80066e8 <plug_holes+0x124>)
 80065f0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80065f4:	4940      	ldr	r1, [pc, #256]	@ (80066f8 <plug_holes+0x134>)
 80065f6:	483e      	ldr	r0, [pc, #248]	@ (80066f0 <plug_holes+0x12c>)
 80065f8:	f004 ff4e 	bl	800b498 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	791b      	ldrb	r3, [r3, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d006      	beq.n	8006612 <plug_holes+0x4e>
 8006604:	4b38      	ldr	r3, [pc, #224]	@ (80066e8 <plug_holes+0x124>)
 8006606:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800660a:	493c      	ldr	r1, [pc, #240]	@ (80066fc <plug_holes+0x138>)
 800660c:	4838      	ldr	r0, [pc, #224]	@ (80066f0 <plug_holes+0x12c>)
 800660e:	f004 ff43 	bl	800b498 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800661a:	d906      	bls.n	800662a <plug_holes+0x66>
 800661c:	4b32      	ldr	r3, [pc, #200]	@ (80066e8 <plug_holes+0x124>)
 800661e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006622:	4937      	ldr	r1, [pc, #220]	@ (8006700 <plug_holes+0x13c>)
 8006624:	4832      	ldr	r0, [pc, #200]	@ (80066f0 <plug_holes+0x12c>)
 8006626:	f004 ff37 	bl	800b498 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff ffa4 	bl	800657c <ptr_to_mem>
 8006634:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	429a      	cmp	r2, r3
 800663c:	d024      	beq.n	8006688 <plug_holes+0xc4>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	791b      	ldrb	r3, [r3, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d120      	bne.n	8006688 <plug_holes+0xc4>
 8006646:	4b2b      	ldr	r3, [pc, #172]	@ (80066f4 <plug_holes+0x130>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	429a      	cmp	r2, r3
 800664e:	d01b      	beq.n	8006688 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006650:	4b2c      	ldr	r3, [pc, #176]	@ (8006704 <plug_holes+0x140>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	429a      	cmp	r2, r3
 8006658:	d102      	bne.n	8006660 <plug_holes+0x9c>
      lfree = mem;
 800665a:	4a2a      	ldr	r2, [pc, #168]	@ (8006704 <plug_holes+0x140>)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	881a      	ldrh	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006670:	d00a      	beq.n	8006688 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff ff80 	bl	800657c <ptr_to_mem>
 800667c:	4604      	mov	r4, r0
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff ff8e 	bl	80065a0 <mem_to_ptr>
 8006684:	4603      	mov	r3, r0
 8006686:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	885b      	ldrh	r3, [r3, #2]
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff ff75 	bl	800657c <ptr_to_mem>
 8006692:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	429a      	cmp	r2, r3
 800669a:	d01f      	beq.n	80066dc <plug_holes+0x118>
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	791b      	ldrb	r3, [r3, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11b      	bne.n	80066dc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80066a4:	4b17      	ldr	r3, [pc, #92]	@ (8006704 <plug_holes+0x140>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d102      	bne.n	80066b4 <plug_holes+0xf0>
      lfree = pmem;
 80066ae:	4a15      	ldr	r2, [pc, #84]	@ (8006704 <plug_holes+0x140>)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	881a      	ldrh	r2, [r3, #0]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80066c4:	d00a      	beq.n	80066dc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff ff56 	bl	800657c <ptr_to_mem>
 80066d0:	4604      	mov	r4, r0
 80066d2:	68b8      	ldr	r0, [r7, #8]
 80066d4:	f7ff ff64 	bl	80065a0 <mem_to_ptr>
 80066d8:	4603      	mov	r3, r0
 80066da:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80066dc:	bf00      	nop
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd90      	pop	{r4, r7, pc}
 80066e4:	20005914 	.word	0x20005914
 80066e8:	0800c320 	.word	0x0800c320
 80066ec:	0800c350 	.word	0x0800c350
 80066f0:	0800c368 	.word	0x0800c368
 80066f4:	20005918 	.word	0x20005918
 80066f8:	0800c390 	.word	0x0800c390
 80066fc:	0800c3ac 	.word	0x0800c3ac
 8006700:	0800c3c8 	.word	0x0800c3c8
 8006704:	2000591c 	.word	0x2000591c

08006708 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800670e:	4b18      	ldr	r3, [pc, #96]	@ (8006770 <mem_init+0x68>)
 8006710:	3303      	adds	r3, #3
 8006712:	f023 0303 	bic.w	r3, r3, #3
 8006716:	461a      	mov	r2, r3
 8006718:	4b16      	ldr	r3, [pc, #88]	@ (8006774 <mem_init+0x6c>)
 800671a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800671c:	4b15      	ldr	r3, [pc, #84]	@ (8006774 <mem_init+0x6c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006728:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006736:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800673a:	f7ff ff1f 	bl	800657c <ptr_to_mem>
 800673e:	4603      	mov	r3, r0
 8006740:	4a0d      	ldr	r2, [pc, #52]	@ (8006778 <mem_init+0x70>)
 8006742:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006744:	4b0c      	ldr	r3, [pc, #48]	@ (8006778 <mem_init+0x70>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2201      	movs	r2, #1
 800674a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800674c:	4b0a      	ldr	r3, [pc, #40]	@ (8006778 <mem_init+0x70>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006754:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006756:	4b08      	ldr	r3, [pc, #32]	@ (8006778 <mem_init+0x70>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800675e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006760:	4b04      	ldr	r3, [pc, #16]	@ (8006774 <mem_init+0x6c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a05      	ldr	r2, [pc, #20]	@ (800677c <mem_init+0x74>)
 8006766:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	200052c0 	.word	0x200052c0
 8006774:	20005914 	.word	0x20005914
 8006778:	20005918 	.word	0x20005918
 800677c:	2000591c 	.word	0x2000591c

08006780 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff ff09 	bl	80065a0 <mem_to_ptr>
 800678e:	4603      	mov	r3, r0
 8006790:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fef0 	bl	800657c <ptr_to_mem>
 800679c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	885b      	ldrh	r3, [r3, #2]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff feea 	bl	800657c <ptr_to_mem>
 80067a8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80067b2:	d818      	bhi.n	80067e6 <mem_link_valid+0x66>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	885b      	ldrh	r3, [r3, #2]
 80067b8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80067bc:	d813      	bhi.n	80067e6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80067c2:	8afa      	ldrh	r2, [r7, #22]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d004      	beq.n	80067d2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	8afa      	ldrh	r2, [r7, #22]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d109      	bne.n	80067e6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067d2:	4b08      	ldr	r3, [pc, #32]	@ (80067f4 <mem_link_valid+0x74>)
 80067d4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d006      	beq.n	80067ea <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	885b      	ldrh	r3, [r3, #2]
 80067e0:	8afa      	ldrh	r2, [r7, #22]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d001      	beq.n	80067ea <mem_link_valid+0x6a>
    return 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e000      	b.n	80067ec <mem_link_valid+0x6c>
  }
  return 1;
 80067ea:	2301      	movs	r3, #1
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20005918 	.word	0x20005918

080067f8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d04c      	beq.n	80068a0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f003 0303 	and.w	r3, r3, #3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006810:	4b25      	ldr	r3, [pc, #148]	@ (80068a8 <mem_free+0xb0>)
 8006812:	f240 2273 	movw	r2, #627	@ 0x273
 8006816:	4925      	ldr	r1, [pc, #148]	@ (80068ac <mem_free+0xb4>)
 8006818:	4825      	ldr	r0, [pc, #148]	@ (80068b0 <mem_free+0xb8>)
 800681a:	f004 fe3d 	bl	800b498 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800681e:	e040      	b.n	80068a2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3b08      	subs	r3, #8
 8006824:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006826:	4b23      	ldr	r3, [pc, #140]	@ (80068b4 <mem_free+0xbc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	429a      	cmp	r2, r3
 800682e:	d306      	bcc.n	800683e <mem_free+0x46>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f103 020c 	add.w	r2, r3, #12
 8006836:	4b20      	ldr	r3, [pc, #128]	@ (80068b8 <mem_free+0xc0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d907      	bls.n	800684e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800683e:	4b1a      	ldr	r3, [pc, #104]	@ (80068a8 <mem_free+0xb0>)
 8006840:	f240 227f 	movw	r2, #639	@ 0x27f
 8006844:	491d      	ldr	r1, [pc, #116]	@ (80068bc <mem_free+0xc4>)
 8006846:	481a      	ldr	r0, [pc, #104]	@ (80068b0 <mem_free+0xb8>)
 8006848:	f004 fe26 	bl	800b498 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800684c:	e029      	b.n	80068a2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	791b      	ldrb	r3, [r3, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006856:	4b14      	ldr	r3, [pc, #80]	@ (80068a8 <mem_free+0xb0>)
 8006858:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800685c:	4918      	ldr	r1, [pc, #96]	@ (80068c0 <mem_free+0xc8>)
 800685e:	4814      	ldr	r0, [pc, #80]	@ (80068b0 <mem_free+0xb8>)
 8006860:	f004 fe1a 	bl	800b498 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006864:	e01d      	b.n	80068a2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff ff8a 	bl	8006780 <mem_link_valid>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d107      	bne.n	8006882 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006872:	4b0d      	ldr	r3, [pc, #52]	@ (80068a8 <mem_free+0xb0>)
 8006874:	f240 2295 	movw	r2, #661	@ 0x295
 8006878:	4912      	ldr	r1, [pc, #72]	@ (80068c4 <mem_free+0xcc>)
 800687a:	480d      	ldr	r0, [pc, #52]	@ (80068b0 <mem_free+0xb8>)
 800687c:	f004 fe0c 	bl	800b498 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006880:	e00f      	b.n	80068a2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006888:	4b0f      	ldr	r3, [pc, #60]	@ (80068c8 <mem_free+0xd0>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	429a      	cmp	r2, r3
 8006890:	d202      	bcs.n	8006898 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006892:	4a0d      	ldr	r2, [pc, #52]	@ (80068c8 <mem_free+0xd0>)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7ff fe93 	bl	80065c4 <plug_holes>
 800689e:	e000      	b.n	80068a2 <mem_free+0xaa>
    return;
 80068a0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	0800c320 	.word	0x0800c320
 80068ac:	0800c3f4 	.word	0x0800c3f4
 80068b0:	0800c368 	.word	0x0800c368
 80068b4:	20005914 	.word	0x20005914
 80068b8:	20005918 	.word	0x20005918
 80068bc:	0800c418 	.word	0x0800c418
 80068c0:	0800c434 	.word	0x0800c434
 80068c4:	0800c45c 	.word	0x0800c45c
 80068c8:	2000591c 	.word	0x2000591c

080068cc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80068d8:	887b      	ldrh	r3, [r7, #2]
 80068da:	3303      	adds	r3, #3
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80068e4:	8bfb      	ldrh	r3, [r7, #30]
 80068e6:	2b0b      	cmp	r3, #11
 80068e8:	d801      	bhi.n	80068ee <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80068ea:	230c      	movs	r3, #12
 80068ec:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80068ee:	8bfb      	ldrh	r3, [r7, #30]
 80068f0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80068f4:	d803      	bhi.n	80068fe <mem_trim+0x32>
 80068f6:	8bfa      	ldrh	r2, [r7, #30]
 80068f8:	887b      	ldrh	r3, [r7, #2]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d201      	bcs.n	8006902 <mem_trim+0x36>
    return NULL;
 80068fe:	2300      	movs	r3, #0
 8006900:	e0cc      	b.n	8006a9c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006902:	4b68      	ldr	r3, [pc, #416]	@ (8006aa4 <mem_trim+0x1d8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	429a      	cmp	r2, r3
 800690a:	d304      	bcc.n	8006916 <mem_trim+0x4a>
 800690c:	4b66      	ldr	r3, [pc, #408]	@ (8006aa8 <mem_trim+0x1dc>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d306      	bcc.n	8006924 <mem_trim+0x58>
 8006916:	4b65      	ldr	r3, [pc, #404]	@ (8006aac <mem_trim+0x1e0>)
 8006918:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800691c:	4964      	ldr	r1, [pc, #400]	@ (8006ab0 <mem_trim+0x1e4>)
 800691e:	4865      	ldr	r0, [pc, #404]	@ (8006ab4 <mem_trim+0x1e8>)
 8006920:	f004 fdba 	bl	800b498 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006924:	4b5f      	ldr	r3, [pc, #380]	@ (8006aa4 <mem_trim+0x1d8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	429a      	cmp	r2, r3
 800692c:	d304      	bcc.n	8006938 <mem_trim+0x6c>
 800692e:	4b5e      	ldr	r3, [pc, #376]	@ (8006aa8 <mem_trim+0x1dc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d301      	bcc.n	800693c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	e0af      	b.n	8006a9c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3b08      	subs	r3, #8
 8006940:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006942:	69b8      	ldr	r0, [r7, #24]
 8006944:	f7ff fe2c 	bl	80065a0 <mem_to_ptr>
 8006948:	4603      	mov	r3, r0
 800694a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	881a      	ldrh	r2, [r3, #0]
 8006950:	8afb      	ldrh	r3, [r7, #22]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b08      	subs	r3, #8
 8006958:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800695a:	8bfa      	ldrh	r2, [r7, #30]
 800695c:	8abb      	ldrh	r3, [r7, #20]
 800695e:	429a      	cmp	r2, r3
 8006960:	d906      	bls.n	8006970 <mem_trim+0xa4>
 8006962:	4b52      	ldr	r3, [pc, #328]	@ (8006aac <mem_trim+0x1e0>)
 8006964:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8006968:	4953      	ldr	r1, [pc, #332]	@ (8006ab8 <mem_trim+0x1ec>)
 800696a:	4852      	ldr	r0, [pc, #328]	@ (8006ab4 <mem_trim+0x1e8>)
 800696c:	f004 fd94 	bl	800b498 <iprintf>
  if (newsize > size) {
 8006970:	8bfa      	ldrh	r2, [r7, #30]
 8006972:	8abb      	ldrh	r3, [r7, #20]
 8006974:	429a      	cmp	r2, r3
 8006976:	d901      	bls.n	800697c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006978:	2300      	movs	r3, #0
 800697a:	e08f      	b.n	8006a9c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800697c:	8bfa      	ldrh	r2, [r7, #30]
 800697e:	8abb      	ldrh	r3, [r7, #20]
 8006980:	429a      	cmp	r2, r3
 8006982:	d101      	bne.n	8006988 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	e089      	b.n	8006a9c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff fdf5 	bl	800657c <ptr_to_mem>
 8006992:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	791b      	ldrb	r3, [r3, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d13f      	bne.n	8006a1c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80069a4:	d106      	bne.n	80069b4 <mem_trim+0xe8>
 80069a6:	4b41      	ldr	r3, [pc, #260]	@ (8006aac <mem_trim+0x1e0>)
 80069a8:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80069ac:	4943      	ldr	r1, [pc, #268]	@ (8006abc <mem_trim+0x1f0>)
 80069ae:	4841      	ldr	r0, [pc, #260]	@ (8006ab4 <mem_trim+0x1e8>)
 80069b0:	f004 fd72 	bl	800b498 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80069ba:	8afa      	ldrh	r2, [r7, #22]
 80069bc:	8bfb      	ldrh	r3, [r7, #30]
 80069be:	4413      	add	r3, r2
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3308      	adds	r3, #8
 80069c4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80069c6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac0 <mem_trim+0x1f4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d106      	bne.n	80069de <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80069d0:	89fb      	ldrh	r3, [r7, #14]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff fdd2 	bl	800657c <ptr_to_mem>
 80069d8:	4603      	mov	r3, r0
 80069da:	4a39      	ldr	r2, [pc, #228]	@ (8006ac0 <mem_trim+0x1f4>)
 80069dc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80069de:	89fb      	ldrh	r3, [r7, #14]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff fdcb 	bl	800657c <ptr_to_mem>
 80069e6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2200      	movs	r2, #0
 80069ec:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	89ba      	ldrh	r2, [r7, #12]
 80069f2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	8afa      	ldrh	r2, [r7, #22]
 80069f8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	89fa      	ldrh	r2, [r7, #14]
 80069fe:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a08:	d047      	beq.n	8006a9a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fdb4 	bl	800657c <ptr_to_mem>
 8006a14:	4602      	mov	r2, r0
 8006a16:	89fb      	ldrh	r3, [r7, #14]
 8006a18:	8053      	strh	r3, [r2, #2]
 8006a1a:	e03e      	b.n	8006a9a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006a1c:	8bfb      	ldrh	r3, [r7, #30]
 8006a1e:	f103 0214 	add.w	r2, r3, #20
 8006a22:	8abb      	ldrh	r3, [r7, #20]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d838      	bhi.n	8006a9a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006a28:	8afa      	ldrh	r2, [r7, #22]
 8006a2a:	8bfb      	ldrh	r3, [r7, #30]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3308      	adds	r3, #8
 8006a32:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a3c:	d106      	bne.n	8006a4c <mem_trim+0x180>
 8006a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8006aac <mem_trim+0x1e0>)
 8006a40:	f240 3216 	movw	r2, #790	@ 0x316
 8006a44:	491d      	ldr	r1, [pc, #116]	@ (8006abc <mem_trim+0x1f0>)
 8006a46:	481b      	ldr	r0, [pc, #108]	@ (8006ab4 <mem_trim+0x1e8>)
 8006a48:	f004 fd26 	bl	800b498 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006a4c:	89fb      	ldrh	r3, [r7, #14]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff fd94 	bl	800657c <ptr_to_mem>
 8006a54:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006a56:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac0 <mem_trim+0x1f4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d202      	bcs.n	8006a66 <mem_trim+0x19a>
      lfree = mem2;
 8006a60:	4a17      	ldr	r2, [pc, #92]	@ (8006ac0 <mem_trim+0x1f4>)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	881a      	ldrh	r2, [r3, #0]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	8afa      	ldrh	r2, [r7, #22]
 8006a78:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	89fa      	ldrh	r2, [r7, #14]
 8006a7e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a88:	d007      	beq.n	8006a9a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fd74 	bl	800657c <ptr_to_mem>
 8006a94:	4602      	mov	r2, r0
 8006a96:	89fb      	ldrh	r3, [r7, #14]
 8006a98:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006a9a:	687b      	ldr	r3, [r7, #4]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3720      	adds	r7, #32
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20005914 	.word	0x20005914
 8006aa8:	20005918 	.word	0x20005918
 8006aac:	0800c320 	.word	0x0800c320
 8006ab0:	0800c490 	.word	0x0800c490
 8006ab4:	0800c368 	.word	0x0800c368
 8006ab8:	0800c4a8 	.word	0x0800c4a8
 8006abc:	0800c4c8 	.word	0x0800c4c8
 8006ac0:	2000591c 	.word	0x2000591c

08006ac4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006ace:	88fb      	ldrh	r3, [r7, #6]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <mem_malloc+0x14>
    return NULL;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e0d9      	b.n	8006c8c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	3303      	adds	r3, #3
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006ae4:	8bbb      	ldrh	r3, [r7, #28]
 8006ae6:	2b0b      	cmp	r3, #11
 8006ae8:	d801      	bhi.n	8006aee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006aea:	230c      	movs	r3, #12
 8006aec:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006aee:	8bbb      	ldrh	r3, [r7, #28]
 8006af0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006af4:	d803      	bhi.n	8006afe <mem_malloc+0x3a>
 8006af6:	8bba      	ldrh	r2, [r7, #28]
 8006af8:	88fb      	ldrh	r3, [r7, #6]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d201      	bcs.n	8006b02 <mem_malloc+0x3e>
    return NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	e0c4      	b.n	8006c8c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006b02:	4b64      	ldr	r3, [pc, #400]	@ (8006c94 <mem_malloc+0x1d0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff fd4a 	bl	80065a0 <mem_to_ptr>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	83fb      	strh	r3, [r7, #30]
 8006b10:	e0b4      	b.n	8006c7c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006b12:	8bfb      	ldrh	r3, [r7, #30]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff fd31 	bl	800657c <ptr_to_mem>
 8006b1a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	791b      	ldrb	r3, [r3, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f040 80a4 	bne.w	8006c6e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	8bfb      	ldrh	r3, [r7, #30]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f1a3 0208 	sub.w	r2, r3, #8
 8006b34:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006b36:	429a      	cmp	r2, r3
 8006b38:	f0c0 8099 	bcc.w	8006c6e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	8bfb      	ldrh	r3, [r7, #30]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	f1a3 0208 	sub.w	r2, r3, #8
 8006b4a:	8bbb      	ldrh	r3, [r7, #28]
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d333      	bcc.n	8006bba <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006b52:	8bfa      	ldrh	r2, [r7, #30]
 8006b54:	8bbb      	ldrh	r3, [r7, #28]
 8006b56:	4413      	add	r3, r2
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006b5e:	8a7b      	ldrh	r3, [r7, #18]
 8006b60:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006b64:	d106      	bne.n	8006b74 <mem_malloc+0xb0>
 8006b66:	4b4c      	ldr	r3, [pc, #304]	@ (8006c98 <mem_malloc+0x1d4>)
 8006b68:	f240 3287 	movw	r2, #903	@ 0x387
 8006b6c:	494b      	ldr	r1, [pc, #300]	@ (8006c9c <mem_malloc+0x1d8>)
 8006b6e:	484c      	ldr	r0, [pc, #304]	@ (8006ca0 <mem_malloc+0x1dc>)
 8006b70:	f004 fc92 	bl	800b498 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006b74:	8a7b      	ldrh	r3, [r7, #18]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff fd00 	bl	800657c <ptr_to_mem>
 8006b7c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	881a      	ldrh	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8bfa      	ldrh	r2, [r7, #30]
 8006b90:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	8a7a      	ldrh	r2, [r7, #18]
 8006b96:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006ba6:	d00b      	beq.n	8006bc0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff fce5 	bl	800657c <ptr_to_mem>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	8a7b      	ldrh	r3, [r7, #18]
 8006bb6:	8053      	strh	r3, [r2, #2]
 8006bb8:	e002      	b.n	8006bc0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006bc0:	4b34      	ldr	r3, [pc, #208]	@ (8006c94 <mem_malloc+0x1d0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d127      	bne.n	8006c1a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006bca:	4b32      	ldr	r3, [pc, #200]	@ (8006c94 <mem_malloc+0x1d0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006bd0:	e005      	b.n	8006bde <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff fcd0 	bl	800657c <ptr_to_mem>
 8006bdc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	791b      	ldrb	r3, [r3, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d004      	beq.n	8006bf0 <mem_malloc+0x12c>
 8006be6:	4b2f      	ldr	r3, [pc, #188]	@ (8006ca4 <mem_malloc+0x1e0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d1f0      	bne.n	8006bd2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006bf0:	4a28      	ldr	r2, [pc, #160]	@ (8006c94 <mem_malloc+0x1d0>)
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006bf6:	4b27      	ldr	r3, [pc, #156]	@ (8006c94 <mem_malloc+0x1d0>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8006ca4 <mem_malloc+0x1e0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d00b      	beq.n	8006c1a <mem_malloc+0x156>
 8006c02:	4b24      	ldr	r3, [pc, #144]	@ (8006c94 <mem_malloc+0x1d0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	791b      	ldrb	r3, [r3, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <mem_malloc+0x156>
 8006c0c:	4b22      	ldr	r3, [pc, #136]	@ (8006c98 <mem_malloc+0x1d4>)
 8006c0e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8006c12:	4925      	ldr	r1, [pc, #148]	@ (8006ca8 <mem_malloc+0x1e4>)
 8006c14:	4822      	ldr	r0, [pc, #136]	@ (8006ca0 <mem_malloc+0x1dc>)
 8006c16:	f004 fc3f 	bl	800b498 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006c1a:	8bba      	ldrh	r2, [r7, #28]
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	4413      	add	r3, r2
 8006c20:	3308      	adds	r3, #8
 8006c22:	4a20      	ldr	r2, [pc, #128]	@ (8006ca4 <mem_malloc+0x1e0>)
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d906      	bls.n	8006c38 <mem_malloc+0x174>
 8006c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8006c98 <mem_malloc+0x1d4>)
 8006c2c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8006c30:	491e      	ldr	r1, [pc, #120]	@ (8006cac <mem_malloc+0x1e8>)
 8006c32:	481b      	ldr	r0, [pc, #108]	@ (8006ca0 <mem_malloc+0x1dc>)
 8006c34:	f004 fc30 	bl	800b498 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d006      	beq.n	8006c50 <mem_malloc+0x18c>
 8006c42:	4b15      	ldr	r3, [pc, #84]	@ (8006c98 <mem_malloc+0x1d4>)
 8006c44:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006c48:	4919      	ldr	r1, [pc, #100]	@ (8006cb0 <mem_malloc+0x1ec>)
 8006c4a:	4815      	ldr	r0, [pc, #84]	@ (8006ca0 <mem_malloc+0x1dc>)
 8006c4c:	f004 fc24 	bl	800b498 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d006      	beq.n	8006c68 <mem_malloc+0x1a4>
 8006c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c98 <mem_malloc+0x1d4>)
 8006c5c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8006c60:	4914      	ldr	r1, [pc, #80]	@ (8006cb4 <mem_malloc+0x1f0>)
 8006c62:	480f      	ldr	r0, [pc, #60]	@ (8006ca0 <mem_malloc+0x1dc>)
 8006c64:	f004 fc18 	bl	800b498 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	e00e      	b.n	8006c8c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006c6e:	8bfb      	ldrh	r3, [r7, #30]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff fc83 	bl	800657c <ptr_to_mem>
 8006c76:	4603      	mov	r3, r0
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c7c:	8bfa      	ldrh	r2, [r7, #30]
 8006c7e:	8bbb      	ldrh	r3, [r7, #28]
 8006c80:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8006c84:	429a      	cmp	r2, r3
 8006c86:	f4ff af44 	bcc.w	8006b12 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3720      	adds	r7, #32
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	2000591c 	.word	0x2000591c
 8006c98:	0800c320 	.word	0x0800c320
 8006c9c:	0800c4c8 	.word	0x0800c4c8
 8006ca0:	0800c368 	.word	0x0800c368
 8006ca4:	20005918 	.word	0x20005918
 8006ca8:	0800c4dc 	.word	0x0800c4dc
 8006cac:	0800c4f8 	.word	0x0800c4f8
 8006cb0:	0800c528 	.word	0x0800c528
 8006cb4:	0800c558 	.word	0x0800c558

08006cb8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	3303      	adds	r3, #3
 8006cce:	f023 0303 	bic.w	r3, r3, #3
 8006cd2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	e011      	b.n	8006cfe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	885b      	ldrh	r3, [r3, #2]
 8006d02:	461a      	mov	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4293      	cmp	r3, r2
 8006d08:	dbe7      	blt.n	8006cda <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d1e:	2300      	movs	r3, #0
 8006d20:	80fb      	strh	r3, [r7, #6]
 8006d22:	e009      	b.n	8006d38 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	4a08      	ldr	r2, [pc, #32]	@ (8006d48 <memp_init+0x30>)
 8006d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff ffc3 	bl	8006cb8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	3301      	adds	r3, #1
 8006d36:	80fb      	strh	r3, [r7, #6]
 8006d38:	88fb      	ldrh	r3, [r7, #6]
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	d9f2      	bls.n	8006d24 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	0800d89c 	.word	0x0800d89c

08006d4c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d012      	beq.n	8006d88 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d006      	beq.n	8006d84 <do_memp_malloc_pool+0x38>
 8006d76:	4b07      	ldr	r3, [pc, #28]	@ (8006d94 <do_memp_malloc_pool+0x48>)
 8006d78:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006d7c:	4906      	ldr	r1, [pc, #24]	@ (8006d98 <do_memp_malloc_pool+0x4c>)
 8006d7e:	4807      	ldr	r0, [pc, #28]	@ (8006d9c <do_memp_malloc_pool+0x50>)
 8006d80:	f004 fb8a 	bl	800b498 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	e000      	b.n	8006d8a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	0800c57c 	.word	0x0800c57c
 8006d98:	0800c5ac 	.word	0x0800c5ac
 8006d9c:	0800c5d0 	.word	0x0800c5d0

08006da0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <memp_malloc_pool+0x1c>
 8006dae:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd8 <memp_malloc_pool+0x38>)
 8006db0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006db4:	4909      	ldr	r1, [pc, #36]	@ (8006ddc <memp_malloc_pool+0x3c>)
 8006db6:	480a      	ldr	r0, [pc, #40]	@ (8006de0 <memp_malloc_pool+0x40>)
 8006db8:	f004 fb6e 	bl	800b498 <iprintf>
  if (desc == NULL) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <memp_malloc_pool+0x26>
    return NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e003      	b.n	8006dce <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff ffc0 	bl	8006d4c <do_memp_malloc_pool>
 8006dcc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	0800c57c 	.word	0x0800c57c
 8006ddc:	0800c5f8 	.word	0x0800c5f8
 8006de0:	0800c5d0 	.word	0x0800c5d0

08006de4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	2b05      	cmp	r3, #5
 8006df2:	d908      	bls.n	8006e06 <memp_malloc+0x22>
 8006df4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e20 <memp_malloc+0x3c>)
 8006df6:	f240 1257 	movw	r2, #343	@ 0x157
 8006dfa:	490a      	ldr	r1, [pc, #40]	@ (8006e24 <memp_malloc+0x40>)
 8006dfc:	480a      	ldr	r0, [pc, #40]	@ (8006e28 <memp_malloc+0x44>)
 8006dfe:	f004 fb4b 	bl	800b498 <iprintf>
 8006e02:	2300      	movs	r3, #0
 8006e04:	e008      	b.n	8006e18 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	4a08      	ldr	r2, [pc, #32]	@ (8006e2c <memp_malloc+0x48>)
 8006e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff ff9c 	bl	8006d4c <do_memp_malloc_pool>
 8006e14:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006e16:	68fb      	ldr	r3, [r7, #12]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	0800c57c 	.word	0x0800c57c
 8006e24:	0800c60c 	.word	0x0800c60c
 8006e28:	0800c5d0 	.word	0x0800c5d0
 8006e2c:	0800d89c 	.word	0x0800d89c

08006e30 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <do_memp_free_pool+0x22>
 8006e44:	4b0a      	ldr	r3, [pc, #40]	@ (8006e70 <do_memp_free_pool+0x40>)
 8006e46:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006e4a:	490a      	ldr	r1, [pc, #40]	@ (8006e74 <do_memp_free_pool+0x44>)
 8006e4c:	480a      	ldr	r0, [pc, #40]	@ (8006e78 <do_memp_free_pool+0x48>)
 8006e4e:	f004 fb23 	bl	800b498 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	0800c57c 	.word	0x0800c57c
 8006e74:	0800c62c 	.word	0x0800c62c
 8006e78:	0800c5d0 	.word	0x0800c5d0

08006e7c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <memp_free_pool+0x1e>
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb8 <memp_free_pool+0x3c>)
 8006e8e:	f240 1295 	movw	r2, #405	@ 0x195
 8006e92:	490a      	ldr	r1, [pc, #40]	@ (8006ebc <memp_free_pool+0x40>)
 8006e94:	480a      	ldr	r0, [pc, #40]	@ (8006ec0 <memp_free_pool+0x44>)
 8006e96:	f004 faff 	bl	800b498 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d007      	beq.n	8006eb0 <memp_free_pool+0x34>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d004      	beq.n	8006eb0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff ffc1 	bl	8006e30 <do_memp_free_pool>
 8006eae:	e000      	b.n	8006eb2 <memp_free_pool+0x36>
    return;
 8006eb0:	bf00      	nop
}
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	0800c57c 	.word	0x0800c57c
 8006ebc:	0800c5f8 	.word	0x0800c5f8
 8006ec0:	0800c5d0 	.word	0x0800c5d0

08006ec4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6039      	str	r1, [r7, #0]
 8006ece:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b05      	cmp	r3, #5
 8006ed4:	d907      	bls.n	8006ee6 <memp_free+0x22>
 8006ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8006f08 <memp_free+0x44>)
 8006ed8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006edc:	490b      	ldr	r1, [pc, #44]	@ (8006f0c <memp_free+0x48>)
 8006ede:	480c      	ldr	r0, [pc, #48]	@ (8006f10 <memp_free+0x4c>)
 8006ee0:	f004 fada 	bl	800b498 <iprintf>
 8006ee4:	e00c      	b.n	8006f00 <memp_free+0x3c>

  if (mem == NULL) {
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	4a09      	ldr	r2, [pc, #36]	@ (8006f14 <memp_free+0x50>)
 8006ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff ff9a 	bl	8006e30 <do_memp_free_pool>
 8006efc:	e000      	b.n	8006f00 <memp_free+0x3c>
    return;
 8006efe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	0800c57c 	.word	0x0800c57c
 8006f0c:	0800c64c 	.word	0x0800c64c
 8006f10:	0800c5d0 	.word	0x0800c5d0
 8006f14:	0800d89c 	.word	0x0800d89c

08006f18 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006f1c:	bf00      	nop
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d108      	bne.n	8006f4e <netif_add+0x26>
 8006f3c:	4b57      	ldr	r3, [pc, #348]	@ (800709c <netif_add+0x174>)
 8006f3e:	f240 1227 	movw	r2, #295	@ 0x127
 8006f42:	4957      	ldr	r1, [pc, #348]	@ (80070a0 <netif_add+0x178>)
 8006f44:	4857      	ldr	r0, [pc, #348]	@ (80070a4 <netif_add+0x17c>)
 8006f46:	f004 faa7 	bl	800b498 <iprintf>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e0a2      	b.n	8007094 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d108      	bne.n	8006f66 <netif_add+0x3e>
 8006f54:	4b51      	ldr	r3, [pc, #324]	@ (800709c <netif_add+0x174>)
 8006f56:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006f5a:	4953      	ldr	r1, [pc, #332]	@ (80070a8 <netif_add+0x180>)
 8006f5c:	4851      	ldr	r0, [pc, #324]	@ (80070a4 <netif_add+0x17c>)
 8006f5e:	f004 fa9b 	bl	800b498 <iprintf>
 8006f62:	2300      	movs	r3, #0
 8006f64:	e096      	b.n	8007094 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006f6c:	4b4f      	ldr	r3, [pc, #316]	@ (80070ac <netif_add+0x184>)
 8006f6e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006f76:	4b4d      	ldr	r3, [pc, #308]	@ (80070ac <netif_add+0x184>)
 8006f78:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006f80:	4b4a      	ldr	r3, [pc, #296]	@ (80070ac <netif_add+0x184>)
 8006f82:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4a45      	ldr	r2, [pc, #276]	@ (80070b0 <netif_add+0x188>)
 8006f9a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a3a      	ldr	r2, [r7, #32]
 8006fb4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80070b4 <netif_add+0x18c>)
 8006fb8:	781a      	ldrb	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fc4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f90f 	bl	80071f0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	4798      	blx	r3
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <netif_add+0xba>
    return NULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e058      	b.n	8007094 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006fe8:	2bff      	cmp	r3, #255	@ 0xff
 8006fea:	d103      	bne.n	8006ff4 <netif_add+0xcc>
        netif->num = 0;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80070b8 <netif_add+0x190>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	e02b      	b.n	8007058 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	429a      	cmp	r2, r3
 8007006:	d106      	bne.n	8007016 <netif_add+0xee>
 8007008:	4b24      	ldr	r3, [pc, #144]	@ (800709c <netif_add+0x174>)
 800700a:	f240 128b 	movw	r2, #395	@ 0x18b
 800700e:	492b      	ldr	r1, [pc, #172]	@ (80070bc <netif_add+0x194>)
 8007010:	4824      	ldr	r0, [pc, #144]	@ (80070a4 <netif_add+0x17c>)
 8007012:	f004 fa41 	bl	800b498 <iprintf>
        num_netifs++;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	3301      	adds	r3, #1
 800701a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2bff      	cmp	r3, #255	@ 0xff
 8007020:	dd06      	ble.n	8007030 <netif_add+0x108>
 8007022:	4b1e      	ldr	r3, [pc, #120]	@ (800709c <netif_add+0x174>)
 8007024:	f240 128d 	movw	r2, #397	@ 0x18d
 8007028:	4925      	ldr	r1, [pc, #148]	@ (80070c0 <netif_add+0x198>)
 800702a:	481e      	ldr	r0, [pc, #120]	@ (80070a4 <netif_add+0x17c>)
 800702c:	f004 fa34 	bl	800b498 <iprintf>
        if (netif2->num == netif->num) {
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800703c:	429a      	cmp	r2, r3
 800703e:	d108      	bne.n	8007052 <netif_add+0x12a>
          netif->num++;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007046:	3301      	adds	r3, #1
 8007048:	b2da      	uxtb	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8007050:	e005      	b.n	800705e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	617b      	str	r3, [r7, #20]
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1d0      	bne.n	8007000 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1be      	bne.n	8006fe2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800706a:	2bfe      	cmp	r3, #254	@ 0xfe
 800706c:	d103      	bne.n	8007076 <netif_add+0x14e>
    netif_num = 0;
 800706e:	4b11      	ldr	r3, [pc, #68]	@ (80070b4 <netif_add+0x18c>)
 8007070:	2200      	movs	r2, #0
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	e006      	b.n	8007084 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800707c:	3301      	adds	r3, #1
 800707e:	b2da      	uxtb	r2, r3
 8007080:	4b0c      	ldr	r3, [pc, #48]	@ (80070b4 <netif_add+0x18c>)
 8007082:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007084:	4b0c      	ldr	r3, [pc, #48]	@ (80070b8 <netif_add+0x190>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800708c:	4a0a      	ldr	r2, [pc, #40]	@ (80070b8 <netif_add+0x190>)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007092:	68fb      	ldr	r3, [r7, #12]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	0800c668 	.word	0x0800c668
 80070a0:	0800c6fc 	.word	0x0800c6fc
 80070a4:	0800c6b8 	.word	0x0800c6b8
 80070a8:	0800c718 	.word	0x0800c718
 80070ac:	0800d8c4 	.word	0x0800d8c4
 80070b0:	080074cb 	.word	0x080074cb
 80070b4:	20008300 	.word	0x20008300
 80070b8:	200082f8 	.word	0x200082f8
 80070bc:	0800c73c 	.word	0x0800c73c
 80070c0:	0800c750 	.word	0x0800c750

080070c4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 fdf5 	bl	8008cc0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <netif_do_set_ipaddr+0x20>
 80070f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007168 <netif_do_set_ipaddr+0x88>)
 80070f4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80070f8:	491c      	ldr	r1, [pc, #112]	@ (800716c <netif_do_set_ipaddr+0x8c>)
 80070fa:	481d      	ldr	r0, [pc, #116]	@ (8007170 <netif_do_set_ipaddr+0x90>)
 80070fc:	f004 f9cc 	bl	800b498 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <netif_do_set_ipaddr+0x34>
 8007106:	4b18      	ldr	r3, [pc, #96]	@ (8007168 <netif_do_set_ipaddr+0x88>)
 8007108:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800710c:	4917      	ldr	r1, [pc, #92]	@ (800716c <netif_do_set_ipaddr+0x8c>)
 800710e:	4818      	ldr	r0, [pc, #96]	@ (8007170 <netif_do_set_ipaddr+0x90>)
 8007110:	f004 f9c2 	bl	800b498 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3304      	adds	r3, #4
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d01c      	beq.n	800715c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3304      	adds	r3, #4
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007132:	f107 0314 	add.w	r3, r7, #20
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff ffc3 	bl	80070c4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <netif_do_set_ipaddr+0x6a>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	e000      	b.n	800714c <netif_do_set_ipaddr+0x6c>
 800714a:	2300      	movs	r3, #0
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007150:	2101      	movs	r1, #1
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 f8d2 	bl	80072fc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	0800c668 	.word	0x0800c668
 800716c:	0800c780 	.word	0x0800c780
 8007170:	0800c6b8 	.word	0x0800c6b8

08007174 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3308      	adds	r3, #8
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d00a      	beq.n	80071a4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <netif_do_set_netmask+0x26>
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	e000      	b.n	800719c <netif_do_set_netmask+0x28>
 800719a:	2300      	movs	r3, #0
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b085      	sub	sp, #20
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	330c      	adds	r3, #12
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d00a      	beq.n	80071e2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <netif_do_set_gw+0x26>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	e000      	b.n	80071da <netif_do_set_gw+0x28>
 80071d8:	2300      	movs	r3, #0
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800720c:	4b1c      	ldr	r3, [pc, #112]	@ (8007280 <netif_set_addr+0x90>)
 800720e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007216:	4b1a      	ldr	r3, [pc, #104]	@ (8007280 <netif_set_addr+0x90>)
 8007218:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007220:	4b17      	ldr	r3, [pc, #92]	@ (8007280 <netif_set_addr+0x90>)
 8007222:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <netif_set_addr+0x42>
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <netif_set_addr+0x46>
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <netif_set_addr+0x48>
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]
  if (remove) {
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007240:	f107 0310 	add.w	r3, r7, #16
 8007244:	461a      	mov	r2, r3
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f7ff ff49 	bl	80070e0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff ff8e 	bl	8007174 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff ffa8 	bl	80071b2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d106      	bne.n	8007276 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007268:	f107 0310 	add.w	r3, r7, #16
 800726c:	461a      	mov	r2, r3
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff ff35 	bl	80070e0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007276:	bf00      	nop
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	0800d8c4 	.word	0x0800d8c4

08007284 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800728c:	4a04      	ldr	r2, [pc, #16]	@ (80072a0 <netif_set_default+0x1c>)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	200082fc 	.word	0x200082fc

080072a4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d107      	bne.n	80072c2 <netif_set_up+0x1e>
 80072b2:	4b0f      	ldr	r3, [pc, #60]	@ (80072f0 <netif_set_up+0x4c>)
 80072b4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80072b8:	490e      	ldr	r1, [pc, #56]	@ (80072f4 <netif_set_up+0x50>)
 80072ba:	480f      	ldr	r0, [pc, #60]	@ (80072f8 <netif_set_up+0x54>)
 80072bc:	f004 f8ec 	bl	800b498 <iprintf>
 80072c0:	e013      	b.n	80072ea <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10c      	bne.n	80072ea <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072e2:	2103      	movs	r1, #3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f809 	bl	80072fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	0800c668 	.word	0x0800c668
 80072f4:	0800c7f0 	.word	0x0800c7f0
 80072f8:	0800c6b8 	.word	0x0800c6b8

080072fc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <netif_issue_reports+0x20>
 800730e:	4b18      	ldr	r3, [pc, #96]	@ (8007370 <netif_issue_reports+0x74>)
 8007310:	f240 326d 	movw	r2, #877	@ 0x36d
 8007314:	4917      	ldr	r1, [pc, #92]	@ (8007374 <netif_issue_reports+0x78>)
 8007316:	4818      	ldr	r0, [pc, #96]	@ (8007378 <netif_issue_reports+0x7c>)
 8007318:	f004 f8be 	bl	800b498 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	d01e      	beq.n	8007368 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007330:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007334:	2b00      	cmp	r3, #0
 8007336:	d017      	beq.n	8007368 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d013      	beq.n	800736a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3304      	adds	r3, #4
 8007346:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00e      	beq.n	800736a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f002 fc17 	bl	8009b94 <etharp_request>
 8007366:	e000      	b.n	800736a <netif_issue_reports+0x6e>
    return;
 8007368:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	0800c668 	.word	0x0800c668
 8007374:	0800c80c 	.word	0x0800c80c
 8007378:	0800c6b8 	.word	0x0800c6b8

0800737c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d107      	bne.n	800739a <netif_set_down+0x1e>
 800738a:	4b12      	ldr	r3, [pc, #72]	@ (80073d4 <netif_set_down+0x58>)
 800738c:	f240 329b 	movw	r2, #923	@ 0x39b
 8007390:	4911      	ldr	r1, [pc, #68]	@ (80073d8 <netif_set_down+0x5c>)
 8007392:	4812      	ldr	r0, [pc, #72]	@ (80073dc <netif_set_down+0x60>)
 8007394:	f004 f880 	bl	800b498 <iprintf>
 8007398:	e019      	b.n	80073ce <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d012      	beq.n	80073ce <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 ffa1 	bl	8009310 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	0800c668 	.word	0x0800c668
 80073d8:	0800c830 	.word	0x0800c830
 80073dc:	0800c6b8 	.word	0x0800c6b8

080073e0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d107      	bne.n	80073fe <netif_set_link_up+0x1e>
 80073ee:	4b13      	ldr	r3, [pc, #76]	@ (800743c <netif_set_link_up+0x5c>)
 80073f0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80073f4:	4912      	ldr	r1, [pc, #72]	@ (8007440 <netif_set_link_up+0x60>)
 80073f6:	4813      	ldr	r0, [pc, #76]	@ (8007444 <netif_set_link_up+0x64>)
 80073f8:	f004 f84e 	bl	800b498 <iprintf>
 80073fc:	e01b      	b.n	8007436 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	d114      	bne.n	8007436 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007412:	f043 0304 	orr.w	r3, r3, #4
 8007416:	b2da      	uxtb	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800741e:	2103      	movs	r1, #3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff ff6b 	bl	80072fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d003      	beq.n	8007436 <netif_set_link_up+0x56>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	0800c668 	.word	0x0800c668
 8007440:	0800c850 	.word	0x0800c850
 8007444:	0800c6b8 	.word	0x0800c6b8

08007448 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d107      	bne.n	8007466 <netif_set_link_down+0x1e>
 8007456:	4b11      	ldr	r3, [pc, #68]	@ (800749c <netif_set_link_down+0x54>)
 8007458:	f240 4206 	movw	r2, #1030	@ 0x406
 800745c:	4910      	ldr	r1, [pc, #64]	@ (80074a0 <netif_set_link_down+0x58>)
 800745e:	4811      	ldr	r0, [pc, #68]	@ (80074a4 <netif_set_link_down+0x5c>)
 8007460:	f004 f81a 	bl	800b498 <iprintf>
 8007464:	e017      	b.n	8007496 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d010      	beq.n	8007496 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800747a:	f023 0304 	bic.w	r3, r3, #4
 800747e:	b2da      	uxtb	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <netif_set_link_down+0x4e>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	0800c668 	.word	0x0800c668
 80074a0:	0800c874 	.word	0x0800c874
 80074a4:	0800c6b8 	.word	0x0800c6b8

080074a8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	61da      	str	r2, [r3, #28]
  }
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80074d6:	f06f 030b 	mvn.w	r3, #11
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
	...

080074e8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d013      	beq.n	8007520 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80074f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007530 <netif_get_by_index+0x48>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	e00c      	b.n	800751a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007506:	3301      	adds	r3, #1
 8007508:	b2db      	uxtb	r3, r3
 800750a:	79fa      	ldrb	r2, [r7, #7]
 800750c:	429a      	cmp	r2, r3
 800750e:	d101      	bne.n	8007514 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	e006      	b.n	8007522 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1ef      	bne.n	8007500 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	200082f8 	.word	0x200082f8

08007534 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4611      	mov	r1, r2
 8007540:	461a      	mov	r2, r3
 8007542:	460b      	mov	r3, r1
 8007544:	80fb      	strh	r3, [r7, #6]
 8007546:	4613      	mov	r3, r2
 8007548:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	88fa      	ldrh	r2, [r7, #6]
 800755a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	88ba      	ldrh	r2, [r7, #4]
 8007560:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007562:	8b3b      	ldrh	r3, [r7, #24]
 8007564:	b2da      	uxtb	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	7f3a      	ldrb	r2, [r7, #28]
 800756e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2201      	movs	r2, #1
 8007574:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	73da      	strb	r2, [r3, #15]
}
 800757c:	bf00      	nop
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08c      	sub	sp, #48	@ 0x30
 800758c:	af02      	add	r7, sp, #8
 800758e:	4603      	mov	r3, r0
 8007590:	71fb      	strb	r3, [r7, #7]
 8007592:	460b      	mov	r3, r1
 8007594:	80bb      	strh	r3, [r7, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800759e:	887b      	ldrh	r3, [r7, #2]
 80075a0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80075a4:	d07d      	beq.n	80076a2 <pbuf_alloc+0x11a>
 80075a6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80075aa:	f300 80c6 	bgt.w	800773a <pbuf_alloc+0x1b2>
 80075ae:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80075b2:	d010      	beq.n	80075d6 <pbuf_alloc+0x4e>
 80075b4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80075b8:	f300 80bf 	bgt.w	800773a <pbuf_alloc+0x1b2>
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d002      	beq.n	80075c6 <pbuf_alloc+0x3e>
 80075c0:	2b41      	cmp	r3, #65	@ 0x41
 80075c2:	f040 80ba 	bne.w	800773a <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80075c6:	887a      	ldrh	r2, [r7, #2]
 80075c8:	88bb      	ldrh	r3, [r7, #4]
 80075ca:	4619      	mov	r1, r3
 80075cc:	2000      	movs	r0, #0
 80075ce:	f000 f8cf 	bl	8007770 <pbuf_alloc_reference>
 80075d2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80075d4:	e0bb      	b.n	800774e <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80075de:	88bb      	ldrh	r3, [r7, #4]
 80075e0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80075e2:	2005      	movs	r0, #5
 80075e4:	f7ff fbfe 	bl	8006de4 <memp_malloc>
 80075e8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d107      	bne.n	8007600 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <pbuf_alloc+0x74>
            pbuf_free(p);
 80075f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075f8:	f000 faa8 	bl	8007b4c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	e0a7      	b.n	8007750 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007600:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007602:	3303      	adds	r3, #3
 8007604:	b29b      	uxth	r3, r3
 8007606:	f023 0303 	bic.w	r3, r3, #3
 800760a:	b29b      	uxth	r3, r3
 800760c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007610:	b29b      	uxth	r3, r3
 8007612:	8b7a      	ldrh	r2, [r7, #26]
 8007614:	4293      	cmp	r3, r2
 8007616:	bf28      	it	cs
 8007618:	4613      	movcs	r3, r2
 800761a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800761c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800761e:	3310      	adds	r3, #16
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4413      	add	r3, r2
 8007624:	3303      	adds	r3, #3
 8007626:	f023 0303 	bic.w	r3, r3, #3
 800762a:	4618      	mov	r0, r3
 800762c:	89f9      	ldrh	r1, [r7, #14]
 800762e:	8b7a      	ldrh	r2, [r7, #26]
 8007630:	2300      	movs	r3, #0
 8007632:	9301      	str	r3, [sp, #4]
 8007634:	887b      	ldrh	r3, [r7, #2]
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	460b      	mov	r3, r1
 800763a:	4601      	mov	r1, r0
 800763c:	6938      	ldr	r0, [r7, #16]
 800763e:	f7ff ff79 	bl	8007534 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d006      	beq.n	800765c <pbuf_alloc+0xd4>
 800764e:	4b42      	ldr	r3, [pc, #264]	@ (8007758 <pbuf_alloc+0x1d0>)
 8007650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007654:	4941      	ldr	r1, [pc, #260]	@ (800775c <pbuf_alloc+0x1d4>)
 8007656:	4842      	ldr	r0, [pc, #264]	@ (8007760 <pbuf_alloc+0x1d8>)
 8007658:	f003 ff1e 	bl	800b498 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800765c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800765e:	3303      	adds	r3, #3
 8007660:	f023 0303 	bic.w	r3, r3, #3
 8007664:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007668:	d106      	bne.n	8007678 <pbuf_alloc+0xf0>
 800766a:	4b3b      	ldr	r3, [pc, #236]	@ (8007758 <pbuf_alloc+0x1d0>)
 800766c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007670:	493c      	ldr	r1, [pc, #240]	@ (8007764 <pbuf_alloc+0x1dc>)
 8007672:	483b      	ldr	r0, [pc, #236]	@ (8007760 <pbuf_alloc+0x1d8>)
 8007674:	f003 ff10 	bl	800b498 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
 8007682:	e002      	b.n	800768a <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800768e:	8b7a      	ldrh	r2, [r7, #26]
 8007690:	89fb      	ldrh	r3, [r7, #14]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800769a:	8b7b      	ldrh	r3, [r7, #26]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1a0      	bne.n	80075e2 <pbuf_alloc+0x5a>
      break;
 80076a0:	e055      	b.n	800774e <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80076a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076a4:	3303      	adds	r3, #3
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f023 0303 	bic.w	r3, r3, #3
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	88bb      	ldrh	r3, [r7, #4]
 80076b0:	3303      	adds	r3, #3
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	f023 0303 	bic.w	r3, r3, #3
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	4413      	add	r3, r2
 80076bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80076be:	8b3b      	ldrh	r3, [r7, #24]
 80076c0:	3310      	adds	r3, #16
 80076c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80076c4:	8b3a      	ldrh	r2, [r7, #24]
 80076c6:	88bb      	ldrh	r3, [r7, #4]
 80076c8:	3303      	adds	r3, #3
 80076ca:	f023 0303 	bic.w	r3, r3, #3
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d306      	bcc.n	80076e0 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80076d2:	8afa      	ldrh	r2, [r7, #22]
 80076d4:	88bb      	ldrh	r3, [r7, #4]
 80076d6:	3303      	adds	r3, #3
 80076d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80076dc:	429a      	cmp	r2, r3
 80076de:	d201      	bcs.n	80076e4 <pbuf_alloc+0x15c>
        return NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	e035      	b.n	8007750 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80076e4:	8afb      	ldrh	r3, [r7, #22]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff f9ec 	bl	8006ac4 <mem_malloc>
 80076ec:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <pbuf_alloc+0x170>
        return NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	e02b      	b.n	8007750 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80076f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076fa:	3310      	adds	r3, #16
 80076fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076fe:	4413      	add	r3, r2
 8007700:	3303      	adds	r3, #3
 8007702:	f023 0303 	bic.w	r3, r3, #3
 8007706:	4618      	mov	r0, r3
 8007708:	88b9      	ldrh	r1, [r7, #4]
 800770a:	88ba      	ldrh	r2, [r7, #4]
 800770c:	2300      	movs	r3, #0
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	887b      	ldrh	r3, [r7, #2]
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	460b      	mov	r3, r1
 8007716:	4601      	mov	r1, r0
 8007718:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800771a:	f7ff ff0b 	bl	8007534 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800771e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d010      	beq.n	800774c <pbuf_alloc+0x1c4>
 800772a:	4b0b      	ldr	r3, [pc, #44]	@ (8007758 <pbuf_alloc+0x1d0>)
 800772c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007730:	490d      	ldr	r1, [pc, #52]	@ (8007768 <pbuf_alloc+0x1e0>)
 8007732:	480b      	ldr	r0, [pc, #44]	@ (8007760 <pbuf_alloc+0x1d8>)
 8007734:	f003 feb0 	bl	800b498 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007738:	e008      	b.n	800774c <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800773a:	4b07      	ldr	r3, [pc, #28]	@ (8007758 <pbuf_alloc+0x1d0>)
 800773c:	f240 1227 	movw	r2, #295	@ 0x127
 8007740:	490a      	ldr	r1, [pc, #40]	@ (800776c <pbuf_alloc+0x1e4>)
 8007742:	4807      	ldr	r0, [pc, #28]	@ (8007760 <pbuf_alloc+0x1d8>)
 8007744:	f003 fea8 	bl	800b498 <iprintf>
      return NULL;
 8007748:	2300      	movs	r3, #0
 800774a:	e001      	b.n	8007750 <pbuf_alloc+0x1c8>
      break;
 800774c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007750:	4618      	mov	r0, r3
 8007752:	3728      	adds	r7, #40	@ 0x28
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	0800c898 	.word	0x0800c898
 800775c:	0800c8c8 	.word	0x0800c8c8
 8007760:	0800c8f8 	.word	0x0800c8f8
 8007764:	0800c920 	.word	0x0800c920
 8007768:	0800c954 	.word	0x0800c954
 800776c:	0800c980 	.word	0x0800c980

08007770 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af02      	add	r7, sp, #8
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	807b      	strh	r3, [r7, #2]
 800777c:	4613      	mov	r3, r2
 800777e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007780:	883b      	ldrh	r3, [r7, #0]
 8007782:	2b41      	cmp	r3, #65	@ 0x41
 8007784:	d009      	beq.n	800779a <pbuf_alloc_reference+0x2a>
 8007786:	883b      	ldrh	r3, [r7, #0]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d006      	beq.n	800779a <pbuf_alloc_reference+0x2a>
 800778c:	4b0f      	ldr	r3, [pc, #60]	@ (80077cc <pbuf_alloc_reference+0x5c>)
 800778e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007792:	490f      	ldr	r1, [pc, #60]	@ (80077d0 <pbuf_alloc_reference+0x60>)
 8007794:	480f      	ldr	r0, [pc, #60]	@ (80077d4 <pbuf_alloc_reference+0x64>)
 8007796:	f003 fe7f 	bl	800b498 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800779a:	2004      	movs	r0, #4
 800779c:	f7ff fb22 	bl	8006de4 <memp_malloc>
 80077a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	e00b      	b.n	80077c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80077ac:	8879      	ldrh	r1, [r7, #2]
 80077ae:	887a      	ldrh	r2, [r7, #2]
 80077b0:	2300      	movs	r3, #0
 80077b2:	9301      	str	r3, [sp, #4]
 80077b4:	883b      	ldrh	r3, [r7, #0]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	460b      	mov	r3, r1
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff feb9 	bl	8007534 <pbuf_init_alloced_pbuf>
  return p;
 80077c2:	68fb      	ldr	r3, [r7, #12]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	0800c898 	.word	0x0800c898
 80077d0:	0800c99c 	.word	0x0800c99c
 80077d4:	0800c8f8 	.word	0x0800c8f8

080077d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af02      	add	r7, sp, #8
 80077de:	607b      	str	r3, [r7, #4]
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
 80077e4:	460b      	mov	r3, r1
 80077e6:	81bb      	strh	r3, [r7, #12]
 80077e8:	4613      	mov	r3, r2
 80077ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80077f0:	8a7b      	ldrh	r3, [r7, #18]
 80077f2:	3303      	adds	r3, #3
 80077f4:	f023 0203 	bic.w	r2, r3, #3
 80077f8:	89bb      	ldrh	r3, [r7, #12]
 80077fa:	441a      	add	r2, r3
 80077fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077fe:	429a      	cmp	r2, r3
 8007800:	d901      	bls.n	8007806 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	e018      	b.n	8007838 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d007      	beq.n	800781c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800780c:	8a7b      	ldrh	r3, [r7, #18]
 800780e:	3303      	adds	r3, #3
 8007810:	f023 0303 	bic.w	r3, r3, #3
 8007814:	6a3a      	ldr	r2, [r7, #32]
 8007816:	4413      	add	r3, r2
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	e001      	b.n	8007820 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	89b9      	ldrh	r1, [r7, #12]
 8007824:	89ba      	ldrh	r2, [r7, #12]
 8007826:	2302      	movs	r3, #2
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	897b      	ldrh	r3, [r7, #10]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	460b      	mov	r3, r1
 8007830:	6979      	ldr	r1, [r7, #20]
 8007832:	f7ff fe7f 	bl	8007534 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007836:	687b      	ldr	r3, [r7, #4]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <pbuf_realloc+0x20>
 8007852:	4b3a      	ldr	r3, [pc, #232]	@ (800793c <pbuf_realloc+0xfc>)
 8007854:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007858:	4939      	ldr	r1, [pc, #228]	@ (8007940 <pbuf_realloc+0x100>)
 800785a:	483a      	ldr	r0, [pc, #232]	@ (8007944 <pbuf_realloc+0x104>)
 800785c:	f003 fe1c 	bl	800b498 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	891b      	ldrh	r3, [r3, #8]
 8007864:	887a      	ldrh	r2, [r7, #2]
 8007866:	429a      	cmp	r2, r3
 8007868:	d263      	bcs.n	8007932 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	891a      	ldrh	r2, [r3, #8]
 800786e:	887b      	ldrh	r3, [r7, #2]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007874:	887b      	ldrh	r3, [r7, #2]
 8007876:	817b      	strh	r3, [r7, #10]
  q = p;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800787c:	e018      	b.n	80078b0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	895b      	ldrh	r3, [r3, #10]
 8007882:	897a      	ldrh	r2, [r7, #10]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	891a      	ldrh	r2, [r3, #8]
 800788c:	893b      	ldrh	r3, [r7, #8]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <pbuf_realloc+0x70>
 80078a2:	4b26      	ldr	r3, [pc, #152]	@ (800793c <pbuf_realloc+0xfc>)
 80078a4:	f240 12af 	movw	r2, #431	@ 0x1af
 80078a8:	4927      	ldr	r1, [pc, #156]	@ (8007948 <pbuf_realloc+0x108>)
 80078aa:	4826      	ldr	r0, [pc, #152]	@ (8007944 <pbuf_realloc+0x104>)
 80078ac:	f003 fdf4 	bl	800b498 <iprintf>
  while (rem_len > q->len) {
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	895b      	ldrh	r3, [r3, #10]
 80078b4:	897a      	ldrh	r2, [r7, #10]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d8e1      	bhi.n	800787e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	7b1b      	ldrb	r3, [r3, #12]
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d121      	bne.n	800790a <pbuf_realloc+0xca>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	895b      	ldrh	r3, [r3, #10]
 80078ca:	897a      	ldrh	r2, [r7, #10]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d01c      	beq.n	800790a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	7b5b      	ldrb	r3, [r3, #13]
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d116      	bne.n	800790a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	897b      	ldrh	r3, [r7, #10]
 80078e8:	4413      	add	r3, r2
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	4619      	mov	r1, r3
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f7fe ffec 	bl	80068cc <mem_trim>
 80078f4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d106      	bne.n	800790a <pbuf_realloc+0xca>
 80078fc:	4b0f      	ldr	r3, [pc, #60]	@ (800793c <pbuf_realloc+0xfc>)
 80078fe:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8007902:	4912      	ldr	r1, [pc, #72]	@ (800794c <pbuf_realloc+0x10c>)
 8007904:	480f      	ldr	r0, [pc, #60]	@ (8007944 <pbuf_realloc+0x104>)
 8007906:	f003 fdc7 	bl	800b498 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	897a      	ldrh	r2, [r7, #10]
 800790e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	895a      	ldrh	r2, [r3, #10]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4618      	mov	r0, r3
 8007926:	f000 f911 	bl	8007b4c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e000      	b.n	8007934 <pbuf_realloc+0xf4>
    return;
 8007932:	bf00      	nop

}
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	0800c898 	.word	0x0800c898
 8007940:	0800c9b0 	.word	0x0800c9b0
 8007944:	0800c8f8 	.word	0x0800c8f8
 8007948:	0800c9c8 	.word	0x0800c9c8
 800794c:	0800c9e0 	.word	0x0800c9e0

08007950 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	4613      	mov	r3, r2
 800795c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d106      	bne.n	8007972 <pbuf_add_header_impl+0x22>
 8007964:	4b2b      	ldr	r3, [pc, #172]	@ (8007a14 <pbuf_add_header_impl+0xc4>)
 8007966:	f240 12df 	movw	r2, #479	@ 0x1df
 800796a:	492b      	ldr	r1, [pc, #172]	@ (8007a18 <pbuf_add_header_impl+0xc8>)
 800796c:	482b      	ldr	r0, [pc, #172]	@ (8007a1c <pbuf_add_header_impl+0xcc>)
 800796e:	f003 fd93 	bl	800b498 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <pbuf_add_header_impl+0x30>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800797e:	d301      	bcc.n	8007984 <pbuf_add_header_impl+0x34>
    return 1;
 8007980:	2301      	movs	r3, #1
 8007982:	e043      	b.n	8007a0c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <pbuf_add_header_impl+0x3e>
    return 0;
 800798a:	2300      	movs	r3, #0
 800798c:	e03e      	b.n	8007a0c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	891a      	ldrh	r2, [r3, #8]
 8007996:	8a7b      	ldrh	r3, [r7, #18]
 8007998:	4413      	add	r3, r2
 800799a:	b29b      	uxth	r3, r3
 800799c:	8a7a      	ldrh	r2, [r7, #18]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d901      	bls.n	80079a6 <pbuf_add_header_impl+0x56>
    return 1;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e032      	b.n	8007a0c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	7b1b      	ldrb	r3, [r3, #12]
 80079aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80079ac:	8a3b      	ldrh	r3, [r7, #16]
 80079ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00c      	beq.n	80079d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	425b      	negs	r3, r3
 80079be:	4413      	add	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3310      	adds	r3, #16
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d20d      	bcs.n	80079e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e01d      	b.n	8007a0c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d006      	beq.n	80079e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	425b      	negs	r3, r3
 80079de:	4413      	add	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	e001      	b.n	80079e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e011      	b.n	8007a0c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	895a      	ldrh	r2, [r3, #10]
 80079f2:	8a7b      	ldrh	r3, [r7, #18]
 80079f4:	4413      	add	r3, r2
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	891a      	ldrh	r2, [r3, #8]
 8007a00:	8a7b      	ldrh	r3, [r7, #18]
 8007a02:	4413      	add	r3, r2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	811a      	strh	r2, [r3, #8]


  return 0;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	0800c898 	.word	0x0800c898
 8007a18:	0800c9fc 	.word	0x0800c9fc
 8007a1c:	0800c8f8 	.word	0x0800c8f8

08007a20 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff ff8e 	bl	8007950 <pbuf_add_header_impl>
 8007a34:	4603      	mov	r3, r0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d106      	bne.n	8007a5e <pbuf_remove_header+0x1e>
 8007a50:	4b20      	ldr	r3, [pc, #128]	@ (8007ad4 <pbuf_remove_header+0x94>)
 8007a52:	f240 224b 	movw	r2, #587	@ 0x24b
 8007a56:	4920      	ldr	r1, [pc, #128]	@ (8007ad8 <pbuf_remove_header+0x98>)
 8007a58:	4820      	ldr	r0, [pc, #128]	@ (8007adc <pbuf_remove_header+0x9c>)
 8007a5a:	f003 fd1d 	bl	800b498 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <pbuf_remove_header+0x2c>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a6a:	d301      	bcc.n	8007a70 <pbuf_remove_header+0x30>
    return 1;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e02c      	b.n	8007aca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <pbuf_remove_header+0x3a>
    return 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e027      	b.n	8007aca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	895b      	ldrh	r3, [r3, #10]
 8007a82:	89fa      	ldrh	r2, [r7, #14]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d908      	bls.n	8007a9a <pbuf_remove_header+0x5a>
 8007a88:	4b12      	ldr	r3, [pc, #72]	@ (8007ad4 <pbuf_remove_header+0x94>)
 8007a8a:	f240 2255 	movw	r2, #597	@ 0x255
 8007a8e:	4914      	ldr	r1, [pc, #80]	@ (8007ae0 <pbuf_remove_header+0xa0>)
 8007a90:	4812      	ldr	r0, [pc, #72]	@ (8007adc <pbuf_remove_header+0x9c>)
 8007a92:	f003 fd01 	bl	800b498 <iprintf>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e017      	b.n	8007aca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	441a      	add	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	895a      	ldrh	r2, [r3, #10]
 8007ab0:	89fb      	ldrh	r3, [r7, #14]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	891a      	ldrh	r2, [r3, #8]
 8007abe:	89fb      	ldrh	r3, [r7, #14]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	0800c898 	.word	0x0800c898
 8007ad8:	0800c9fc 	.word	0x0800c9fc
 8007adc:	0800c8f8 	.word	0x0800c8f8
 8007ae0:	0800ca08 	.word	0x0800ca08

08007ae4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	807b      	strh	r3, [r7, #2]
 8007af0:	4613      	mov	r3, r2
 8007af2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007af4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	da08      	bge.n	8007b0e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007afc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b00:	425b      	negs	r3, r3
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff ff9b 	bl	8007a40 <pbuf_remove_header>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	e007      	b.n	8007b1e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007b0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b12:	787a      	ldrb	r2, [r7, #1]
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff ff1a 	bl	8007950 <pbuf_add_header_impl>
 8007b1c:	4603      	mov	r3, r0
  }
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b082      	sub	sp, #8
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007b32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b36:	2201      	movs	r2, #1
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff ffd2 	bl	8007ae4 <pbuf_header_impl>
 8007b40:	4603      	mov	r3, r0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d106      	bne.n	8007b6e <pbuf_free+0x22>
 8007b60:	4b38      	ldr	r3, [pc, #224]	@ (8007c44 <pbuf_free+0xf8>)
 8007b62:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007b66:	4938      	ldr	r1, [pc, #224]	@ (8007c48 <pbuf_free+0xfc>)
 8007b68:	4838      	ldr	r0, [pc, #224]	@ (8007c4c <pbuf_free+0x100>)
 8007b6a:	f003 fc95 	bl	800b498 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e063      	b.n	8007c3a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007b76:	e05c      	b.n	8007c32 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	7b9b      	ldrb	r3, [r3, #14]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <pbuf_free+0x42>
 8007b80:	4b30      	ldr	r3, [pc, #192]	@ (8007c44 <pbuf_free+0xf8>)
 8007b82:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007b86:	4932      	ldr	r1, [pc, #200]	@ (8007c50 <pbuf_free+0x104>)
 8007b88:	4830      	ldr	r0, [pc, #192]	@ (8007c4c <pbuf_free+0x100>)
 8007b8a:	f003 fc85 	bl	800b498 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	7b9b      	ldrb	r3, [r3, #14]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	739a      	strb	r2, [r3, #14]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	7b9b      	ldrb	r3, [r3, #14]
 8007b9e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007ba0:	7dbb      	ldrb	r3, [r7, #22]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d143      	bne.n	8007c2e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	7b1b      	ldrb	r3, [r3, #12]
 8007bb0:	f003 030f 	and.w	r3, r3, #15
 8007bb4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	7b5b      	ldrb	r3, [r3, #13]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d011      	beq.n	8007be6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d106      	bne.n	8007bdc <pbuf_free+0x90>
 8007bce:	4b1d      	ldr	r3, [pc, #116]	@ (8007c44 <pbuf_free+0xf8>)
 8007bd0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007bd4:	491f      	ldr	r1, [pc, #124]	@ (8007c54 <pbuf_free+0x108>)
 8007bd6:	481d      	ldr	r0, [pc, #116]	@ (8007c4c <pbuf_free+0x100>)
 8007bd8:	f003 fc5e 	bl	800b498 <iprintf>
        pc->custom_free_function(p);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	4798      	blx	r3
 8007be4:	e01d      	b.n	8007c22 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d104      	bne.n	8007bf6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	2005      	movs	r0, #5
 8007bf0:	f7ff f968 	bl	8006ec4 <memp_free>
 8007bf4:	e015      	b.n	8007c22 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d104      	bne.n	8007c06 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	2004      	movs	r0, #4
 8007c00:	f7ff f960 	bl	8006ec4 <memp_free>
 8007c04:	e00d      	b.n	8007c22 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d103      	bne.n	8007c14 <pbuf_free+0xc8>
          mem_free(p);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7fe fdf3 	bl	80067f8 <mem_free>
 8007c12:	e006      	b.n	8007c22 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007c14:	4b0b      	ldr	r3, [pc, #44]	@ (8007c44 <pbuf_free+0xf8>)
 8007c16:	f240 320f 	movw	r2, #783	@ 0x30f
 8007c1a:	490f      	ldr	r1, [pc, #60]	@ (8007c58 <pbuf_free+0x10c>)
 8007c1c:	480b      	ldr	r0, [pc, #44]	@ (8007c4c <pbuf_free+0x100>)
 8007c1e:	f003 fc3b 	bl	800b498 <iprintf>
        }
      }
      count++;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
 8007c24:	3301      	adds	r3, #1
 8007c26:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	607b      	str	r3, [r7, #4]
 8007c2c:	e001      	b.n	8007c32 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d19f      	bne.n	8007b78 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	0800c898 	.word	0x0800c898
 8007c48:	0800c9fc 	.word	0x0800c9fc
 8007c4c:	0800c8f8 	.word	0x0800c8f8
 8007c50:	0800ca28 	.word	0x0800ca28
 8007c54:	0800ca40 	.word	0x0800ca40
 8007c58:	0800ca64 	.word	0x0800ca64

08007c5c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007c68:	e005      	b.n	8007c76 <pbuf_clen+0x1a>
    ++len;
 8007c6a:	89fb      	ldrh	r3, [r7, #14]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1f6      	bne.n	8007c6a <pbuf_clen+0xe>
  }
  return len;
 8007c7c:	89fb      	ldrh	r3, [r7, #14]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
	...

08007c8c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d010      	beq.n	8007cbc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	7b9b      	ldrb	r3, [r3, #14]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	7b9b      	ldrb	r3, [r3, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <pbuf_ref+0x30>
 8007cae:	4b05      	ldr	r3, [pc, #20]	@ (8007cc4 <pbuf_ref+0x38>)
 8007cb0:	f240 3242 	movw	r2, #834	@ 0x342
 8007cb4:	4904      	ldr	r1, [pc, #16]	@ (8007cc8 <pbuf_ref+0x3c>)
 8007cb6:	4805      	ldr	r0, [pc, #20]	@ (8007ccc <pbuf_ref+0x40>)
 8007cb8:	f003 fbee 	bl	800b498 <iprintf>
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	0800c898 	.word	0x0800c898
 8007cc8:	0800ca78 	.word	0x0800ca78
 8007ccc:	0800c8f8 	.word	0x0800c8f8

08007cd0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <pbuf_cat+0x16>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d107      	bne.n	8007cf6 <pbuf_cat+0x26>
 8007ce6:	4b20      	ldr	r3, [pc, #128]	@ (8007d68 <pbuf_cat+0x98>)
 8007ce8:	f240 3259 	movw	r2, #857	@ 0x359
 8007cec:	491f      	ldr	r1, [pc, #124]	@ (8007d6c <pbuf_cat+0x9c>)
 8007cee:	4820      	ldr	r0, [pc, #128]	@ (8007d70 <pbuf_cat+0xa0>)
 8007cf0:	f003 fbd2 	bl	800b498 <iprintf>
 8007cf4:	e034      	b.n	8007d60 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	e00a      	b.n	8007d12 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	891a      	ldrh	r2, [r3, #8]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	891b      	ldrh	r3, [r3, #8]
 8007d04:	4413      	add	r3, r2
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1f0      	bne.n	8007cfc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	891a      	ldrh	r2, [r3, #8]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	895b      	ldrh	r3, [r3, #10]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d006      	beq.n	8007d34 <pbuf_cat+0x64>
 8007d26:	4b10      	ldr	r3, [pc, #64]	@ (8007d68 <pbuf_cat+0x98>)
 8007d28:	f240 3262 	movw	r2, #866	@ 0x362
 8007d2c:	4911      	ldr	r1, [pc, #68]	@ (8007d74 <pbuf_cat+0xa4>)
 8007d2e:	4810      	ldr	r0, [pc, #64]	@ (8007d70 <pbuf_cat+0xa0>)
 8007d30:	f003 fbb2 	bl	800b498 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d006      	beq.n	8007d4a <pbuf_cat+0x7a>
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d68 <pbuf_cat+0x98>)
 8007d3e:	f240 3263 	movw	r2, #867	@ 0x363
 8007d42:	490d      	ldr	r1, [pc, #52]	@ (8007d78 <pbuf_cat+0xa8>)
 8007d44:	480a      	ldr	r0, [pc, #40]	@ (8007d70 <pbuf_cat+0xa0>)
 8007d46:	f003 fba7 	bl	800b498 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	891a      	ldrh	r2, [r3, #8]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	891b      	ldrh	r3, [r3, #8]
 8007d52:	4413      	add	r3, r2
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	0800c898 	.word	0x0800c898
 8007d6c:	0800ca8c 	.word	0x0800ca8c
 8007d70:	0800c8f8 	.word	0x0800c8f8
 8007d74:	0800cac4 	.word	0x0800cac4
 8007d78:	0800caf4 	.word	0x0800caf4

08007d7c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff ffa1 	bl	8007cd0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007d8e:	6838      	ldr	r0, [r7, #0]
 8007d90:	f7ff ff7c 	bl	8007c8c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007da6:	2300      	movs	r3, #0
 8007da8:	617b      	str	r3, [r7, #20]
 8007daa:	2300      	movs	r3, #0
 8007dac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d008      	beq.n	8007dc6 <pbuf_copy+0x2a>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <pbuf_copy+0x2a>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	891a      	ldrh	r2, [r3, #8]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	891b      	ldrh	r3, [r3, #8]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d209      	bcs.n	8007dda <pbuf_copy+0x3e>
 8007dc6:	4b57      	ldr	r3, [pc, #348]	@ (8007f24 <pbuf_copy+0x188>)
 8007dc8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007dcc:	4956      	ldr	r1, [pc, #344]	@ (8007f28 <pbuf_copy+0x18c>)
 8007dce:	4857      	ldr	r0, [pc, #348]	@ (8007f2c <pbuf_copy+0x190>)
 8007dd0:	f003 fb62 	bl	800b498 <iprintf>
 8007dd4:	f06f 030f 	mvn.w	r3, #15
 8007dd8:	e09f      	b.n	8007f1a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	895b      	ldrh	r3, [r3, #10]
 8007dde:	461a      	mov	r2, r3
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	895b      	ldrh	r3, [r3, #10]
 8007de8:	4619      	mov	r1, r3
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	1acb      	subs	r3, r1, r3
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d306      	bcc.n	8007e00 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	895b      	ldrh	r3, [r3, #10]
 8007df6:	461a      	mov	r2, r3
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	e005      	b.n	8007e0c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	895b      	ldrh	r3, [r3, #10]
 8007e04:	461a      	mov	r2, r3
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	18d0      	adds	r0, r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	f003 fc15 	bl	800b64e <memcpy>
    offset_to += len;
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	4413      	add	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	895b      	ldrh	r3, [r3, #10]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d906      	bls.n	8007e4e <pbuf_copy+0xb2>
 8007e40:	4b38      	ldr	r3, [pc, #224]	@ (8007f24 <pbuf_copy+0x188>)
 8007e42:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007e46:	493a      	ldr	r1, [pc, #232]	@ (8007f30 <pbuf_copy+0x194>)
 8007e48:	4838      	ldr	r0, [pc, #224]	@ (8007f2c <pbuf_copy+0x190>)
 8007e4a:	f003 fb25 	bl	800b498 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	895b      	ldrh	r3, [r3, #10]
 8007e52:	461a      	mov	r2, r3
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d906      	bls.n	8007e68 <pbuf_copy+0xcc>
 8007e5a:	4b32      	ldr	r3, [pc, #200]	@ (8007f24 <pbuf_copy+0x188>)
 8007e5c:	f240 32da 	movw	r2, #986	@ 0x3da
 8007e60:	4934      	ldr	r1, [pc, #208]	@ (8007f34 <pbuf_copy+0x198>)
 8007e62:	4832      	ldr	r0, [pc, #200]	@ (8007f2c <pbuf_copy+0x190>)
 8007e64:	f003 fb18 	bl	800b498 <iprintf>
    if (offset_from >= p_from->len) {
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	895b      	ldrh	r3, [r3, #10]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d304      	bcc.n	8007e7e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	895b      	ldrh	r3, [r3, #10]
 8007e82:	461a      	mov	r2, r3
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d114      	bne.n	8007eb4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10c      	bne.n	8007eb4 <pbuf_copy+0x118>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d009      	beq.n	8007eb4 <pbuf_copy+0x118>
 8007ea0:	4b20      	ldr	r3, [pc, #128]	@ (8007f24 <pbuf_copy+0x188>)
 8007ea2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007ea6:	4924      	ldr	r1, [pc, #144]	@ (8007f38 <pbuf_copy+0x19c>)
 8007ea8:	4820      	ldr	r0, [pc, #128]	@ (8007f2c <pbuf_copy+0x190>)
 8007eaa:	f003 faf5 	bl	800b498 <iprintf>
 8007eae:	f06f 030f 	mvn.w	r3, #15
 8007eb2:	e032      	b.n	8007f1a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d013      	beq.n	8007ee2 <pbuf_copy+0x146>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	895a      	ldrh	r2, [r3, #10]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	891b      	ldrh	r3, [r3, #8]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d10d      	bne.n	8007ee2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <pbuf_copy+0x146>
 8007ece:	4b15      	ldr	r3, [pc, #84]	@ (8007f24 <pbuf_copy+0x188>)
 8007ed0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007ed4:	4919      	ldr	r1, [pc, #100]	@ (8007f3c <pbuf_copy+0x1a0>)
 8007ed6:	4815      	ldr	r0, [pc, #84]	@ (8007f2c <pbuf_copy+0x190>)
 8007ed8:	f003 fade 	bl	800b498 <iprintf>
 8007edc:	f06f 0305 	mvn.w	r3, #5
 8007ee0:	e01b      	b.n	8007f1a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d013      	beq.n	8007f10 <pbuf_copy+0x174>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	895a      	ldrh	r2, [r3, #10]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	891b      	ldrh	r3, [r3, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d10d      	bne.n	8007f10 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d009      	beq.n	8007f10 <pbuf_copy+0x174>
 8007efc:	4b09      	ldr	r3, [pc, #36]	@ (8007f24 <pbuf_copy+0x188>)
 8007efe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007f02:	490e      	ldr	r1, [pc, #56]	@ (8007f3c <pbuf_copy+0x1a0>)
 8007f04:	4809      	ldr	r0, [pc, #36]	@ (8007f2c <pbuf_copy+0x190>)
 8007f06:	f003 fac7 	bl	800b498 <iprintf>
 8007f0a:	f06f 0305 	mvn.w	r3, #5
 8007f0e:	e004      	b.n	8007f1a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f47f af61 	bne.w	8007dda <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	0800c898 	.word	0x0800c898
 8007f28:	0800cb40 	.word	0x0800cb40
 8007f2c:	0800c8f8 	.word	0x0800c8f8
 8007f30:	0800cb70 	.word	0x0800cb70
 8007f34:	0800cb88 	.word	0x0800cb88
 8007f38:	0800cba4 	.word	0x0800cba4
 8007f3c:	0800cbb4 	.word	0x0800cbb4

08007f40 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d109      	bne.n	8007f70 <pbuf_take+0x30>
 8007f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8008048 <pbuf_take+0x108>)
 8007f5e:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8007f62:	493a      	ldr	r1, [pc, #232]	@ (800804c <pbuf_take+0x10c>)
 8007f64:	483a      	ldr	r0, [pc, #232]	@ (8008050 <pbuf_take+0x110>)
 8007f66:	f003 fa97 	bl	800b498 <iprintf>
 8007f6a:	f06f 030f 	mvn.w	r3, #15
 8007f6e:	e067      	b.n	8008040 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d109      	bne.n	8007f8a <pbuf_take+0x4a>
 8007f76:	4b34      	ldr	r3, [pc, #208]	@ (8008048 <pbuf_take+0x108>)
 8007f78:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8007f7c:	4935      	ldr	r1, [pc, #212]	@ (8008054 <pbuf_take+0x114>)
 8007f7e:	4834      	ldr	r0, [pc, #208]	@ (8008050 <pbuf_take+0x110>)
 8007f80:	f003 fa8a 	bl	800b498 <iprintf>
 8007f84:	f06f 030f 	mvn.w	r3, #15
 8007f88:	e05a      	b.n	8008040 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	891b      	ldrh	r3, [r3, #8]
 8007f8e:	88fa      	ldrh	r2, [r7, #6]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d909      	bls.n	8007fa8 <pbuf_take+0x68>
 8007f94:	4b2c      	ldr	r3, [pc, #176]	@ (8008048 <pbuf_take+0x108>)
 8007f96:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8007f9a:	492f      	ldr	r1, [pc, #188]	@ (8008058 <pbuf_take+0x118>)
 8007f9c:	482c      	ldr	r0, [pc, #176]	@ (8008050 <pbuf_take+0x110>)
 8007f9e:	f003 fa7b 	bl	800b498 <iprintf>
 8007fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa6:	e04b      	b.n	8008040 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <pbuf_take+0x7e>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <pbuf_take+0x7e>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	891b      	ldrh	r3, [r3, #8]
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d902      	bls.n	8007fc4 <pbuf_take+0x84>
    return ERR_ARG;
 8007fbe:	f06f 030f 	mvn.w	r3, #15
 8007fc2:	e03d      	b.n	8008040 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	61fb      	str	r3, [r7, #28]
 8007fc8:	e028      	b.n	800801c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d106      	bne.n	8007fde <pbuf_take+0x9e>
 8007fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8008048 <pbuf_take+0x108>)
 8007fd2:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8007fd6:	4921      	ldr	r1, [pc, #132]	@ (800805c <pbuf_take+0x11c>)
 8007fd8:	481d      	ldr	r0, [pc, #116]	@ (8008050 <pbuf_take+0x110>)
 8007fda:	f003 fa5d 	bl	800b498 <iprintf>
    buf_copy_len = total_copy_len;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	895b      	ldrh	r3, [r3, #10]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d902      	bls.n	8007ff4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	895b      	ldrh	r3, [r3, #10]
 8007ff2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	6858      	ldr	r0, [r3, #4]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	4619      	mov	r1, r3
 8008002:	f003 fb24 	bl	800b64e <memcpy>
    total_copy_len -= buf_copy_len;
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	4413      	add	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	61fb      	str	r3, [r7, #28]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1d3      	bne.n	8007fca <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d103      	bne.n	8008030 <pbuf_take+0xf0>
 8008028:	88fb      	ldrh	r3, [r7, #6]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	429a      	cmp	r2, r3
 800802e:	d006      	beq.n	800803e <pbuf_take+0xfe>
 8008030:	4b05      	ldr	r3, [pc, #20]	@ (8008048 <pbuf_take+0x108>)
 8008032:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8008036:	490a      	ldr	r1, [pc, #40]	@ (8008060 <pbuf_take+0x120>)
 8008038:	4805      	ldr	r0, [pc, #20]	@ (8008050 <pbuf_take+0x110>)
 800803a:	f003 fa2d 	bl	800b498 <iprintf>
  return ERR_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3720      	adds	r7, #32
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	0800c898 	.word	0x0800c898
 800804c:	0800cc70 	.word	0x0800cc70
 8008050:	0800c8f8 	.word	0x0800c8f8
 8008054:	0800cc88 	.word	0x0800cc88
 8008058:	0800cca4 	.word	0x0800cca4
 800805c:	0800ccc4 	.word	0x0800ccc4
 8008060:	0800ccdc 	.word	0x0800ccdc

08008064 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	603a      	str	r2, [r7, #0]
 800806e:	71fb      	strb	r3, [r7, #7]
 8008070:	460b      	mov	r3, r1
 8008072:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	8919      	ldrh	r1, [r3, #8]
 8008078:	88ba      	ldrh	r2, [r7, #4]
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff fa83 	bl	8007588 <pbuf_alloc>
 8008082:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <pbuf_clone+0x2a>
    return NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	e011      	b.n	80080b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f7ff fe83 	bl	8007d9c <pbuf_copy>
 8008096:	4603      	mov	r3, r0
 8008098:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800809a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d006      	beq.n	80080b0 <pbuf_clone+0x4c>
 80080a2:	4b06      	ldr	r3, [pc, #24]	@ (80080bc <pbuf_clone+0x58>)
 80080a4:	f240 5224 	movw	r2, #1316	@ 0x524
 80080a8:	4905      	ldr	r1, [pc, #20]	@ (80080c0 <pbuf_clone+0x5c>)
 80080aa:	4806      	ldr	r0, [pc, #24]	@ (80080c4 <pbuf_clone+0x60>)
 80080ac:	f003 f9f4 	bl	800b498 <iprintf>
  return q;
 80080b0:	68fb      	ldr	r3, [r7, #12]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	0800c898 	.word	0x0800c898
 80080c0:	0800cd0c 	.word	0x0800cd0c
 80080c4:	0800c8f8 	.word	0x0800c8f8

080080c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80080d4:	2003      	movs	r0, #3
 80080d6:	f7fe fe85 	bl	8006de4 <memp_malloc>
 80080da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d109      	bne.n	80080f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d151      	bne.n	800818c <sys_timeout_abs+0xc4>
 80080e8:	4b2a      	ldr	r3, [pc, #168]	@ (8008194 <sys_timeout_abs+0xcc>)
 80080ea:	22be      	movs	r2, #190	@ 0xbe
 80080ec:	492a      	ldr	r1, [pc, #168]	@ (8008198 <sys_timeout_abs+0xd0>)
 80080ee:	482b      	ldr	r0, [pc, #172]	@ (800819c <sys_timeout_abs+0xd4>)
 80080f0:	f003 f9d2 	bl	800b498 <iprintf>
    return;
 80080f4:	e04a      	b.n	800818c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800810e:	4b24      	ldr	r3, [pc, #144]	@ (80081a0 <sys_timeout_abs+0xd8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d103      	bne.n	800811e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8008116:	4a22      	ldr	r2, [pc, #136]	@ (80081a0 <sys_timeout_abs+0xd8>)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	6013      	str	r3, [r2, #0]
    return;
 800811c:	e037      	b.n	800818e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	4b1f      	ldr	r3, [pc, #124]	@ (80081a0 <sys_timeout_abs+0xd8>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	0fdb      	lsrs	r3, r3, #31
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d007      	beq.n	8008146 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8008136:	4b1a      	ldr	r3, [pc, #104]	@ (80081a0 <sys_timeout_abs+0xd8>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800813e:	4a18      	ldr	r2, [pc, #96]	@ (80081a0 <sys_timeout_abs+0xd8>)
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	e023      	b.n	800818e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8008146:	4b16      	ldr	r3, [pc, #88]	@ (80081a0 <sys_timeout_abs+0xd8>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	e01a      	b.n	8008184 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <sys_timeout_abs+0xa6>
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	0fdb      	lsrs	r3, r3, #31
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d007      	beq.n	800817e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	601a      	str	r2, [r3, #0]
        break;
 800817c:	e007      	b.n	800818e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	617b      	str	r3, [r7, #20]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e1      	bne.n	800814e <sys_timeout_abs+0x86>
 800818a:	e000      	b.n	800818e <sys_timeout_abs+0xc6>
    return;
 800818c:	bf00      	nop
      }
    }
  }
}
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	0800cd20 	.word	0x0800cd20
 8008198:	0800cd54 	.word	0x0800cd54
 800819c:	0800cd94 	.word	0x0800cd94
 80081a0:	20008304 	.word	0x20008304

080081a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	4798      	blx	r3

  now = sys_now();
 80081b6:	f7fd ffa5 	bl	8006104 <sys_now>
 80081ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008200 <lwip_cyclic_timer+0x5c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4413      	add	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	0fdb      	lsrs	r3, r3, #31
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d009      	beq.n	80081ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	4413      	add	r3, r2
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	4907      	ldr	r1, [pc, #28]	@ (8008204 <lwip_cyclic_timer+0x60>)
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff ff6e 	bl	80080c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80081ec:	e004      	b.n	80081f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	4904      	ldr	r1, [pc, #16]	@ (8008204 <lwip_cyclic_timer+0x60>)
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f7ff ff68 	bl	80080c8 <sys_timeout_abs>
}
 80081f8:	bf00      	nop
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20008308 	.word	0x20008308
 8008204:	080081a5 	.word	0x080081a5

08008208 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800820e:	2300      	movs	r3, #0
 8008210:	607b      	str	r3, [r7, #4]
 8008212:	e00e      	b.n	8008232 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8008214:	4a0b      	ldr	r2, [pc, #44]	@ (8008244 <sys_timeouts_init+0x3c>)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	4a08      	ldr	r2, [pc, #32]	@ (8008244 <sys_timeouts_init+0x3c>)
 8008222:	4413      	add	r3, r2
 8008224:	461a      	mov	r2, r3
 8008226:	4908      	ldr	r1, [pc, #32]	@ (8008248 <sys_timeouts_init+0x40>)
 8008228:	f000 f810 	bl	800824c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3301      	adds	r3, #1
 8008230:	607b      	str	r3, [r7, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d9ed      	bls.n	8008214 <sys_timeouts_init+0xc>
  }
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	0800d8b4 	.word	0x0800d8b4
 8008248:	080081a5 	.word	0x080081a5

0800824c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825e:	d306      	bcc.n	800826e <sys_timeout+0x22>
 8008260:	4b0a      	ldr	r3, [pc, #40]	@ (800828c <sys_timeout+0x40>)
 8008262:	f240 1229 	movw	r2, #297	@ 0x129
 8008266:	490a      	ldr	r1, [pc, #40]	@ (8008290 <sys_timeout+0x44>)
 8008268:	480a      	ldr	r0, [pc, #40]	@ (8008294 <sys_timeout+0x48>)
 800826a:	f003 f915 	bl	800b498 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800826e:	f7fd ff49 	bl	8006104 <sys_now>
 8008272:	4602      	mov	r2, r0
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	68b9      	ldr	r1, [r7, #8]
 800827e:	6978      	ldr	r0, [r7, #20]
 8008280:	f7ff ff22 	bl	80080c8 <sys_timeout_abs>
#endif
}
 8008284:	bf00      	nop
 8008286:	3718      	adds	r7, #24
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	0800cd20 	.word	0x0800cd20
 8008290:	0800cdbc 	.word	0x0800cdbc
 8008294:	0800cd94 	.word	0x0800cd94

08008298 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800829e:	f7fd ff31 	bl	8006104 <sys_now>
 80082a2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80082a4:	4b17      	ldr	r3, [pc, #92]	@ (8008304 <sys_check_timeouts+0x6c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d022      	beq.n	80082f6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	0fdb      	lsrs	r3, r3, #31
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d11a      	bne.n	80082fa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008304 <sys_check_timeouts+0x6c>)
 80082ca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008308 <sys_check_timeouts+0x70>)
 80082de:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	2003      	movs	r0, #3
 80082e4:	f7fe fdee 	bl	8006ec4 <memp_free>
    if (handler != NULL) {
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0da      	beq.n	80082a4 <sys_check_timeouts+0xc>
      handler(arg);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6838      	ldr	r0, [r7, #0]
 80082f2:	4798      	blx	r3
  do {
 80082f4:	e7d6      	b.n	80082a4 <sys_check_timeouts+0xc>
      return;
 80082f6:	bf00      	nop
 80082f8:	e000      	b.n	80082fc <sys_check_timeouts+0x64>
      return;
 80082fa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20008304 	.word	0x20008304
 8008308:	20008308 	.word	0x20008308

0800830c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008310:	f002 ffc2 	bl	800b298 <rand>
 8008314:	4603      	mov	r3, r0
 8008316:	b29b      	uxth	r3, r3
 8008318:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800831c:	b29b      	uxth	r3, r3
 800831e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008322:	b29a      	uxth	r2, r3
 8008324:	4b01      	ldr	r3, [pc, #4]	@ (800832c <udp_init+0x20>)
 8008326:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008328:	bf00      	nop
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20000020 	.word	0x20000020

08008330 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800833a:	4b17      	ldr	r3, [pc, #92]	@ (8008398 <udp_new_port+0x68>)
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	b291      	uxth	r1, r2
 8008342:	4a15      	ldr	r2, [pc, #84]	@ (8008398 <udp_new_port+0x68>)
 8008344:	8011      	strh	r1, [r2, #0]
 8008346:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800834a:	4293      	cmp	r3, r2
 800834c:	d103      	bne.n	8008356 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800834e:	4b12      	ldr	r3, [pc, #72]	@ (8008398 <udp_new_port+0x68>)
 8008350:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8008354:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008356:	4b11      	ldr	r3, [pc, #68]	@ (800839c <udp_new_port+0x6c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	e011      	b.n	8008382 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	8a5a      	ldrh	r2, [r3, #18]
 8008362:	4b0d      	ldr	r3, [pc, #52]	@ (8008398 <udp_new_port+0x68>)
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d108      	bne.n	800837c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	3301      	adds	r3, #1
 800836e:	80fb      	strh	r3, [r7, #6]
 8008370:	88fb      	ldrh	r3, [r7, #6]
 8008372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008376:	d3e0      	bcc.n	800833a <udp_new_port+0xa>
        return 0;
 8008378:	2300      	movs	r3, #0
 800837a:	e007      	b.n	800838c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	603b      	str	r3, [r7, #0]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1ea      	bne.n	800835e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8008388:	4b03      	ldr	r3, [pc, #12]	@ (8008398 <udp_new_port+0x68>)
 800838a:	881b      	ldrh	r3, [r3, #0]
}
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	20000020 	.word	0x20000020
 800839c:	2000830c 	.word	0x2000830c

080083a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4613      	mov	r3, r2
 80083ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d105      	bne.n	80083c0 <udp_input_local_match+0x20>
 80083b4:	4b27      	ldr	r3, [pc, #156]	@ (8008454 <udp_input_local_match+0xb4>)
 80083b6:	2287      	movs	r2, #135	@ 0x87
 80083b8:	4927      	ldr	r1, [pc, #156]	@ (8008458 <udp_input_local_match+0xb8>)
 80083ba:	4828      	ldr	r0, [pc, #160]	@ (800845c <udp_input_local_match+0xbc>)
 80083bc:	f003 f86c 	bl	800b498 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d105      	bne.n	80083d2 <udp_input_local_match+0x32>
 80083c6:	4b23      	ldr	r3, [pc, #140]	@ (8008454 <udp_input_local_match+0xb4>)
 80083c8:	2288      	movs	r2, #136	@ 0x88
 80083ca:	4925      	ldr	r1, [pc, #148]	@ (8008460 <udp_input_local_match+0xc0>)
 80083cc:	4823      	ldr	r0, [pc, #140]	@ (800845c <udp_input_local_match+0xbc>)
 80083ce:	f003 f863 	bl	800b498 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	7a1b      	ldrb	r3, [r3, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00b      	beq.n	80083f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	7a1a      	ldrb	r2, [r3, #8]
 80083de:	4b21      	ldr	r3, [pc, #132]	@ (8008464 <udp_input_local_match+0xc4>)
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083e6:	3301      	adds	r3, #1
 80083e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d001      	beq.n	80083f2 <udp_input_local_match+0x52>
    return 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e02b      	b.n	800844a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d018      	beq.n	800842a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d013      	beq.n	8008426 <udp_input_local_match+0x86>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00f      	beq.n	8008426 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008406:	4b17      	ldr	r3, [pc, #92]	@ (8008464 <udp_input_local_match+0xc4>)
 8008408:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840e:	d00a      	beq.n	8008426 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	4b13      	ldr	r3, [pc, #76]	@ (8008464 <udp_input_local_match+0xc4>)
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	405a      	eors	r2, r3
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	3308      	adds	r3, #8
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008422:	2b00      	cmp	r3, #0
 8008424:	d110      	bne.n	8008448 <udp_input_local_match+0xa8>
          return 1;
 8008426:	2301      	movs	r3, #1
 8008428:	e00f      	b.n	800844a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d009      	beq.n	8008444 <udp_input_local_match+0xa4>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d005      	beq.n	8008444 <udp_input_local_match+0xa4>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4b09      	ldr	r3, [pc, #36]	@ (8008464 <udp_input_local_match+0xc4>)
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	429a      	cmp	r2, r3
 8008442:	d101      	bne.n	8008448 <udp_input_local_match+0xa8>
        return 1;
 8008444:	2301      	movs	r3, #1
 8008446:	e000      	b.n	800844a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	0800ce08 	.word	0x0800ce08
 8008458:	0800ce38 	.word	0x0800ce38
 800845c:	0800ce5c 	.word	0x0800ce5c
 8008460:	0800ce84 	.word	0x0800ce84
 8008464:	200052a8 	.word	0x200052a8

08008468 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8008468:	b590      	push	{r4, r7, lr}
 800846a:	b08d      	sub	sp, #52	@ 0x34
 800846c:	af02      	add	r7, sp, #8
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d105      	bne.n	8008488 <udp_input+0x20>
 800847c:	4b7c      	ldr	r3, [pc, #496]	@ (8008670 <udp_input+0x208>)
 800847e:	22cf      	movs	r2, #207	@ 0xcf
 8008480:	497c      	ldr	r1, [pc, #496]	@ (8008674 <udp_input+0x20c>)
 8008482:	487d      	ldr	r0, [pc, #500]	@ (8008678 <udp_input+0x210>)
 8008484:	f003 f808 	bl	800b498 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d105      	bne.n	800849a <udp_input+0x32>
 800848e:	4b78      	ldr	r3, [pc, #480]	@ (8008670 <udp_input+0x208>)
 8008490:	22d0      	movs	r2, #208	@ 0xd0
 8008492:	497a      	ldr	r1, [pc, #488]	@ (800867c <udp_input+0x214>)
 8008494:	4878      	ldr	r0, [pc, #480]	@ (8008678 <udp_input+0x210>)
 8008496:	f002 ffff 	bl	800b498 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	895b      	ldrh	r3, [r3, #10]
 800849e:	2b07      	cmp	r3, #7
 80084a0:	d803      	bhi.n	80084aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fb52 	bl	8007b4c <pbuf_free>
    goto end;
 80084a8:	e0de      	b.n	8008668 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80084b0:	4b73      	ldr	r3, [pc, #460]	@ (8008680 <udp_input+0x218>)
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	4a72      	ldr	r2, [pc, #456]	@ (8008680 <udp_input+0x218>)
 80084b6:	6812      	ldr	r2, [r2, #0]
 80084b8:	4611      	mov	r1, r2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 ff96 	bl	800a3ec <ip4_addr_isbroadcast_u32>
 80084c0:	4603      	mov	r3, r0
 80084c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe f82e 	bl	800652c <lwip_htons>
 80084d0:	4603      	mov	r3, r0
 80084d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	885b      	ldrh	r3, [r3, #2]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fe f826 	bl	800652c <lwip_htons>
 80084e0:	4603      	mov	r3, r0
 80084e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80084ec:	2300      	movs	r3, #0
 80084ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80084f0:	4b64      	ldr	r3, [pc, #400]	@ (8008684 <udp_input+0x21c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084f6:	e054      	b.n	80085a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	8a5b      	ldrh	r3, [r3, #18]
 80084fc:	89fa      	ldrh	r2, [r7, #14]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d14a      	bne.n	8008598 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8008502:	7cfb      	ldrb	r3, [r7, #19]
 8008504:	461a      	mov	r2, r3
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800850a:	f7ff ff49 	bl	80083a0 <udp_input_local_match>
 800850e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8008510:	2b00      	cmp	r3, #0
 8008512:	d041      	beq.n	8008598 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8008514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008516:	7c1b      	ldrb	r3, [r3, #16]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d11d      	bne.n	800855c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d102      	bne.n	800852c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8008526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008528:	61fb      	str	r3, [r7, #28]
 800852a:	e017      	b.n	800855c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800852c:	7cfb      	ldrb	r3, [r7, #19]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d014      	beq.n	800855c <udp_input+0xf4>
 8008532:	4b53      	ldr	r3, [pc, #332]	@ (8008680 <udp_input+0x218>)
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853a:	d10f      	bne.n	800855c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	3304      	adds	r3, #4
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d008      	beq.n	800855c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800854a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	3304      	adds	r3, #4
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	429a      	cmp	r2, r3
 8008556:	d101      	bne.n	800855c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8008558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800855c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855e:	8a9b      	ldrh	r3, [r3, #20]
 8008560:	8a3a      	ldrh	r2, [r7, #16]
 8008562:	429a      	cmp	r2, r3
 8008564:	d118      	bne.n	8008598 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008568:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800856a:	2b00      	cmp	r3, #0
 800856c:	d005      	beq.n	800857a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	4b43      	ldr	r3, [pc, #268]	@ (8008680 <udp_input+0x218>)
 8008574:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008576:	429a      	cmp	r2, r3
 8008578:	d10e      	bne.n	8008598 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d014      	beq.n	80085aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8008580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008582:	68da      	ldr	r2, [r3, #12]
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8008588:	4b3e      	ldr	r3, [pc, #248]	@ (8008684 <udp_input+0x21c>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8008590:	4a3c      	ldr	r2, [pc, #240]	@ (8008684 <udp_input+0x21c>)
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8008596:	e008      	b.n	80085aa <udp_input+0x142>
      }
    }

    prev = pcb;
 8008598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800859c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80085a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1a7      	bne.n	80084f8 <udp_input+0x90>
 80085a8:	e000      	b.n	80085ac <udp_input+0x144>
        break;
 80085aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80085ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <udp_input+0x15a>
    for_us = 1;
 80085bc:	2301      	movs	r3, #1
 80085be:	76fb      	strb	r3, [r7, #27]
 80085c0:	e00a      	b.n	80085d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	3304      	adds	r3, #4
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008680 <udp_input+0x218>)
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	bf0c      	ite	eq
 80085d0:	2301      	moveq	r3, #1
 80085d2:	2300      	movne	r3, #0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80085d8:	7efb      	ldrb	r3, [r7, #27]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d041      	beq.n	8008662 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80085de:	2108      	movs	r1, #8
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff fa2d 	bl	8007a40 <pbuf_remove_header>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00a      	beq.n	8008602 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80085ec:	4b20      	ldr	r3, [pc, #128]	@ (8008670 <udp_input+0x208>)
 80085ee:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80085f2:	4925      	ldr	r1, [pc, #148]	@ (8008688 <udp_input+0x220>)
 80085f4:	4820      	ldr	r0, [pc, #128]	@ (8008678 <udp_input+0x210>)
 80085f6:	f002 ff4f 	bl	800b498 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff faa6 	bl	8007b4c <pbuf_free>
      goto end;
 8008600:	e032      	b.n	8008668 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	d012      	beq.n	800862e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8008608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00a      	beq.n	8008626 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8008610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008612:	699c      	ldr	r4, [r3, #24]
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	69d8      	ldr	r0, [r3, #28]
 8008618:	8a3b      	ldrh	r3, [r7, #16]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4b1b      	ldr	r3, [pc, #108]	@ (800868c <udp_input+0x224>)
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008622:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8008624:	e021      	b.n	800866a <udp_input+0x202>
        pbuf_free(p);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff fa90 	bl	8007b4c <pbuf_free>
        goto end;
 800862c:	e01c      	b.n	8008668 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800862e:	7cfb      	ldrb	r3, [r7, #19]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d112      	bne.n	800865a <udp_input+0x1f2>
 8008634:	4b12      	ldr	r3, [pc, #72]	@ (8008680 <udp_input+0x218>)
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800863c:	2be0      	cmp	r3, #224	@ 0xe0
 800863e:	d00c      	beq.n	800865a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8008640:	4b0f      	ldr	r3, [pc, #60]	@ (8008680 <udp_input+0x218>)
 8008642:	899b      	ldrh	r3, [r3, #12]
 8008644:	3308      	adds	r3, #8
 8008646:	b29b      	uxth	r3, r3
 8008648:	b21b      	sxth	r3, r3
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7ff fa6a 	bl	8007b26 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8008652:	2103      	movs	r1, #3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 fbb3 	bl	8009dc0 <icmp_dest_unreach>
      pbuf_free(p);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff fa76 	bl	8007b4c <pbuf_free>
  return;
 8008660:	e003      	b.n	800866a <udp_input+0x202>
    pbuf_free(p);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff fa72 	bl	8007b4c <pbuf_free>
  return;
 8008668:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800866a:	372c      	adds	r7, #44	@ 0x2c
 800866c:	46bd      	mov	sp, r7
 800866e:	bd90      	pop	{r4, r7, pc}
 8008670:	0800ce08 	.word	0x0800ce08
 8008674:	0800ceac 	.word	0x0800ceac
 8008678:	0800ce5c 	.word	0x0800ce5c
 800867c:	0800cec4 	.word	0x0800cec4
 8008680:	200052a8 	.word	0x200052a8
 8008684:	2000830c 	.word	0x2000830c
 8008688:	0800cee0 	.word	0x0800cee0
 800868c:	200052b8 	.word	0x200052b8

08008690 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d109      	bne.n	80086b4 <udp_send+0x24>
 80086a0:	4b11      	ldr	r3, [pc, #68]	@ (80086e8 <udp_send+0x58>)
 80086a2:	f240 12d5 	movw	r2, #469	@ 0x1d5
 80086a6:	4911      	ldr	r1, [pc, #68]	@ (80086ec <udp_send+0x5c>)
 80086a8:	4811      	ldr	r0, [pc, #68]	@ (80086f0 <udp_send+0x60>)
 80086aa:	f002 fef5 	bl	800b498 <iprintf>
 80086ae:	f06f 030f 	mvn.w	r3, #15
 80086b2:	e015      	b.n	80086e0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d109      	bne.n	80086ce <udp_send+0x3e>
 80086ba:	4b0b      	ldr	r3, [pc, #44]	@ (80086e8 <udp_send+0x58>)
 80086bc:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 80086c0:	490c      	ldr	r1, [pc, #48]	@ (80086f4 <udp_send+0x64>)
 80086c2:	480b      	ldr	r0, [pc, #44]	@ (80086f0 <udp_send+0x60>)
 80086c4:	f002 fee8 	bl	800b498 <iprintf>
 80086c8:	f06f 030f 	mvn.w	r3, #15
 80086cc:	e008      	b.n	80086e0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	1d1a      	adds	r2, r3, #4
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	8a9b      	ldrh	r3, [r3, #20]
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f80d 	bl	80086f8 <udp_sendto>
 80086de:	4603      	mov	r3, r0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	0800ce08 	.word	0x0800ce08
 80086ec:	0800cefc 	.word	0x0800cefc
 80086f0:	0800ce5c 	.word	0x0800ce5c
 80086f4:	0800cf14 	.word	0x0800cf14

080086f8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d109      	bne.n	8008720 <udp_sendto+0x28>
 800870c:	4b23      	ldr	r3, [pc, #140]	@ (800879c <udp_sendto+0xa4>)
 800870e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8008712:	4923      	ldr	r1, [pc, #140]	@ (80087a0 <udp_sendto+0xa8>)
 8008714:	4823      	ldr	r0, [pc, #140]	@ (80087a4 <udp_sendto+0xac>)
 8008716:	f002 febf 	bl	800b498 <iprintf>
 800871a:	f06f 030f 	mvn.w	r3, #15
 800871e:	e038      	b.n	8008792 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d109      	bne.n	800873a <udp_sendto+0x42>
 8008726:	4b1d      	ldr	r3, [pc, #116]	@ (800879c <udp_sendto+0xa4>)
 8008728:	f240 2219 	movw	r2, #537	@ 0x219
 800872c:	491e      	ldr	r1, [pc, #120]	@ (80087a8 <udp_sendto+0xb0>)
 800872e:	481d      	ldr	r0, [pc, #116]	@ (80087a4 <udp_sendto+0xac>)
 8008730:	f002 feb2 	bl	800b498 <iprintf>
 8008734:	f06f 030f 	mvn.w	r3, #15
 8008738:	e02b      	b.n	8008792 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d109      	bne.n	8008754 <udp_sendto+0x5c>
 8008740:	4b16      	ldr	r3, [pc, #88]	@ (800879c <udp_sendto+0xa4>)
 8008742:	f240 221a 	movw	r2, #538	@ 0x21a
 8008746:	4919      	ldr	r1, [pc, #100]	@ (80087ac <udp_sendto+0xb4>)
 8008748:	4816      	ldr	r0, [pc, #88]	@ (80087a4 <udp_sendto+0xac>)
 800874a:	f002 fea5 	bl	800b498 <iprintf>
 800874e:	f06f 030f 	mvn.w	r3, #15
 8008752:	e01e      	b.n	8008792 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	7a1b      	ldrb	r3, [r3, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d006      	beq.n	800876a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	7a1b      	ldrb	r3, [r3, #8]
 8008760:	4618      	mov	r0, r3
 8008762:	f7fe fec1 	bl	80074e8 <netif_get_by_index>
 8008766:	6178      	str	r0, [r7, #20]
 8008768:	e003      	b.n	8008772 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f001 fbb2 	bl	8009ed4 <ip4_route>
 8008770:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8008778:	f06f 0303 	mvn.w	r3, #3
 800877c:	e009      	b.n	8008792 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800877e:	887a      	ldrh	r2, [r7, #2]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	4613      	mov	r3, r2
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 f810 	bl	80087b0 <udp_sendto_if>
 8008790:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8008792:	4618      	mov	r0, r3
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	0800ce08 	.word	0x0800ce08
 80087a0:	0800cf2c 	.word	0x0800cf2c
 80087a4:	0800ce5c 	.word	0x0800ce5c
 80087a8:	0800cf44 	.word	0x0800cf44
 80087ac:	0800cf60 	.word	0x0800cf60

080087b0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d109      	bne.n	80087d8 <udp_sendto_if+0x28>
 80087c4:	4b2e      	ldr	r3, [pc, #184]	@ (8008880 <udp_sendto_if+0xd0>)
 80087c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80087ca:	492e      	ldr	r1, [pc, #184]	@ (8008884 <udp_sendto_if+0xd4>)
 80087cc:	482e      	ldr	r0, [pc, #184]	@ (8008888 <udp_sendto_if+0xd8>)
 80087ce:	f002 fe63 	bl	800b498 <iprintf>
 80087d2:	f06f 030f 	mvn.w	r3, #15
 80087d6:	e04f      	b.n	8008878 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d109      	bne.n	80087f2 <udp_sendto_if+0x42>
 80087de:	4b28      	ldr	r3, [pc, #160]	@ (8008880 <udp_sendto_if+0xd0>)
 80087e0:	f240 2281 	movw	r2, #641	@ 0x281
 80087e4:	4929      	ldr	r1, [pc, #164]	@ (800888c <udp_sendto_if+0xdc>)
 80087e6:	4828      	ldr	r0, [pc, #160]	@ (8008888 <udp_sendto_if+0xd8>)
 80087e8:	f002 fe56 	bl	800b498 <iprintf>
 80087ec:	f06f 030f 	mvn.w	r3, #15
 80087f0:	e042      	b.n	8008878 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d109      	bne.n	800880c <udp_sendto_if+0x5c>
 80087f8:	4b21      	ldr	r3, [pc, #132]	@ (8008880 <udp_sendto_if+0xd0>)
 80087fa:	f240 2282 	movw	r2, #642	@ 0x282
 80087fe:	4924      	ldr	r1, [pc, #144]	@ (8008890 <udp_sendto_if+0xe0>)
 8008800:	4821      	ldr	r0, [pc, #132]	@ (8008888 <udp_sendto_if+0xd8>)
 8008802:	f002 fe49 	bl	800b498 <iprintf>
 8008806:	f06f 030f 	mvn.w	r3, #15
 800880a:	e035      	b.n	8008878 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d109      	bne.n	8008826 <udp_sendto_if+0x76>
 8008812:	4b1b      	ldr	r3, [pc, #108]	@ (8008880 <udp_sendto_if+0xd0>)
 8008814:	f240 2283 	movw	r2, #643	@ 0x283
 8008818:	491e      	ldr	r1, [pc, #120]	@ (8008894 <udp_sendto_if+0xe4>)
 800881a:	481b      	ldr	r0, [pc, #108]	@ (8008888 <udp_sendto_if+0xd8>)
 800881c:	f002 fe3c 	bl	800b498 <iprintf>
 8008820:	f06f 030f 	mvn.w	r3, #15
 8008824:	e028      	b.n	8008878 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d009      	beq.n	8008840 <udp_sendto_if+0x90>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d005      	beq.n	8008840 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800883c:	2be0      	cmp	r3, #224	@ 0xe0
 800883e:	d103      	bne.n	8008848 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	3304      	adds	r3, #4
 8008844:	617b      	str	r3, [r7, #20]
 8008846:	e00b      	b.n	8008860 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	3304      	adds	r3, #4
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d002      	beq.n	800885c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8008856:	f06f 0303 	mvn.w	r3, #3
 800885a:	e00d      	b.n	8008878 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8008860:	887a      	ldrh	r2, [r7, #2]
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	4613      	mov	r3, r2
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	68b9      	ldr	r1, [r7, #8]
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 f811 	bl	8008898 <udp_sendto_if_src>
 8008876:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	0800ce08 	.word	0x0800ce08
 8008884:	0800cf7c 	.word	0x0800cf7c
 8008888:	0800ce5c 	.word	0x0800ce5c
 800888c:	0800cf98 	.word	0x0800cf98
 8008890:	0800cfb4 	.word	0x0800cfb4
 8008894:	0800cfd4 	.word	0x0800cfd4

08008898 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08c      	sub	sp, #48	@ 0x30
 800889c:	af04      	add	r7, sp, #16
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d109      	bne.n	80088c0 <udp_sendto_if_src+0x28>
 80088ac:	4b65      	ldr	r3, [pc, #404]	@ (8008a44 <udp_sendto_if_src+0x1ac>)
 80088ae:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80088b2:	4965      	ldr	r1, [pc, #404]	@ (8008a48 <udp_sendto_if_src+0x1b0>)
 80088b4:	4865      	ldr	r0, [pc, #404]	@ (8008a4c <udp_sendto_if_src+0x1b4>)
 80088b6:	f002 fdef 	bl	800b498 <iprintf>
 80088ba:	f06f 030f 	mvn.w	r3, #15
 80088be:	e0bc      	b.n	8008a3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d109      	bne.n	80088da <udp_sendto_if_src+0x42>
 80088c6:	4b5f      	ldr	r3, [pc, #380]	@ (8008a44 <udp_sendto_if_src+0x1ac>)
 80088c8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80088cc:	4960      	ldr	r1, [pc, #384]	@ (8008a50 <udp_sendto_if_src+0x1b8>)
 80088ce:	485f      	ldr	r0, [pc, #380]	@ (8008a4c <udp_sendto_if_src+0x1b4>)
 80088d0:	f002 fde2 	bl	800b498 <iprintf>
 80088d4:	f06f 030f 	mvn.w	r3, #15
 80088d8:	e0af      	b.n	8008a3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d109      	bne.n	80088f4 <udp_sendto_if_src+0x5c>
 80088e0:	4b58      	ldr	r3, [pc, #352]	@ (8008a44 <udp_sendto_if_src+0x1ac>)
 80088e2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80088e6:	495b      	ldr	r1, [pc, #364]	@ (8008a54 <udp_sendto_if_src+0x1bc>)
 80088e8:	4858      	ldr	r0, [pc, #352]	@ (8008a4c <udp_sendto_if_src+0x1b4>)
 80088ea:	f002 fdd5 	bl	800b498 <iprintf>
 80088ee:	f06f 030f 	mvn.w	r3, #15
 80088f2:	e0a2      	b.n	8008a3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80088f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <udp_sendto_if_src+0x76>
 80088fa:	4b52      	ldr	r3, [pc, #328]	@ (8008a44 <udp_sendto_if_src+0x1ac>)
 80088fc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8008900:	4955      	ldr	r1, [pc, #340]	@ (8008a58 <udp_sendto_if_src+0x1c0>)
 8008902:	4852      	ldr	r0, [pc, #328]	@ (8008a4c <udp_sendto_if_src+0x1b4>)
 8008904:	f002 fdc8 	bl	800b498 <iprintf>
 8008908:	f06f 030f 	mvn.w	r3, #15
 800890c:	e095      	b.n	8008a3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800890e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <udp_sendto_if_src+0x90>
 8008914:	4b4b      	ldr	r3, [pc, #300]	@ (8008a44 <udp_sendto_if_src+0x1ac>)
 8008916:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800891a:	4950      	ldr	r1, [pc, #320]	@ (8008a5c <udp_sendto_if_src+0x1c4>)
 800891c:	484b      	ldr	r0, [pc, #300]	@ (8008a4c <udp_sendto_if_src+0x1b4>)
 800891e:	f002 fdbb 	bl	800b498 <iprintf>
 8008922:	f06f 030f 	mvn.w	r3, #15
 8008926:	e088      	b.n	8008a3a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8a5b      	ldrh	r3, [r3, #18]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10f      	bne.n	8008950 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008930:	68f9      	ldr	r1, [r7, #12]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	8a5b      	ldrh	r3, [r3, #18]
 8008936:	461a      	mov	r2, r3
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 f893 	bl	8008a64 <udp_bind>
 800893e:	4603      	mov	r3, r0
 8008940:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8008942:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d002      	beq.n	8008950 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800894a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800894e:	e074      	b.n	8008a3a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	891b      	ldrh	r3, [r3, #8]
 8008954:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8008958:	4293      	cmp	r3, r2
 800895a:	d902      	bls.n	8008962 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800895c:	f04f 33ff 	mov.w	r3, #4294967295
 8008960:	e06b      	b.n	8008a3a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8008962:	2108      	movs	r1, #8
 8008964:	68b8      	ldr	r0, [r7, #8]
 8008966:	f7ff f85b 	bl	8007a20 <pbuf_add_header>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d015      	beq.n	800899c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8008970:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8008974:	2108      	movs	r1, #8
 8008976:	2022      	movs	r0, #34	@ 0x22
 8008978:	f7fe fe06 	bl	8007588 <pbuf_alloc>
 800897c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d102      	bne.n	800898a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8008984:	f04f 33ff 	mov.w	r3, #4294967295
 8008988:	e057      	b.n	8008a3a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	891b      	ldrh	r3, [r3, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d006      	beq.n	80089a0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8008992:	68b9      	ldr	r1, [r7, #8]
 8008994:	69f8      	ldr	r0, [r7, #28]
 8008996:	f7ff f9f1 	bl	8007d7c <pbuf_chain>
 800899a:	e001      	b.n	80089a0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	895b      	ldrh	r3, [r3, #10]
 80089a4:	2b07      	cmp	r3, #7
 80089a6:	d806      	bhi.n	80089b6 <udp_sendto_if_src+0x11e>
 80089a8:	4b26      	ldr	r3, [pc, #152]	@ (8008a44 <udp_sendto_if_src+0x1ac>)
 80089aa:	f240 320d 	movw	r2, #781	@ 0x30d
 80089ae:	492c      	ldr	r1, [pc, #176]	@ (8008a60 <udp_sendto_if_src+0x1c8>)
 80089b0:	4826      	ldr	r0, [pc, #152]	@ (8008a4c <udp_sendto_if_src+0x1b4>)
 80089b2:	f002 fd71 	bl	800b498 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8a5b      	ldrh	r3, [r3, #18]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fd fdb3 	bl	800652c <lwip_htons>
 80089c6:	4603      	mov	r3, r0
 80089c8:	461a      	mov	r2, r3
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80089ce:	887b      	ldrh	r3, [r7, #2]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fd fdab 	bl	800652c <lwip_htons>
 80089d6:	4603      	mov	r3, r0
 80089d8:	461a      	mov	r2, r3
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2200      	movs	r2, #0
 80089e2:	719a      	strb	r2, [r3, #6]
 80089e4:	2200      	movs	r2, #0
 80089e6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	891b      	ldrh	r3, [r3, #8]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fd fd9d 	bl	800652c <lwip_htons>
 80089f2:	4603      	mov	r3, r0
 80089f4:	461a      	mov	r2, r3
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80089fa:	2311      	movs	r3, #17
 80089fc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	7adb      	ldrb	r3, [r3, #11]
 8008a02:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	7a9b      	ldrb	r3, [r3, #10]
 8008a08:	7cb9      	ldrb	r1, [r7, #18]
 8008a0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a0c:	9202      	str	r2, [sp, #8]
 8008a0e:	7cfa      	ldrb	r2, [r7, #19]
 8008a10:	9201      	str	r2, [sp, #4]
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	460b      	mov	r3, r1
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a1a:	69f8      	ldr	r0, [r7, #28]
 8008a1c:	f001 fc38 	bl	800a290 <ip4_output_if_src>
 8008a20:	4603      	mov	r3, r0
 8008a22:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d004      	beq.n	8008a36 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8008a2c:	69f8      	ldr	r0, [r7, #28]
 8008a2e:	f7ff f88d 	bl	8007b4c <pbuf_free>
    q = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8008a36:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3720      	adds	r7, #32
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	0800ce08 	.word	0x0800ce08
 8008a48:	0800cff4 	.word	0x0800cff4
 8008a4c:	0800ce5c 	.word	0x0800ce5c
 8008a50:	0800d014 	.word	0x0800d014
 8008a54:	0800d034 	.word	0x0800d034
 8008a58:	0800d058 	.word	0x0800d058
 8008a5c:	0800d07c 	.word	0x0800d07c
 8008a60:	0800d0a0 	.word	0x0800d0a0

08008a64 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8008a78:	4b39      	ldr	r3, [pc, #228]	@ (8008b60 <udp_bind+0xfc>)
 8008a7a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d109      	bne.n	8008a96 <udp_bind+0x32>
 8008a82:	4b38      	ldr	r3, [pc, #224]	@ (8008b64 <udp_bind+0x100>)
 8008a84:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8008a88:	4937      	ldr	r1, [pc, #220]	@ (8008b68 <udp_bind+0x104>)
 8008a8a:	4838      	ldr	r0, [pc, #224]	@ (8008b6c <udp_bind+0x108>)
 8008a8c:	f002 fd04 	bl	800b498 <iprintf>
 8008a90:	f06f 030f 	mvn.w	r3, #15
 8008a94:	e060      	b.n	8008b58 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008a9a:	4b35      	ldr	r3, [pc, #212]	@ (8008b70 <udp_bind+0x10c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	617b      	str	r3, [r7, #20]
 8008aa0:	e009      	b.n	8008ab6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d102      	bne.n	8008ab0 <udp_bind+0x4c>
      rebind = 1;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	74fb      	strb	r3, [r7, #19]
      break;
 8008aae:	e005      	b.n	8008abc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1f2      	bne.n	8008aa2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8008abc:	88fb      	ldrh	r3, [r7, #6]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d109      	bne.n	8008ad6 <udp_bind+0x72>
    port = udp_new_port();
 8008ac2:	f7ff fc35 	bl	8008330 <udp_new_port>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008aca:	88fb      	ldrh	r3, [r7, #6]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d12c      	bne.n	8008b2a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8008ad0:	f06f 0307 	mvn.w	r3, #7
 8008ad4:	e040      	b.n	8008b58 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008ad6:	4b26      	ldr	r3, [pc, #152]	@ (8008b70 <udp_bind+0x10c>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	617b      	str	r3, [r7, #20]
 8008adc:	e022      	b.n	8008b24 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d01b      	beq.n	8008b1e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	8a5b      	ldrh	r3, [r3, #18]
 8008aea:	88fa      	ldrh	r2, [r7, #6]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d116      	bne.n	8008b1e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d00d      	beq.n	8008b18 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <udp_bind+0xb4>
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d006      	beq.n	8008b18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8008b0a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d102      	bne.n	8008b1e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8008b18:	f06f 0307 	mvn.w	r3, #7
 8008b1c:	e01c      	b.n	8008b58 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1d9      	bne.n	8008ade <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d002      	beq.n	8008b36 <udp_bind+0xd2>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	e000      	b.n	8008b38 <udp_bind+0xd4>
 8008b36:	2300      	movs	r3, #0
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	88fa      	ldrh	r2, [r7, #6]
 8008b40:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8008b42:	7cfb      	ldrb	r3, [r7, #19]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8008b48:	4b09      	ldr	r3, [pc, #36]	@ (8008b70 <udp_bind+0x10c>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8008b50:	4a07      	ldr	r2, [pc, #28]	@ (8008b70 <udp_bind+0x10c>)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	0800d8c4 	.word	0x0800d8c4
 8008b64:	0800ce08 	.word	0x0800ce08
 8008b68:	0800d0d0 	.word	0x0800d0d0
 8008b6c:	0800ce5c 	.word	0x0800ce5c
 8008b70:	2000830c 	.word	0x2000830c

08008b74 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d109      	bne.n	8008b9c <udp_connect+0x28>
 8008b88:	4b2c      	ldr	r3, [pc, #176]	@ (8008c3c <udp_connect+0xc8>)
 8008b8a:	f240 4235 	movw	r2, #1077	@ 0x435
 8008b8e:	492c      	ldr	r1, [pc, #176]	@ (8008c40 <udp_connect+0xcc>)
 8008b90:	482c      	ldr	r0, [pc, #176]	@ (8008c44 <udp_connect+0xd0>)
 8008b92:	f002 fc81 	bl	800b498 <iprintf>
 8008b96:	f06f 030f 	mvn.w	r3, #15
 8008b9a:	e04b      	b.n	8008c34 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <udp_connect+0x42>
 8008ba2:	4b26      	ldr	r3, [pc, #152]	@ (8008c3c <udp_connect+0xc8>)
 8008ba4:	f240 4236 	movw	r2, #1078	@ 0x436
 8008ba8:	4927      	ldr	r1, [pc, #156]	@ (8008c48 <udp_connect+0xd4>)
 8008baa:	4826      	ldr	r0, [pc, #152]	@ (8008c44 <udp_connect+0xd0>)
 8008bac:	f002 fc74 	bl	800b498 <iprintf>
 8008bb0:	f06f 030f 	mvn.w	r3, #15
 8008bb4:	e03e      	b.n	8008c34 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	8a5b      	ldrh	r3, [r3, #18]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10f      	bne.n	8008bde <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008bbe:	68f9      	ldr	r1, [r7, #12]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8a5b      	ldrh	r3, [r3, #18]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff ff4c 	bl	8008a64 <udp_bind>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008bd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <udp_connect+0x6a>
      return err;
 8008bd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008bdc:	e02a      	b.n	8008c34 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <udp_connect+0x76>
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	e000      	b.n	8008bec <udp_connect+0x78>
 8008bea:	2300      	movs	r3, #0
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	88fa      	ldrh	r2, [r7, #6]
 8008bf4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	7c1b      	ldrb	r3, [r3, #16]
 8008bfa:	f043 0304 	orr.w	r3, r3, #4
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008c04:	4b11      	ldr	r3, [pc, #68]	@ (8008c4c <udp_connect+0xd8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	617b      	str	r3, [r7, #20]
 8008c0a:	e008      	b.n	8008c1e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d101      	bne.n	8008c18 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	e00d      	b.n	8008c34 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1f3      	bne.n	8008c0c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8008c24:	4b09      	ldr	r3, [pc, #36]	@ (8008c4c <udp_connect+0xd8>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8008c2c:	4a07      	ldr	r2, [pc, #28]	@ (8008c4c <udp_connect+0xd8>)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	0800ce08 	.word	0x0800ce08
 8008c40:	0800d0e8 	.word	0x0800d0e8
 8008c44:	0800ce5c 	.word	0x0800ce5c
 8008c48:	0800d104 	.word	0x0800d104
 8008c4c:	2000830c 	.word	0x2000830c

08008c50 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d107      	bne.n	8008c72 <udp_recv+0x22>
 8008c62:	4b08      	ldr	r3, [pc, #32]	@ (8008c84 <udp_recv+0x34>)
 8008c64:	f240 428a 	movw	r2, #1162	@ 0x48a
 8008c68:	4907      	ldr	r1, [pc, #28]	@ (8008c88 <udp_recv+0x38>)
 8008c6a:	4808      	ldr	r0, [pc, #32]	@ (8008c8c <udp_recv+0x3c>)
 8008c6c:	f002 fc14 	bl	800b498 <iprintf>
 8008c70:	e005      	b.n	8008c7e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	61da      	str	r2, [r3, #28]
}
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	0800ce08 	.word	0x0800ce08
 8008c88:	0800d13c 	.word	0x0800d13c
 8008c8c:	0800ce5c 	.word	0x0800ce5c

08008c90 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8008c96:	2000      	movs	r0, #0
 8008c98:	f7fe f8a4 	bl	8006de4 <memp_malloc>
 8008c9c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d007      	beq.n	8008cb4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f002 fc5a 	bl	800b562 <memset>
    pcb->ttl = UDP_TTL;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	22ff      	movs	r2, #255	@ 0xff
 8008cb2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8008cb4:	687b      	ldr	r3, [r7, #4]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
	...

08008cc0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01e      	beq.n	8008d0e <udp_netif_ip_addr_changed+0x4e>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01a      	beq.n	8008d0e <udp_netif_ip_addr_changed+0x4e>
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d017      	beq.n	8008d0e <udp_netif_ip_addr_changed+0x4e>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d013      	beq.n	8008d0e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8008d1c <udp_netif_ip_addr_changed+0x5c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	e00c      	b.n	8008d08 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d103      	bne.n	8008d02 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1ef      	bne.n	8008cee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	2000830c 	.word	0x2000830c

08008d20 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008d28:	4915      	ldr	r1, [pc, #84]	@ (8008d80 <etharp_free_entry+0x60>)
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	4413      	add	r3, r2
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	440b      	add	r3, r1
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d013      	beq.n	8008d64 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8008d3c:	4910      	ldr	r1, [pc, #64]	@ (8008d80 <etharp_free_entry+0x60>)
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	4613      	mov	r3, r2
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	4413      	add	r3, r2
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	440b      	add	r3, r1
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fe fefd 	bl	8007b4c <pbuf_free>
    arp_table[i].q = NULL;
 8008d52:	490b      	ldr	r1, [pc, #44]	@ (8008d80 <etharp_free_entry+0x60>)
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	4613      	mov	r3, r2
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	4413      	add	r3, r2
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	440b      	add	r3, r1
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8008d64:	4906      	ldr	r1, [pc, #24]	@ (8008d80 <etharp_free_entry+0x60>)
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	4413      	add	r3, r2
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	440b      	add	r3, r1
 8008d72:	3314      	adds	r3, #20
 8008d74:	2200      	movs	r2, #0
 8008d76:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	20008310 	.word	0x20008310

08008d84 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	607b      	str	r3, [r7, #4]
 8008d8e:	e096      	b.n	8008ebe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8008d90:	494f      	ldr	r1, [pc, #316]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	4613      	mov	r3, r2
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	4413      	add	r3, r2
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	440b      	add	r3, r1
 8008d9e:	3314      	adds	r3, #20
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 8086 	beq.w	8008eb8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8008dac:	4948      	ldr	r1, [pc, #288]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	4613      	mov	r3, r2
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	4413      	add	r3, r2
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	440b      	add	r3, r1
 8008dba:	3312      	adds	r3, #18
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	b298      	uxth	r0, r3
 8008dc2:	4943      	ldr	r1, [pc, #268]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	4413      	add	r3, r2
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	440b      	add	r3, r1
 8008dd0:	3312      	adds	r3, #18
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008dd6:	493e      	ldr	r1, [pc, #248]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	4413      	add	r3, r2
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	440b      	add	r3, r1
 8008de4:	3312      	adds	r3, #18
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8008dec:	d215      	bcs.n	8008e1a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008dee:	4938      	ldr	r1, [pc, #224]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	4613      	mov	r3, r2
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	4413      	add	r3, r2
 8008df8:	00db      	lsls	r3, r3, #3
 8008dfa:	440b      	add	r3, r1
 8008dfc:	3314      	adds	r3, #20
 8008dfe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d10e      	bne.n	8008e22 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8008e04:	4932      	ldr	r1, [pc, #200]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	4413      	add	r3, r2
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	440b      	add	r3, r1
 8008e12:	3312      	adds	r3, #18
 8008e14:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d903      	bls.n	8008e22 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff ff80 	bl	8008d20 <etharp_free_entry>
 8008e20:	e04a      	b.n	8008eb8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8008e22:	492b      	ldr	r1, [pc, #172]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	4613      	mov	r3, r2
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	4413      	add	r3, r2
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	440b      	add	r3, r1
 8008e30:	3314      	adds	r3, #20
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d10a      	bne.n	8008e4e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008e38:	4925      	ldr	r1, [pc, #148]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	4413      	add	r3, r2
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	440b      	add	r3, r1
 8008e46:	3314      	adds	r3, #20
 8008e48:	2204      	movs	r2, #4
 8008e4a:	701a      	strb	r2, [r3, #0]
 8008e4c:	e034      	b.n	8008eb8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8008e4e:	4920      	ldr	r1, [pc, #128]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	4613      	mov	r3, r2
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	4413      	add	r3, r2
 8008e58:	00db      	lsls	r3, r3, #3
 8008e5a:	440b      	add	r3, r1
 8008e5c:	3314      	adds	r3, #20
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d10a      	bne.n	8008e7a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8008e64:	491a      	ldr	r1, [pc, #104]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	4413      	add	r3, r2
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	440b      	add	r3, r1
 8008e72:	3314      	adds	r3, #20
 8008e74:	2202      	movs	r2, #2
 8008e76:	701a      	strb	r2, [r3, #0]
 8008e78:	e01e      	b.n	8008eb8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008e7a:	4915      	ldr	r1, [pc, #84]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	4413      	add	r3, r2
 8008e84:	00db      	lsls	r3, r3, #3
 8008e86:	440b      	add	r3, r1
 8008e88:	3314      	adds	r3, #20
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d113      	bne.n	8008eb8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8008e90:	490f      	ldr	r1, [pc, #60]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	4613      	mov	r3, r2
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	4413      	add	r3, r2
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	440b      	add	r3, r1
 8008e9e:	3308      	adds	r3, #8
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	005b      	lsls	r3, r3, #1
 8008ea8:	4413      	add	r3, r2
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	4a08      	ldr	r2, [pc, #32]	@ (8008ed0 <etharp_tmr+0x14c>)
 8008eae:	4413      	add	r3, r2
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	f000 fe6e 	bl	8009b94 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	607b      	str	r3, [r7, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b09      	cmp	r3, #9
 8008ec2:	f77f af65 	ble.w	8008d90 <etharp_tmr+0xc>
      }
    }
  }
}
 8008ec6:	bf00      	nop
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20008310 	.word	0x20008310

08008ed4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08a      	sub	sp, #40	@ 0x28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	460b      	mov	r3, r1
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8008ee2:	230a      	movs	r3, #10
 8008ee4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008ee6:	230a      	movs	r3, #10
 8008ee8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8008eea:	230a      	movs	r3, #10
 8008eec:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8008ef2:	230a      	movs	r3, #10
 8008ef4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	83bb      	strh	r3, [r7, #28]
 8008efa:	2300      	movs	r3, #0
 8008efc:	837b      	strh	r3, [r7, #26]
 8008efe:	2300      	movs	r3, #0
 8008f00:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008f02:	2300      	movs	r3, #0
 8008f04:	843b      	strh	r3, [r7, #32]
 8008f06:	e0ae      	b.n	8009066 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8008f08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008f0c:	49a6      	ldr	r1, [pc, #664]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8008f0e:	4613      	mov	r3, r2
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	4413      	add	r3, r2
 8008f14:	00db      	lsls	r3, r3, #3
 8008f16:	440b      	add	r3, r1
 8008f18:	3314      	adds	r3, #20
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008f1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8008f22:	2b0a      	cmp	r3, #10
 8008f24:	d105      	bne.n	8008f32 <etharp_find_entry+0x5e>
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d102      	bne.n	8008f32 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8008f2c:	8c3b      	ldrh	r3, [r7, #32]
 8008f2e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008f30:	e095      	b.n	800905e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 8092 	beq.w	800905e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d009      	beq.n	8008f54 <etharp_find_entry+0x80>
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d806      	bhi.n	8008f54 <etharp_find_entry+0x80>
 8008f46:	4b99      	ldr	r3, [pc, #612]	@ (80091ac <etharp_find_entry+0x2d8>)
 8008f48:	f240 1223 	movw	r2, #291	@ 0x123
 8008f4c:	4998      	ldr	r1, [pc, #608]	@ (80091b0 <etharp_find_entry+0x2dc>)
 8008f4e:	4899      	ldr	r0, [pc, #612]	@ (80091b4 <etharp_find_entry+0x2e0>)
 8008f50:	f002 faa2 	bl	800b498 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d020      	beq.n	8008f9c <etharp_find_entry+0xc8>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6819      	ldr	r1, [r3, #0]
 8008f5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008f62:	4891      	ldr	r0, [pc, #580]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8008f64:	4613      	mov	r3, r2
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	4413      	add	r3, r2
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	4403      	add	r3, r0
 8008f6e:	3304      	adds	r3, #4
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4299      	cmp	r1, r3
 8008f74:	d112      	bne.n	8008f9c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00c      	beq.n	8008f96 <etharp_find_entry+0xc2>
 8008f7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008f80:	4989      	ldr	r1, [pc, #548]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8008f82:	4613      	mov	r3, r2
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	4413      	add	r3, r2
 8008f88:	00db      	lsls	r3, r3, #3
 8008f8a:	440b      	add	r3, r1
 8008f8c:	3308      	adds	r3, #8
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d102      	bne.n	8008f9c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8008f96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008f9a:	e100      	b.n	800919e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d140      	bne.n	8009024 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8008fa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008fa6:	4980      	ldr	r1, [pc, #512]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8008fa8:	4613      	mov	r3, r2
 8008faa:	005b      	lsls	r3, r3, #1
 8008fac:	4413      	add	r3, r2
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	440b      	add	r3, r1
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d01a      	beq.n	8008fee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8008fb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008fbc:	497a      	ldr	r1, [pc, #488]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	005b      	lsls	r3, r3, #1
 8008fc2:	4413      	add	r3, r2
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	440b      	add	r3, r1
 8008fc8:	3312      	adds	r3, #18
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	8bba      	ldrh	r2, [r7, #28]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d845      	bhi.n	800905e <etharp_find_entry+0x18a>
            old_queue = i;
 8008fd2:	8c3b      	ldrh	r3, [r7, #32]
 8008fd4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8008fd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008fda:	4973      	ldr	r1, [pc, #460]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8008fdc:	4613      	mov	r3, r2
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	4413      	add	r3, r2
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	440b      	add	r3, r1
 8008fe6:	3312      	adds	r3, #18
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	83bb      	strh	r3, [r7, #28]
 8008fec:	e037      	b.n	800905e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8008fee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008ff2:	496d      	ldr	r1, [pc, #436]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	005b      	lsls	r3, r3, #1
 8008ff8:	4413      	add	r3, r2
 8008ffa:	00db      	lsls	r3, r3, #3
 8008ffc:	440b      	add	r3, r1
 8008ffe:	3312      	adds	r3, #18
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	8b7a      	ldrh	r2, [r7, #26]
 8009004:	429a      	cmp	r2, r3
 8009006:	d82a      	bhi.n	800905e <etharp_find_entry+0x18a>
            old_pending = i;
 8009008:	8c3b      	ldrh	r3, [r7, #32]
 800900a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800900c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009010:	4965      	ldr	r1, [pc, #404]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8009012:	4613      	mov	r3, r2
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	4413      	add	r3, r2
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	440b      	add	r3, r1
 800901c:	3312      	adds	r3, #18
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	837b      	strh	r3, [r7, #26]
 8009022:	e01c      	b.n	800905e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d919      	bls.n	800905e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800902a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800902e:	495e      	ldr	r1, [pc, #376]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8009030:	4613      	mov	r3, r2
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	4413      	add	r3, r2
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	440b      	add	r3, r1
 800903a:	3312      	adds	r3, #18
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	8b3a      	ldrh	r2, [r7, #24]
 8009040:	429a      	cmp	r2, r3
 8009042:	d80c      	bhi.n	800905e <etharp_find_entry+0x18a>
            old_stable = i;
 8009044:	8c3b      	ldrh	r3, [r7, #32]
 8009046:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8009048:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800904c:	4956      	ldr	r1, [pc, #344]	@ (80091a8 <etharp_find_entry+0x2d4>)
 800904e:	4613      	mov	r3, r2
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	4413      	add	r3, r2
 8009054:	00db      	lsls	r3, r3, #3
 8009056:	440b      	add	r3, r1
 8009058:	3312      	adds	r3, #18
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800905e:	8c3b      	ldrh	r3, [r7, #32]
 8009060:	3301      	adds	r3, #1
 8009062:	b29b      	uxth	r3, r3
 8009064:	843b      	strh	r3, [r7, #32]
 8009066:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800906a:	2b09      	cmp	r3, #9
 800906c:	f77f af4c 	ble.w	8008f08 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009070:	7afb      	ldrb	r3, [r7, #11]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d108      	bne.n	800908c <etharp_find_entry+0x1b8>
 800907a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800907e:	2b0a      	cmp	r3, #10
 8009080:	d107      	bne.n	8009092 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	2b00      	cmp	r3, #0
 800908a:	d102      	bne.n	8009092 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800908c:	f04f 33ff 	mov.w	r3, #4294967295
 8009090:	e085      	b.n	800919e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8009092:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009096:	2b09      	cmp	r3, #9
 8009098:	dc02      	bgt.n	80090a0 <etharp_find_entry+0x1cc>
    i = empty;
 800909a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800909c:	843b      	strh	r3, [r7, #32]
 800909e:	e039      	b.n	8009114 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80090a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80090a4:	2b09      	cmp	r3, #9
 80090a6:	dc14      	bgt.n	80090d2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80090a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090aa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80090ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80090b0:	493d      	ldr	r1, [pc, #244]	@ (80091a8 <etharp_find_entry+0x2d4>)
 80090b2:	4613      	mov	r3, r2
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	4413      	add	r3, r2
 80090b8:	00db      	lsls	r3, r3, #3
 80090ba:	440b      	add	r3, r1
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d018      	beq.n	80090f4 <etharp_find_entry+0x220>
 80090c2:	4b3a      	ldr	r3, [pc, #232]	@ (80091ac <etharp_find_entry+0x2d8>)
 80090c4:	f240 126d 	movw	r2, #365	@ 0x16d
 80090c8:	493b      	ldr	r1, [pc, #236]	@ (80091b8 <etharp_find_entry+0x2e4>)
 80090ca:	483a      	ldr	r0, [pc, #232]	@ (80091b4 <etharp_find_entry+0x2e0>)
 80090cc:	f002 f9e4 	bl	800b498 <iprintf>
 80090d0:	e010      	b.n	80090f4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80090d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80090d6:	2b09      	cmp	r3, #9
 80090d8:	dc02      	bgt.n	80090e0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80090da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80090dc:	843b      	strh	r3, [r7, #32]
 80090de:	e009      	b.n	80090f4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80090e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80090e4:	2b09      	cmp	r3, #9
 80090e6:	dc02      	bgt.n	80090ee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80090e8:	8bfb      	ldrh	r3, [r7, #30]
 80090ea:	843b      	strh	r3, [r7, #32]
 80090ec:	e002      	b.n	80090f4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80090ee:	f04f 33ff 	mov.w	r3, #4294967295
 80090f2:	e054      	b.n	800919e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80090f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80090f8:	2b09      	cmp	r3, #9
 80090fa:	dd06      	ble.n	800910a <etharp_find_entry+0x236>
 80090fc:	4b2b      	ldr	r3, [pc, #172]	@ (80091ac <etharp_find_entry+0x2d8>)
 80090fe:	f240 127f 	movw	r2, #383	@ 0x17f
 8009102:	492e      	ldr	r1, [pc, #184]	@ (80091bc <etharp_find_entry+0x2e8>)
 8009104:	482b      	ldr	r0, [pc, #172]	@ (80091b4 <etharp_find_entry+0x2e0>)
 8009106:	f002 f9c7 	bl	800b498 <iprintf>
    etharp_free_entry(i);
 800910a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800910e:	4618      	mov	r0, r3
 8009110:	f7ff fe06 	bl	8008d20 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009114:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009118:	2b09      	cmp	r3, #9
 800911a:	dd06      	ble.n	800912a <etharp_find_entry+0x256>
 800911c:	4b23      	ldr	r3, [pc, #140]	@ (80091ac <etharp_find_entry+0x2d8>)
 800911e:	f240 1283 	movw	r2, #387	@ 0x183
 8009122:	4926      	ldr	r1, [pc, #152]	@ (80091bc <etharp_find_entry+0x2e8>)
 8009124:	4823      	ldr	r0, [pc, #140]	@ (80091b4 <etharp_find_entry+0x2e0>)
 8009126:	f002 f9b7 	bl	800b498 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800912a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800912e:	491e      	ldr	r1, [pc, #120]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8009130:	4613      	mov	r3, r2
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	4413      	add	r3, r2
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	440b      	add	r3, r1
 800913a:	3314      	adds	r3, #20
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d006      	beq.n	8009150 <etharp_find_entry+0x27c>
 8009142:	4b1a      	ldr	r3, [pc, #104]	@ (80091ac <etharp_find_entry+0x2d8>)
 8009144:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8009148:	491d      	ldr	r1, [pc, #116]	@ (80091c0 <etharp_find_entry+0x2ec>)
 800914a:	481a      	ldr	r0, [pc, #104]	@ (80091b4 <etharp_find_entry+0x2e0>)
 800914c:	f002 f9a4 	bl	800b498 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00b      	beq.n	800916e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009156:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6819      	ldr	r1, [r3, #0]
 800915e:	4812      	ldr	r0, [pc, #72]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8009160:	4613      	mov	r3, r2
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	4413      	add	r3, r2
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	4403      	add	r3, r0
 800916a:	3304      	adds	r3, #4
 800916c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800916e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009172:	490d      	ldr	r1, [pc, #52]	@ (80091a8 <etharp_find_entry+0x2d4>)
 8009174:	4613      	mov	r3, r2
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	4413      	add	r3, r2
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	440b      	add	r3, r1
 800917e:	3312      	adds	r3, #18
 8009180:	2200      	movs	r2, #0
 8009182:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8009184:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009188:	4907      	ldr	r1, [pc, #28]	@ (80091a8 <etharp_find_entry+0x2d4>)
 800918a:	4613      	mov	r3, r2
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	4413      	add	r3, r2
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	440b      	add	r3, r1
 8009194:	3308      	adds	r3, #8
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800919a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3728      	adds	r7, #40	@ 0x28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20008310 	.word	0x20008310
 80091ac:	0800d16c 	.word	0x0800d16c
 80091b0:	0800d1a4 	.word	0x0800d1a4
 80091b4:	0800d1e4 	.word	0x0800d1e4
 80091b8:	0800d20c 	.word	0x0800d20c
 80091bc:	0800d224 	.word	0x0800d224
 80091c0:	0800d238 	.word	0x0800d238

080091c4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af02      	add	r7, sp, #8
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80091d8:	2b06      	cmp	r3, #6
 80091da:	d006      	beq.n	80091ea <etharp_update_arp_entry+0x26>
 80091dc:	4b48      	ldr	r3, [pc, #288]	@ (8009300 <etharp_update_arp_entry+0x13c>)
 80091de:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80091e2:	4948      	ldr	r1, [pc, #288]	@ (8009304 <etharp_update_arp_entry+0x140>)
 80091e4:	4848      	ldr	r0, [pc, #288]	@ (8009308 <etharp_update_arp_entry+0x144>)
 80091e6:	f002 f957 	bl	800b498 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d012      	beq.n	8009216 <etharp_update_arp_entry+0x52>
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00e      	beq.n	8009216 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68f9      	ldr	r1, [r7, #12]
 80091fe:	4618      	mov	r0, r3
 8009200:	f001 f8f4 	bl	800a3ec <ip4_addr_isbroadcast_u32>
 8009204:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8009206:	2b00      	cmp	r3, #0
 8009208:	d105      	bne.n	8009216 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009212:	2be0      	cmp	r3, #224	@ 0xe0
 8009214:	d102      	bne.n	800921c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009216:	f06f 030f 	mvn.w	r3, #15
 800921a:	e06c      	b.n	80092f6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	4619      	mov	r1, r3
 8009222:	68b8      	ldr	r0, [r7, #8]
 8009224:	f7ff fe56 	bl	8008ed4 <etharp_find_entry>
 8009228:	4603      	mov	r3, r0
 800922a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800922c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009230:	2b00      	cmp	r3, #0
 8009232:	da02      	bge.n	800923a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8009234:	8afb      	ldrh	r3, [r7, #22]
 8009236:	b25b      	sxtb	r3, r3
 8009238:	e05d      	b.n	80092f6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800923a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800923e:	4933      	ldr	r1, [pc, #204]	@ (800930c <etharp_update_arp_entry+0x148>)
 8009240:	4613      	mov	r3, r2
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	4413      	add	r3, r2
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	440b      	add	r3, r1
 800924a:	3314      	adds	r3, #20
 800924c:	2202      	movs	r2, #2
 800924e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8009250:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009254:	492d      	ldr	r1, [pc, #180]	@ (800930c <etharp_update_arp_entry+0x148>)
 8009256:	4613      	mov	r3, r2
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	4413      	add	r3, r2
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	440b      	add	r3, r1
 8009260:	3308      	adds	r3, #8
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8009266:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800926a:	4613      	mov	r3, r2
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	4413      	add	r3, r2
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	3308      	adds	r3, #8
 8009274:	4a25      	ldr	r2, [pc, #148]	@ (800930c <etharp_update_arp_entry+0x148>)
 8009276:	4413      	add	r3, r2
 8009278:	3304      	adds	r3, #4
 800927a:	2206      	movs	r2, #6
 800927c:	6879      	ldr	r1, [r7, #4]
 800927e:	4618      	mov	r0, r3
 8009280:	f002 f9e5 	bl	800b64e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8009284:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009288:	4920      	ldr	r1, [pc, #128]	@ (800930c <etharp_update_arp_entry+0x148>)
 800928a:	4613      	mov	r3, r2
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	4413      	add	r3, r2
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	440b      	add	r3, r1
 8009294:	3312      	adds	r3, #18
 8009296:	2200      	movs	r2, #0
 8009298:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800929a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800929e:	491b      	ldr	r1, [pc, #108]	@ (800930c <etharp_update_arp_entry+0x148>)
 80092a0:	4613      	mov	r3, r2
 80092a2:	005b      	lsls	r3, r3, #1
 80092a4:	4413      	add	r3, r2
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	440b      	add	r3, r1
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d021      	beq.n	80092f4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80092b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80092b4:	4915      	ldr	r1, [pc, #84]	@ (800930c <etharp_update_arp_entry+0x148>)
 80092b6:	4613      	mov	r3, r2
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	4413      	add	r3, r2
 80092bc:	00db      	lsls	r3, r3, #3
 80092be:	440b      	add	r3, r1
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80092c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80092c8:	4910      	ldr	r1, [pc, #64]	@ (800930c <etharp_update_arp_entry+0x148>)
 80092ca:	4613      	mov	r3, r2
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	4413      	add	r3, r2
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	440b      	add	r3, r1
 80092d4:	2200      	movs	r2, #0
 80092d6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80092de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6939      	ldr	r1, [r7, #16]
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f001 ff8d 	bl	800b208 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80092ee:	6938      	ldr	r0, [r7, #16]
 80092f0:	f7fe fc2c 	bl	8007b4c <pbuf_free>
  }
  return ERR_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	0800d16c 	.word	0x0800d16c
 8009304:	0800d264 	.word	0x0800d264
 8009308:	0800d1e4 	.word	0x0800d1e4
 800930c:	20008310 	.word	0x20008310

08009310 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	e01e      	b.n	800935c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800931e:	4913      	ldr	r1, [pc, #76]	@ (800936c <etharp_cleanup_netif+0x5c>)
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	4613      	mov	r3, r2
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	4413      	add	r3, r2
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	440b      	add	r3, r1
 800932c:	3314      	adds	r3, #20
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009332:	7afb      	ldrb	r3, [r7, #11]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00e      	beq.n	8009356 <etharp_cleanup_netif+0x46>
 8009338:	490c      	ldr	r1, [pc, #48]	@ (800936c <etharp_cleanup_netif+0x5c>)
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	4613      	mov	r3, r2
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	4413      	add	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	440b      	add	r3, r1
 8009346:	3308      	adds	r3, #8
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	429a      	cmp	r2, r3
 800934e:	d102      	bne.n	8009356 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f7ff fce5 	bl	8008d20 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	3301      	adds	r3, #1
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b09      	cmp	r3, #9
 8009360:	dddd      	ble.n	800931e <etharp_cleanup_netif+0xe>
    }
  }
}
 8009362:	bf00      	nop
 8009364:	bf00      	nop
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20008310 	.word	0x20008310

08009370 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8009370:	b5b0      	push	{r4, r5, r7, lr}
 8009372:	b08a      	sub	sp, #40	@ 0x28
 8009374:	af04      	add	r7, sp, #16
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d107      	bne.n	8009390 <etharp_input+0x20>
 8009380:	4b3d      	ldr	r3, [pc, #244]	@ (8009478 <etharp_input+0x108>)
 8009382:	f240 228a 	movw	r2, #650	@ 0x28a
 8009386:	493d      	ldr	r1, [pc, #244]	@ (800947c <etharp_input+0x10c>)
 8009388:	483d      	ldr	r0, [pc, #244]	@ (8009480 <etharp_input+0x110>)
 800938a:	f002 f885 	bl	800b498 <iprintf>
 800938e:	e06f      	b.n	8009470 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	b29b      	uxth	r3, r3
 800939c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093a0:	d10c      	bne.n	80093bc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80093a6:	2b06      	cmp	r3, #6
 80093a8:	d108      	bne.n	80093bc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d104      	bne.n	80093bc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	885b      	ldrh	r3, [r3, #2]
 80093b6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	d003      	beq.n	80093c4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7fe fbc5 	bl	8007b4c <pbuf_free>
    return;
 80093c2:	e055      	b.n	8009470 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	330e      	adds	r3, #14
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	3318      	adds	r3, #24
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	3304      	adds	r3, #4
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d102      	bne.n	80093e4 <etharp_input+0x74>
    for_us = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	75fb      	strb	r3, [r7, #23]
 80093e2:	e009      	b.n	80093f8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	3304      	adds	r3, #4
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	bf0c      	ite	eq
 80093f0:	2301      	moveq	r3, #1
 80093f2:	2300      	movne	r3, #0
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f103 0208 	add.w	r2, r3, #8
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <etharp_input+0x98>
 8009404:	2301      	movs	r3, #1
 8009406:	e000      	b.n	800940a <etharp_input+0x9a>
 8009408:	2302      	movs	r3, #2
 800940a:	f107 010c 	add.w	r1, r7, #12
 800940e:	6838      	ldr	r0, [r7, #0]
 8009410:	f7ff fed8 	bl	80091c4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	88db      	ldrh	r3, [r3, #6]
 8009418:	b29b      	uxth	r3, r3
 800941a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800941e:	d003      	beq.n	8009428 <etharp_input+0xb8>
 8009420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009424:	d01e      	beq.n	8009464 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8009426:	e020      	b.n	800946a <etharp_input+0xfa>
      if (for_us) {
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d01c      	beq.n	8009468 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	3208      	adds	r2, #8
        etharp_raw(netif,
 8009448:	2102      	movs	r1, #2
 800944a:	9103      	str	r1, [sp, #12]
 800944c:	f107 010c 	add.w	r1, r7, #12
 8009450:	9102      	str	r1, [sp, #8]
 8009452:	9201      	str	r2, [sp, #4]
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	462b      	mov	r3, r5
 8009458:	4622      	mov	r2, r4
 800945a:	4601      	mov	r1, r0
 800945c:	6838      	ldr	r0, [r7, #0]
 800945e:	f000 faeb 	bl	8009a38 <etharp_raw>
      break;
 8009462:	e001      	b.n	8009468 <etharp_input+0xf8>
      break;
 8009464:	bf00      	nop
 8009466:	e000      	b.n	800946a <etharp_input+0xfa>
      break;
 8009468:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7fe fb6e 	bl	8007b4c <pbuf_free>
}
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bdb0      	pop	{r4, r5, r7, pc}
 8009476:	bf00      	nop
 8009478:	0800d16c 	.word	0x0800d16c
 800947c:	0800d2bc 	.word	0x0800d2bc
 8009480:	0800d1e4 	.word	0x0800d1e4

08009484 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af02      	add	r7, sp, #8
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	4613      	mov	r3, r2
 8009490:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009492:	79fa      	ldrb	r2, [r7, #7]
 8009494:	4944      	ldr	r1, [pc, #272]	@ (80095a8 <etharp_output_to_arp_index+0x124>)
 8009496:	4613      	mov	r3, r2
 8009498:	005b      	lsls	r3, r3, #1
 800949a:	4413      	add	r3, r2
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	440b      	add	r3, r1
 80094a0:	3314      	adds	r3, #20
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d806      	bhi.n	80094b6 <etharp_output_to_arp_index+0x32>
 80094a8:	4b40      	ldr	r3, [pc, #256]	@ (80095ac <etharp_output_to_arp_index+0x128>)
 80094aa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80094ae:	4940      	ldr	r1, [pc, #256]	@ (80095b0 <etharp_output_to_arp_index+0x12c>)
 80094b0:	4840      	ldr	r0, [pc, #256]	@ (80095b4 <etharp_output_to_arp_index+0x130>)
 80094b2:	f001 fff1 	bl	800b498 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80094b6:	79fa      	ldrb	r2, [r7, #7]
 80094b8:	493b      	ldr	r1, [pc, #236]	@ (80095a8 <etharp_output_to_arp_index+0x124>)
 80094ba:	4613      	mov	r3, r2
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	4413      	add	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	440b      	add	r3, r1
 80094c4:	3314      	adds	r3, #20
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d153      	bne.n	8009574 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80094cc:	79fa      	ldrb	r2, [r7, #7]
 80094ce:	4936      	ldr	r1, [pc, #216]	@ (80095a8 <etharp_output_to_arp_index+0x124>)
 80094d0:	4613      	mov	r3, r2
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	4413      	add	r3, r2
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	440b      	add	r3, r1
 80094da:	3312      	adds	r3, #18
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80094e2:	d919      	bls.n	8009518 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80094e4:	79fa      	ldrb	r2, [r7, #7]
 80094e6:	4613      	mov	r3, r2
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	4413      	add	r3, r2
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	4a2e      	ldr	r2, [pc, #184]	@ (80095a8 <etharp_output_to_arp_index+0x124>)
 80094f0:	4413      	add	r3, r2
 80094f2:	3304      	adds	r3, #4
 80094f4:	4619      	mov	r1, r3
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 fb4c 	bl	8009b94 <etharp_request>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d138      	bne.n	8009574 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009502:	79fa      	ldrb	r2, [r7, #7]
 8009504:	4928      	ldr	r1, [pc, #160]	@ (80095a8 <etharp_output_to_arp_index+0x124>)
 8009506:	4613      	mov	r3, r2
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	4413      	add	r3, r2
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	440b      	add	r3, r1
 8009510:	3314      	adds	r3, #20
 8009512:	2203      	movs	r2, #3
 8009514:	701a      	strb	r2, [r3, #0]
 8009516:	e02d      	b.n	8009574 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8009518:	79fa      	ldrb	r2, [r7, #7]
 800951a:	4923      	ldr	r1, [pc, #140]	@ (80095a8 <etharp_output_to_arp_index+0x124>)
 800951c:	4613      	mov	r3, r2
 800951e:	005b      	lsls	r3, r3, #1
 8009520:	4413      	add	r3, r2
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	440b      	add	r3, r1
 8009526:	3312      	adds	r3, #18
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800952e:	d321      	bcc.n	8009574 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009530:	79fa      	ldrb	r2, [r7, #7]
 8009532:	4613      	mov	r3, r2
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	4413      	add	r3, r2
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	4a1b      	ldr	r2, [pc, #108]	@ (80095a8 <etharp_output_to_arp_index+0x124>)
 800953c:	4413      	add	r3, r2
 800953e:	1d19      	adds	r1, r3, #4
 8009540:	79fa      	ldrb	r2, [r7, #7]
 8009542:	4613      	mov	r3, r2
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	4413      	add	r3, r2
 8009548:	00db      	lsls	r3, r3, #3
 800954a:	3308      	adds	r3, #8
 800954c:	4a16      	ldr	r2, [pc, #88]	@ (80095a8 <etharp_output_to_arp_index+0x124>)
 800954e:	4413      	add	r3, r2
 8009550:	3304      	adds	r3, #4
 8009552:	461a      	mov	r2, r3
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 fafb 	bl	8009b50 <etharp_request_dst>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d109      	bne.n	8009574 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009560:	79fa      	ldrb	r2, [r7, #7]
 8009562:	4911      	ldr	r1, [pc, #68]	@ (80095a8 <etharp_output_to_arp_index+0x124>)
 8009564:	4613      	mov	r3, r2
 8009566:	005b      	lsls	r3, r3, #1
 8009568:	4413      	add	r3, r2
 800956a:	00db      	lsls	r3, r3, #3
 800956c:	440b      	add	r3, r1
 800956e:	3314      	adds	r3, #20
 8009570:	2203      	movs	r2, #3
 8009572:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800957a:	79fa      	ldrb	r2, [r7, #7]
 800957c:	4613      	mov	r3, r2
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	4413      	add	r3, r2
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	3308      	adds	r3, #8
 8009586:	4a08      	ldr	r2, [pc, #32]	@ (80095a8 <etharp_output_to_arp_index+0x124>)
 8009588:	4413      	add	r3, r2
 800958a:	3304      	adds	r3, #4
 800958c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009590:	9200      	str	r2, [sp, #0]
 8009592:	460a      	mov	r2, r1
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f001 fe36 	bl	800b208 <ethernet_output>
 800959c:	4603      	mov	r3, r0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20008310 	.word	0x20008310
 80095ac:	0800d16c 	.word	0x0800d16c
 80095b0:	0800d2dc 	.word	0x0800d2dc
 80095b4:	0800d1e4 	.word	0x0800d1e4

080095b8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08a      	sub	sp, #40	@ 0x28
 80095bc:	af02      	add	r7, sp, #8
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d106      	bne.n	80095dc <etharp_output+0x24>
 80095ce:	4b73      	ldr	r3, [pc, #460]	@ (800979c <etharp_output+0x1e4>)
 80095d0:	f240 321e 	movw	r2, #798	@ 0x31e
 80095d4:	4972      	ldr	r1, [pc, #456]	@ (80097a0 <etharp_output+0x1e8>)
 80095d6:	4873      	ldr	r0, [pc, #460]	@ (80097a4 <etharp_output+0x1ec>)
 80095d8:	f001 ff5e 	bl	800b498 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d106      	bne.n	80095f0 <etharp_output+0x38>
 80095e2:	4b6e      	ldr	r3, [pc, #440]	@ (800979c <etharp_output+0x1e4>)
 80095e4:	f240 321f 	movw	r2, #799	@ 0x31f
 80095e8:	496f      	ldr	r1, [pc, #444]	@ (80097a8 <etharp_output+0x1f0>)
 80095ea:	486e      	ldr	r0, [pc, #440]	@ (80097a4 <etharp_output+0x1ec>)
 80095ec:	f001 ff54 	bl	800b498 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <etharp_output+0x4c>
 80095f6:	4b69      	ldr	r3, [pc, #420]	@ (800979c <etharp_output+0x1e4>)
 80095f8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80095fc:	496b      	ldr	r1, [pc, #428]	@ (80097ac <etharp_output+0x1f4>)
 80095fe:	4869      	ldr	r0, [pc, #420]	@ (80097a4 <etharp_output+0x1ec>)
 8009600:	f001 ff4a 	bl	800b498 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68f9      	ldr	r1, [r7, #12]
 800960a:	4618      	mov	r0, r3
 800960c:	f000 feee 	bl	800a3ec <ip4_addr_isbroadcast_u32>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8009616:	4b66      	ldr	r3, [pc, #408]	@ (80097b0 <etharp_output+0x1f8>)
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	e0af      	b.n	800977c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009624:	2be0      	cmp	r3, #224	@ 0xe0
 8009626:	d118      	bne.n	800965a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009628:	2301      	movs	r3, #1
 800962a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800962c:	2300      	movs	r3, #0
 800962e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8009630:	235e      	movs	r3, #94	@ 0x5e
 8009632:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3301      	adds	r3, #1
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800963e:	b2db      	uxtb	r3, r3
 8009640:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3302      	adds	r3, #2
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3303      	adds	r3, #3
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8009652:	f107 0310 	add.w	r3, r7, #16
 8009656:	61fb      	str	r3, [r7, #28]
 8009658:	e090      	b.n	800977c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3304      	adds	r3, #4
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	405a      	eors	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3308      	adds	r3, #8
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4013      	ands	r3, r2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d012      	beq.n	8009698 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009678:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800967c:	4293      	cmp	r3, r2
 800967e:	d00b      	beq.n	8009698 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	330c      	adds	r3, #12
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d003      	beq.n	8009692 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	330c      	adds	r3, #12
 800968e:	61bb      	str	r3, [r7, #24]
 8009690:	e002      	b.n	8009698 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8009692:	f06f 0303 	mvn.w	r3, #3
 8009696:	e07d      	b.n	8009794 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009698:	4b46      	ldr	r3, [pc, #280]	@ (80097b4 <etharp_output+0x1fc>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	4619      	mov	r1, r3
 800969e:	4a46      	ldr	r2, [pc, #280]	@ (80097b8 <etharp_output+0x200>)
 80096a0:	460b      	mov	r3, r1
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	440b      	add	r3, r1
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	4413      	add	r3, r2
 80096aa:	3314      	adds	r3, #20
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d925      	bls.n	80096fe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80096b2:	4b40      	ldr	r3, [pc, #256]	@ (80097b4 <etharp_output+0x1fc>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	4619      	mov	r1, r3
 80096b8:	4a3f      	ldr	r2, [pc, #252]	@ (80097b8 <etharp_output+0x200>)
 80096ba:	460b      	mov	r3, r1
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	440b      	add	r3, r1
 80096c0:	00db      	lsls	r3, r3, #3
 80096c2:	4413      	add	r3, r2
 80096c4:	3308      	adds	r3, #8
 80096c6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d117      	bne.n	80096fe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	4b38      	ldr	r3, [pc, #224]	@ (80097b4 <etharp_output+0x1fc>)
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	4618      	mov	r0, r3
 80096d8:	4937      	ldr	r1, [pc, #220]	@ (80097b8 <etharp_output+0x200>)
 80096da:	4603      	mov	r3, r0
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	4403      	add	r3, r0
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	440b      	add	r3, r1
 80096e4:	3304      	adds	r3, #4
 80096e6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d108      	bne.n	80096fe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80096ec:	4b31      	ldr	r3, [pc, #196]	@ (80097b4 <etharp_output+0x1fc>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	461a      	mov	r2, r3
 80096f2:	68b9      	ldr	r1, [r7, #8]
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f7ff fec5 	bl	8009484 <etharp_output_to_arp_index>
 80096fa:	4603      	mov	r3, r0
 80096fc:	e04a      	b.n	8009794 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80096fe:	2300      	movs	r3, #0
 8009700:	75fb      	strb	r3, [r7, #23]
 8009702:	e031      	b.n	8009768 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009704:	7dfa      	ldrb	r2, [r7, #23]
 8009706:	492c      	ldr	r1, [pc, #176]	@ (80097b8 <etharp_output+0x200>)
 8009708:	4613      	mov	r3, r2
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	4413      	add	r3, r2
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	440b      	add	r3, r1
 8009712:	3314      	adds	r3, #20
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d923      	bls.n	8009762 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800971a:	7dfa      	ldrb	r2, [r7, #23]
 800971c:	4926      	ldr	r1, [pc, #152]	@ (80097b8 <etharp_output+0x200>)
 800971e:	4613      	mov	r3, r2
 8009720:	005b      	lsls	r3, r3, #1
 8009722:	4413      	add	r3, r2
 8009724:	00db      	lsls	r3, r3, #3
 8009726:	440b      	add	r3, r1
 8009728:	3308      	adds	r3, #8
 800972a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	429a      	cmp	r2, r3
 8009730:	d117      	bne.n	8009762 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	6819      	ldr	r1, [r3, #0]
 8009736:	7dfa      	ldrb	r2, [r7, #23]
 8009738:	481f      	ldr	r0, [pc, #124]	@ (80097b8 <etharp_output+0x200>)
 800973a:	4613      	mov	r3, r2
 800973c:	005b      	lsls	r3, r3, #1
 800973e:	4413      	add	r3, r2
 8009740:	00db      	lsls	r3, r3, #3
 8009742:	4403      	add	r3, r0
 8009744:	3304      	adds	r3, #4
 8009746:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8009748:	4299      	cmp	r1, r3
 800974a:	d10a      	bne.n	8009762 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800974c:	4a19      	ldr	r2, [pc, #100]	@ (80097b4 <etharp_output+0x1fc>)
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8009752:	7dfb      	ldrb	r3, [r7, #23]
 8009754:	461a      	mov	r2, r3
 8009756:	68b9      	ldr	r1, [r7, #8]
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7ff fe93 	bl	8009484 <etharp_output_to_arp_index>
 800975e:	4603      	mov	r3, r0
 8009760:	e018      	b.n	8009794 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	3301      	adds	r3, #1
 8009766:	75fb      	strb	r3, [r7, #23]
 8009768:	7dfb      	ldrb	r3, [r7, #23]
 800976a:	2b09      	cmp	r3, #9
 800976c:	d9ca      	bls.n	8009704 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	69b9      	ldr	r1, [r7, #24]
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 f822 	bl	80097bc <etharp_query>
 8009778:	4603      	mov	r3, r0
 800977a:	e00b      	b.n	8009794 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8009782:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	68b9      	ldr	r1, [r7, #8]
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f001 fd3b 	bl	800b208 <ethernet_output>
 8009792:	4603      	mov	r3, r0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3720      	adds	r7, #32
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	0800d16c 	.word	0x0800d16c
 80097a0:	0800d2bc 	.word	0x0800d2bc
 80097a4:	0800d1e4 	.word	0x0800d1e4
 80097a8:	0800d30c 	.word	0x0800d30c
 80097ac:	0800d2ac 	.word	0x0800d2ac
 80097b0:	0800d8c8 	.word	0x0800d8c8
 80097b4:	20008400 	.word	0x20008400
 80097b8:	20008310 	.word	0x20008310

080097bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08c      	sub	sp, #48	@ 0x30
 80097c0:	af02      	add	r7, sp, #8
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	3326      	adds	r3, #38	@ 0x26
 80097cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80097ce:	23ff      	movs	r3, #255	@ 0xff
 80097d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68f9      	ldr	r1, [r7, #12]
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fe04 	bl	800a3ec <ip4_addr_isbroadcast_u32>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10c      	bne.n	8009804 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80097f2:	2be0      	cmp	r3, #224	@ 0xe0
 80097f4:	d006      	beq.n	8009804 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d102      	bne.n	800980a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009804:	f06f 030f 	mvn.w	r3, #15
 8009808:	e101      	b.n	8009a0e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	2101      	movs	r1, #1
 800980e:	68b8      	ldr	r0, [r7, #8]
 8009810:	f7ff fb60 	bl	8008ed4 <etharp_find_entry>
 8009814:	4603      	mov	r3, r0
 8009816:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8009818:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800981c:	2b00      	cmp	r3, #0
 800981e:	da02      	bge.n	8009826 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8009820:	8a7b      	ldrh	r3, [r7, #18]
 8009822:	b25b      	sxtb	r3, r3
 8009824:	e0f3      	b.n	8009a0e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8009826:	8a7b      	ldrh	r3, [r7, #18]
 8009828:	2b7e      	cmp	r3, #126	@ 0x7e
 800982a:	d906      	bls.n	800983a <etharp_query+0x7e>
 800982c:	4b7a      	ldr	r3, [pc, #488]	@ (8009a18 <etharp_query+0x25c>)
 800982e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8009832:	497a      	ldr	r1, [pc, #488]	@ (8009a1c <etharp_query+0x260>)
 8009834:	487a      	ldr	r0, [pc, #488]	@ (8009a20 <etharp_query+0x264>)
 8009836:	f001 fe2f 	bl	800b498 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800983a:	8a7b      	ldrh	r3, [r7, #18]
 800983c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800983e:	7c7a      	ldrb	r2, [r7, #17]
 8009840:	4978      	ldr	r1, [pc, #480]	@ (8009a24 <etharp_query+0x268>)
 8009842:	4613      	mov	r3, r2
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	4413      	add	r3, r2
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	440b      	add	r3, r1
 800984c:	3314      	adds	r3, #20
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d115      	bne.n	8009880 <etharp_query+0xc4>
    is_new_entry = 1;
 8009854:	2301      	movs	r3, #1
 8009856:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009858:	7c7a      	ldrb	r2, [r7, #17]
 800985a:	4972      	ldr	r1, [pc, #456]	@ (8009a24 <etharp_query+0x268>)
 800985c:	4613      	mov	r3, r2
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	4413      	add	r3, r2
 8009862:	00db      	lsls	r3, r3, #3
 8009864:	440b      	add	r3, r1
 8009866:	3314      	adds	r3, #20
 8009868:	2201      	movs	r2, #1
 800986a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800986c:	7c7a      	ldrb	r2, [r7, #17]
 800986e:	496d      	ldr	r1, [pc, #436]	@ (8009a24 <etharp_query+0x268>)
 8009870:	4613      	mov	r3, r2
 8009872:	005b      	lsls	r3, r3, #1
 8009874:	4413      	add	r3, r2
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	440b      	add	r3, r1
 800987a:	3308      	adds	r3, #8
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8009880:	7c7a      	ldrb	r2, [r7, #17]
 8009882:	4968      	ldr	r1, [pc, #416]	@ (8009a24 <etharp_query+0x268>)
 8009884:	4613      	mov	r3, r2
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	4413      	add	r3, r2
 800988a:	00db      	lsls	r3, r3, #3
 800988c:	440b      	add	r3, r1
 800988e:	3314      	adds	r3, #20
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d011      	beq.n	80098ba <etharp_query+0xfe>
 8009896:	7c7a      	ldrb	r2, [r7, #17]
 8009898:	4962      	ldr	r1, [pc, #392]	@ (8009a24 <etharp_query+0x268>)
 800989a:	4613      	mov	r3, r2
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	4413      	add	r3, r2
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	440b      	add	r3, r1
 80098a4:	3314      	adds	r3, #20
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d806      	bhi.n	80098ba <etharp_query+0xfe>
 80098ac:	4b5a      	ldr	r3, [pc, #360]	@ (8009a18 <etharp_query+0x25c>)
 80098ae:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80098b2:	495d      	ldr	r1, [pc, #372]	@ (8009a28 <etharp_query+0x26c>)
 80098b4:	485a      	ldr	r0, [pc, #360]	@ (8009a20 <etharp_query+0x264>)
 80098b6:	f001 fdef 	bl	800b498 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d102      	bne.n	80098c6 <etharp_query+0x10a>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10c      	bne.n	80098e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80098c6:	68b9      	ldr	r1, [r7, #8]
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f000 f963 	bl	8009b94 <etharp_request>
 80098ce:	4603      	mov	r3, r0
 80098d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d102      	bne.n	80098e0 <etharp_query+0x124>
      return result;
 80098da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80098de:	e096      	b.n	8009a0e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d106      	bne.n	80098f4 <etharp_query+0x138>
 80098e6:	4b4c      	ldr	r3, [pc, #304]	@ (8009a18 <etharp_query+0x25c>)
 80098e8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80098ec:	494f      	ldr	r1, [pc, #316]	@ (8009a2c <etharp_query+0x270>)
 80098ee:	484c      	ldr	r0, [pc, #304]	@ (8009a20 <etharp_query+0x264>)
 80098f0:	f001 fdd2 	bl	800b498 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80098f4:	7c7a      	ldrb	r2, [r7, #17]
 80098f6:	494b      	ldr	r1, [pc, #300]	@ (8009a24 <etharp_query+0x268>)
 80098f8:	4613      	mov	r3, r2
 80098fa:	005b      	lsls	r3, r3, #1
 80098fc:	4413      	add	r3, r2
 80098fe:	00db      	lsls	r3, r3, #3
 8009900:	440b      	add	r3, r1
 8009902:	3314      	adds	r3, #20
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d917      	bls.n	800993a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800990a:	4a49      	ldr	r2, [pc, #292]	@ (8009a30 <etharp_query+0x274>)
 800990c:	7c7b      	ldrb	r3, [r7, #17]
 800990e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009910:	7c7a      	ldrb	r2, [r7, #17]
 8009912:	4613      	mov	r3, r2
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	4413      	add	r3, r2
 8009918:	00db      	lsls	r3, r3, #3
 800991a:	3308      	adds	r3, #8
 800991c:	4a41      	ldr	r2, [pc, #260]	@ (8009a24 <etharp_query+0x268>)
 800991e:	4413      	add	r3, r2
 8009920:	3304      	adds	r3, #4
 8009922:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009926:	9200      	str	r2, [sp, #0]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	6879      	ldr	r1, [r7, #4]
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f001 fc6b 	bl	800b208 <ethernet_output>
 8009932:	4603      	mov	r3, r0
 8009934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009938:	e067      	b.n	8009a0a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800993a:	7c7a      	ldrb	r2, [r7, #17]
 800993c:	4939      	ldr	r1, [pc, #228]	@ (8009a24 <etharp_query+0x268>)
 800993e:	4613      	mov	r3, r2
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	4413      	add	r3, r2
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	440b      	add	r3, r1
 8009948:	3314      	adds	r3, #20
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d15c      	bne.n	8009a0a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009950:	2300      	movs	r3, #0
 8009952:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009958:	e01c      	b.n	8009994 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	895a      	ldrh	r2, [r3, #10]
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	891b      	ldrh	r3, [r3, #8]
 8009962:	429a      	cmp	r2, r3
 8009964:	d10a      	bne.n	800997c <etharp_query+0x1c0>
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d006      	beq.n	800997c <etharp_query+0x1c0>
 800996e:	4b2a      	ldr	r3, [pc, #168]	@ (8009a18 <etharp_query+0x25c>)
 8009970:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8009974:	492f      	ldr	r1, [pc, #188]	@ (8009a34 <etharp_query+0x278>)
 8009976:	482a      	ldr	r0, [pc, #168]	@ (8009a20 <etharp_query+0x264>)
 8009978:	f001 fd8e 	bl	800b498 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	7b1b      	ldrb	r3, [r3, #12]
 8009980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <etharp_query+0x1d2>
        copy_needed = 1;
 8009988:	2301      	movs	r3, #1
 800998a:	61bb      	str	r3, [r7, #24]
        break;
 800998c:	e005      	b.n	800999a <etharp_query+0x1de>
      }
      p = p->next;
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1df      	bne.n	800995a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d007      	beq.n	80099b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80099a6:	200e      	movs	r0, #14
 80099a8:	f7fe fb5c 	bl	8008064 <pbuf_clone>
 80099ac:	61f8      	str	r0, [r7, #28]
 80099ae:	e004      	b.n	80099ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80099b4:	69f8      	ldr	r0, [r7, #28]
 80099b6:	f7fe f969 	bl	8007c8c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d021      	beq.n	8009a04 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80099c0:	7c7a      	ldrb	r2, [r7, #17]
 80099c2:	4918      	ldr	r1, [pc, #96]	@ (8009a24 <etharp_query+0x268>)
 80099c4:	4613      	mov	r3, r2
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	4413      	add	r3, r2
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	440b      	add	r3, r1
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00a      	beq.n	80099ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80099d4:	7c7a      	ldrb	r2, [r7, #17]
 80099d6:	4913      	ldr	r1, [pc, #76]	@ (8009a24 <etharp_query+0x268>)
 80099d8:	4613      	mov	r3, r2
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	4413      	add	r3, r2
 80099de:	00db      	lsls	r3, r3, #3
 80099e0:	440b      	add	r3, r1
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe f8b1 	bl	8007b4c <pbuf_free>
      }
      arp_table[i].q = p;
 80099ea:	7c7a      	ldrb	r2, [r7, #17]
 80099ec:	490d      	ldr	r1, [pc, #52]	@ (8009a24 <etharp_query+0x268>)
 80099ee:	4613      	mov	r3, r2
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	4413      	add	r3, r2
 80099f4:	00db      	lsls	r3, r3, #3
 80099f6:	440b      	add	r3, r1
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009a02:	e002      	b.n	8009a0a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8009a04:	23ff      	movs	r3, #255	@ 0xff
 8009a06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8009a0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3728      	adds	r7, #40	@ 0x28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	0800d16c 	.word	0x0800d16c
 8009a1c:	0800d318 	.word	0x0800d318
 8009a20:	0800d1e4 	.word	0x0800d1e4
 8009a24:	20008310 	.word	0x20008310
 8009a28:	0800d328 	.word	0x0800d328
 8009a2c:	0800d30c 	.word	0x0800d30c
 8009a30:	20008400 	.word	0x20008400
 8009a34:	0800d350 	.word	0x0800d350

08009a38 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b08a      	sub	sp, #40	@ 0x28
 8009a3c:	af02      	add	r7, sp, #8
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d106      	bne.n	8009a5e <etharp_raw+0x26>
 8009a50:	4b3a      	ldr	r3, [pc, #232]	@ (8009b3c <etharp_raw+0x104>)
 8009a52:	f240 4257 	movw	r2, #1111	@ 0x457
 8009a56:	493a      	ldr	r1, [pc, #232]	@ (8009b40 <etharp_raw+0x108>)
 8009a58:	483a      	ldr	r0, [pc, #232]	@ (8009b44 <etharp_raw+0x10c>)
 8009a5a:	f001 fd1d 	bl	800b498 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009a5e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009a62:	211c      	movs	r1, #28
 8009a64:	200e      	movs	r0, #14
 8009a66:	f7fd fd8f 	bl	8007588 <pbuf_alloc>
 8009a6a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8009a72:	f04f 33ff 	mov.w	r3, #4294967295
 8009a76:	e05d      	b.n	8009b34 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	895b      	ldrh	r3, [r3, #10]
 8009a7c:	2b1b      	cmp	r3, #27
 8009a7e:	d806      	bhi.n	8009a8e <etharp_raw+0x56>
 8009a80:	4b2e      	ldr	r3, [pc, #184]	@ (8009b3c <etharp_raw+0x104>)
 8009a82:	f240 4262 	movw	r2, #1122	@ 0x462
 8009a86:	4930      	ldr	r1, [pc, #192]	@ (8009b48 <etharp_raw+0x110>)
 8009a88:	482e      	ldr	r0, [pc, #184]	@ (8009b44 <etharp_raw+0x10c>)
 8009a8a:	f001 fd05 	bl	800b498 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009a94:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fc fd48 	bl	800652c <lwip_htons>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009aaa:	2b06      	cmp	r3, #6
 8009aac:	d006      	beq.n	8009abc <etharp_raw+0x84>
 8009aae:	4b23      	ldr	r3, [pc, #140]	@ (8009b3c <etharp_raw+0x104>)
 8009ab0:	f240 4269 	movw	r2, #1129	@ 0x469
 8009ab4:	4925      	ldr	r1, [pc, #148]	@ (8009b4c <etharp_raw+0x114>)
 8009ab6:	4823      	ldr	r0, [pc, #140]	@ (8009b44 <etharp_raw+0x10c>)
 8009ab8:	f001 fcee 	bl	800b498 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	3308      	adds	r3, #8
 8009ac0:	2206      	movs	r2, #6
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f001 fdc2 	bl	800b64e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	3312      	adds	r3, #18
 8009ace:	2206      	movs	r2, #6
 8009ad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f001 fdbb 	bl	800b64e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	330e      	adds	r3, #14
 8009adc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ade:	6812      	ldr	r2, [r2, #0]
 8009ae0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	3318      	adds	r3, #24
 8009ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	2200      	movs	r2, #0
 8009af0:	701a      	strb	r2, [r3, #0]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f042 0201 	orr.w	r2, r2, #1
 8009af8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f042 0208 	orr.w	r2, r2, #8
 8009b02:	709a      	strb	r2, [r3, #2]
 8009b04:	2200      	movs	r2, #0
 8009b06:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2206      	movs	r2, #6
 8009b0c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2204      	movs	r2, #4
 8009b12:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009b14:	f640 0306 	movw	r3, #2054	@ 0x806
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	69b9      	ldr	r1, [r7, #24]
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f001 fb71 	bl	800b208 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009b26:	69b8      	ldr	r0, [r7, #24]
 8009b28:	f7fe f810 	bl	8007b4c <pbuf_free>
  p = NULL;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009b30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3720      	adds	r7, #32
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	0800d16c 	.word	0x0800d16c
 8009b40:	0800d2bc 	.word	0x0800d2bc
 8009b44:	0800d1e4 	.word	0x0800d1e4
 8009b48:	0800d36c 	.word	0x0800d36c
 8009b4c:	0800d3a0 	.word	0x0800d3a0

08009b50 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b088      	sub	sp, #32
 8009b54:	af04      	add	r7, sp, #16
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	9203      	str	r2, [sp, #12]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	9202      	str	r2, [sp, #8]
 8009b74:	4a06      	ldr	r2, [pc, #24]	@ (8009b90 <etharp_request_dst+0x40>)
 8009b76:	9201      	str	r2, [sp, #4]
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7ff ff5a 	bl	8009a38 <etharp_raw>
 8009b84:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	0800d8d0 	.word	0x0800d8d0

08009b94 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8009b9e:	4a05      	ldr	r2, [pc, #20]	@ (8009bb4 <etharp_request+0x20>)
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff ffd4 	bl	8009b50 <etharp_request_dst>
 8009ba8:	4603      	mov	r3, r0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	0800d8c8 	.word	0x0800d8c8

08009bb8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08e      	sub	sp, #56	@ 0x38
 8009bbc:	af04      	add	r7, sp, #16
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8009bc2:	4b79      	ldr	r3, [pc, #484]	@ (8009da8 <icmp_input+0x1f0>)
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	f003 030f 	and.w	r3, r3, #15
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8009bd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009bda:	2b13      	cmp	r3, #19
 8009bdc:	f240 80cd 	bls.w	8009d7a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	895b      	ldrh	r3, [r3, #10]
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	f240 80ca 	bls.w	8009d7e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8009bf4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 80b7 	beq.w	8009d6c <icmp_input+0x1b4>
 8009bfe:	2b08      	cmp	r3, #8
 8009c00:	f040 80b7 	bne.w	8009d72 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8009c04:	4b69      	ldr	r3, [pc, #420]	@ (8009dac <icmp_input+0x1f4>)
 8009c06:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009c08:	4b67      	ldr	r3, [pc, #412]	@ (8009da8 <icmp_input+0x1f0>)
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c10:	2be0      	cmp	r3, #224	@ 0xe0
 8009c12:	f000 80bb 	beq.w	8009d8c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009c16:	4b64      	ldr	r3, [pc, #400]	@ (8009da8 <icmp_input+0x1f0>)
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	4a63      	ldr	r2, [pc, #396]	@ (8009da8 <icmp_input+0x1f0>)
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	4611      	mov	r1, r2
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 fbe3 	bl	800a3ec <ip4_addr_isbroadcast_u32>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f040 80b1 	bne.w	8009d90 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	891b      	ldrh	r3, [r3, #8]
 8009c32:	2b07      	cmp	r3, #7
 8009c34:	f240 80a5 	bls.w	8009d82 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009c38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c3a:	330e      	adds	r3, #14
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7fd feee 	bl	8007a20 <pbuf_add_header>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d04b      	beq.n	8009ce2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	891a      	ldrh	r2, [r3, #8]
 8009c4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c50:	4413      	add	r3, r2
 8009c52:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	891b      	ldrh	r3, [r3, #8]
 8009c58:	8b7a      	ldrh	r2, [r7, #26]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	f0c0 809a 	bcc.w	8009d94 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8009c60:	8b7b      	ldrh	r3, [r7, #26]
 8009c62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009c66:	4619      	mov	r1, r3
 8009c68:	200e      	movs	r0, #14
 8009c6a:	f7fd fc8d 	bl	8007588 <pbuf_alloc>
 8009c6e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 8090 	beq.w	8009d98 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	895b      	ldrh	r3, [r3, #10]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c80:	3308      	adds	r3, #8
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d203      	bcs.n	8009c8e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8009c86:	6978      	ldr	r0, [r7, #20]
 8009c88:	f7fd ff60 	bl	8007b4c <pbuf_free>
          goto icmperr;
 8009c8c:	e085      	b.n	8009d9a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009c94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 fcd9 	bl	800b64e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8009c9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6978      	ldr	r0, [r7, #20]
 8009ca2:	f7fd fecd 	bl	8007a40 <pbuf_remove_header>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d009      	beq.n	8009cc0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8009cac:	4b40      	ldr	r3, [pc, #256]	@ (8009db0 <icmp_input+0x1f8>)
 8009cae:	22b6      	movs	r2, #182	@ 0xb6
 8009cb0:	4940      	ldr	r1, [pc, #256]	@ (8009db4 <icmp_input+0x1fc>)
 8009cb2:	4841      	ldr	r0, [pc, #260]	@ (8009db8 <icmp_input+0x200>)
 8009cb4:	f001 fbf0 	bl	800b498 <iprintf>
          pbuf_free(r);
 8009cb8:	6978      	ldr	r0, [r7, #20]
 8009cba:	f7fd ff47 	bl	8007b4c <pbuf_free>
          goto icmperr;
 8009cbe:	e06c      	b.n	8009d9a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8009cc0:	6879      	ldr	r1, [r7, #4]
 8009cc2:	6978      	ldr	r0, [r7, #20]
 8009cc4:	f7fe f86a 	bl	8007d9c <pbuf_copy>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8009cce:	6978      	ldr	r0, [r7, #20]
 8009cd0:	f7fd ff3c 	bl	8007b4c <pbuf_free>
          goto icmperr;
 8009cd4:	e061      	b.n	8009d9a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7fd ff38 	bl	8007b4c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	607b      	str	r3, [r7, #4]
 8009ce0:	e00f      	b.n	8009d02 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009ce2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009ce4:	330e      	adds	r3, #14
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7fd fea9 	bl	8007a40 <pbuf_remove_header>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d006      	beq.n	8009d02 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8009cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8009db0 <icmp_input+0x1f8>)
 8009cf6:	22c7      	movs	r2, #199	@ 0xc7
 8009cf8:	4930      	ldr	r1, [pc, #192]	@ (8009dbc <icmp_input+0x204>)
 8009cfa:	482f      	ldr	r0, [pc, #188]	@ (8009db8 <icmp_input+0x200>)
 8009cfc:	f001 fbcc 	bl	800b498 <iprintf>
          goto icmperr;
 8009d00:	e04b      	b.n	8009d9a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8009d08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7fd fe87 	bl	8007a20 <pbuf_add_header>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d12b      	bne.n	8009d70 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8009d26:	4b20      	ldr	r3, [pc, #128]	@ (8009da8 <icmp_input+0x1f0>)
 8009d28:	691a      	ldr	r2, [r3, #16]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	2200      	movs	r2, #0
 8009d32:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	2200      	movs	r2, #0
 8009d38:	709a      	strb	r2, [r3, #2]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	22ff      	movs	r2, #255	@ 0xff
 8009d42:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	729a      	strb	r2, [r3, #10]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	9302      	str	r3, [sp, #8]
 8009d52:	2301      	movs	r3, #1
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	2300      	movs	r3, #0
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	23ff      	movs	r3, #255	@ 0xff
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	69f9      	ldr	r1, [r7, #28]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fa6b 	bl	800a23c <ip4_output_if>
 8009d66:	4603      	mov	r3, r0
 8009d68:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8009d6a:	e001      	b.n	8009d70 <icmp_input+0x1b8>
      break;
 8009d6c:	bf00      	nop
 8009d6e:	e000      	b.n	8009d72 <icmp_input+0x1ba>
      break;
 8009d70:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7fd feea 	bl	8007b4c <pbuf_free>
  return;
 8009d78:	e013      	b.n	8009da2 <icmp_input+0x1ea>
    goto lenerr;
 8009d7a:	bf00      	nop
 8009d7c:	e002      	b.n	8009d84 <icmp_input+0x1cc>
    goto lenerr;
 8009d7e:	bf00      	nop
 8009d80:	e000      	b.n	8009d84 <icmp_input+0x1cc>
        goto lenerr;
 8009d82:	bf00      	nop
lenerr:
  pbuf_free(p);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7fd fee1 	bl	8007b4c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8009d8a:	e00a      	b.n	8009da2 <icmp_input+0x1ea>
        goto icmperr;
 8009d8c:	bf00      	nop
 8009d8e:	e004      	b.n	8009d9a <icmp_input+0x1e2>
        goto icmperr;
 8009d90:	bf00      	nop
 8009d92:	e002      	b.n	8009d9a <icmp_input+0x1e2>
          goto icmperr;
 8009d94:	bf00      	nop
 8009d96:	e000      	b.n	8009d9a <icmp_input+0x1e2>
          goto icmperr;
 8009d98:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7fd fed6 	bl	8007b4c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8009da0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8009da2:	3728      	adds	r7, #40	@ 0x28
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	200052a8 	.word	0x200052a8
 8009dac:	200052bc 	.word	0x200052bc
 8009db0:	0800d3e4 	.word	0x0800d3e4
 8009db4:	0800d41c 	.word	0x0800d41c
 8009db8:	0800d454 	.word	0x0800d454
 8009dbc:	0800d47c 	.word	0x0800d47c

08009dc0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8009dcc:	78fb      	ldrb	r3, [r7, #3]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	2103      	movs	r1, #3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f814 	bl	8009e00 <icmp_send_response>
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8009dec:	78fb      	ldrb	r3, [r7, #3]
 8009dee:	461a      	mov	r2, r3
 8009df0:	210b      	movs	r1, #11
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f804 	bl	8009e00 <icmp_send_response>
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b08c      	sub	sp, #48	@ 0x30
 8009e04:	af04      	add	r7, sp, #16
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009e10:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009e14:	2124      	movs	r1, #36	@ 0x24
 8009e16:	2022      	movs	r0, #34	@ 0x22
 8009e18:	f7fd fbb6 	bl	8007588 <pbuf_alloc>
 8009e1c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d04c      	beq.n	8009ebe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	895b      	ldrh	r3, [r3, #10]
 8009e28:	2b23      	cmp	r3, #35	@ 0x23
 8009e2a:	d806      	bhi.n	8009e3a <icmp_send_response+0x3a>
 8009e2c:	4b26      	ldr	r3, [pc, #152]	@ (8009ec8 <icmp_send_response+0xc8>)
 8009e2e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8009e32:	4926      	ldr	r1, [pc, #152]	@ (8009ecc <icmp_send_response+0xcc>)
 8009e34:	4826      	ldr	r0, [pc, #152]	@ (8009ed0 <icmp_send_response+0xd0>)
 8009e36:	f001 fb2f 	bl	800b498 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	78fa      	ldrb	r2, [r7, #3]
 8009e4a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	78ba      	ldrb	r2, [r7, #2]
 8009e50:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2200      	movs	r2, #0
 8009e56:	711a      	strb	r2, [r3, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	719a      	strb	r2, [r3, #6]
 8009e62:	2200      	movs	r2, #0
 8009e64:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	f103 0008 	add.w	r0, r3, #8
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	221c      	movs	r2, #28
 8009e74:	4619      	mov	r1, r3
 8009e76:	f001 fbea 	bl	800b64e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8009e80:	f107 030c 	add.w	r3, r7, #12
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 f825 	bl	8009ed4 <ip4_route>
 8009e8a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d011      	beq.n	8009eb6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2200      	movs	r2, #0
 8009e96:	709a      	strb	r2, [r3, #2]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009e9c:	f107 020c 	add.w	r2, r7, #12
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	9302      	str	r3, [sp, #8]
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	23ff      	movs	r3, #255	@ 0xff
 8009eae:	2100      	movs	r1, #0
 8009eb0:	69f8      	ldr	r0, [r7, #28]
 8009eb2:	f000 f9c3 	bl	800a23c <ip4_output_if>
  }
  pbuf_free(q);
 8009eb6:	69f8      	ldr	r0, [r7, #28]
 8009eb8:	f7fd fe48 	bl	8007b4c <pbuf_free>
 8009ebc:	e000      	b.n	8009ec0 <icmp_send_response+0xc0>
    return;
 8009ebe:	bf00      	nop
}
 8009ec0:	3720      	adds	r7, #32
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	0800d3e4 	.word	0x0800d3e4
 8009ecc:	0800d4b0 	.word	0x0800d4b0
 8009ed0:	0800d454 	.word	0x0800d454

08009ed4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8009edc:	4b33      	ldr	r3, [pc, #204]	@ (8009fac <ip4_route+0xd8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	e036      	b.n	8009f52 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d02b      	beq.n	8009f4c <ip4_route+0x78>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009efa:	089b      	lsrs	r3, r3, #2
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d022      	beq.n	8009f4c <ip4_route+0x78>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3304      	adds	r3, #4
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d01d      	beq.n	8009f4c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	3304      	adds	r3, #4
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	405a      	eors	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4013      	ands	r3, r2
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d101      	bne.n	8009f2c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	e038      	b.n	8009f9e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009f32:	f003 0302 	and.w	r3, r3, #2
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d108      	bne.n	8009f4c <ip4_route+0x78>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	330c      	adds	r3, #12
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d101      	bne.n	8009f4c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	e028      	b.n	8009f9e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1c5      	bne.n	8009ee4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009f58:	4b15      	ldr	r3, [pc, #84]	@ (8009fb0 <ip4_route+0xdc>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d01a      	beq.n	8009f96 <ip4_route+0xc2>
 8009f60:	4b13      	ldr	r3, [pc, #76]	@ (8009fb0 <ip4_route+0xdc>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d012      	beq.n	8009f96 <ip4_route+0xc2>
 8009f70:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb0 <ip4_route+0xdc>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009f78:	f003 0304 	and.w	r3, r3, #4
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00a      	beq.n	8009f96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009f80:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb0 <ip4_route+0xdc>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3304      	adds	r3, #4
 8009f86:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d004      	beq.n	8009f96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f94:	d101      	bne.n	8009f9a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e001      	b.n	8009f9e <ip4_route+0xca>
  }

  return netif_default;
 8009f9a:	4b05      	ldr	r3, [pc, #20]	@ (8009fb0 <ip4_route+0xdc>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	200082f8 	.word	0x200082f8
 8009fb0:	200082fc 	.word	0x200082fc

08009fb4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009fc2:	f003 0301 	and.w	r3, r3, #1
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d016      	beq.n	8009ffa <ip4_input_accept+0x46>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d011      	beq.n	8009ffa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	@ (800a004 <ip4_input_accept+0x50>)
 8009fd8:	695a      	ldr	r2, [r3, #20]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	3304      	adds	r3, #4
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d008      	beq.n	8009ff6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8009fe4:	4b07      	ldr	r3, [pc, #28]	@ (800a004 <ip4_input_accept+0x50>)
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 f9fe 	bl	800a3ec <ip4_addr_isbroadcast_u32>
 8009ff0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e000      	b.n	8009ffc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	200052a8 	.word	0x200052a8

0800a008 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	091b      	lsrs	r3, r3, #4
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b04      	cmp	r3, #4
 800a022:	d004      	beq.n	800a02e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7fd fd91 	bl	8007b4c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	e0fd      	b.n	800a22a <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	f003 030f 	and.w	r3, r3, #15
 800a036:	b2db      	uxtb	r3, r3
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	885b      	ldrh	r3, [r3, #2]
 800a042:	b29b      	uxth	r3, r3
 800a044:	4618      	mov	r0, r3
 800a046:	f7fc fa71 	bl	800652c <lwip_htons>
 800a04a:	4603      	mov	r3, r0
 800a04c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	891b      	ldrh	r3, [r3, #8]
 800a052:	89ba      	ldrh	r2, [r7, #12]
 800a054:	429a      	cmp	r2, r3
 800a056:	d204      	bcs.n	800a062 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800a058:	89bb      	ldrh	r3, [r7, #12]
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7fd fbef 	bl	8007840 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	895b      	ldrh	r3, [r3, #10]
 800a066:	89fa      	ldrh	r2, [r7, #14]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d807      	bhi.n	800a07c <ip4_input+0x74>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	891b      	ldrh	r3, [r3, #8]
 800a070:	89ba      	ldrh	r2, [r7, #12]
 800a072:	429a      	cmp	r2, r3
 800a074:	d802      	bhi.n	800a07c <ip4_input+0x74>
 800a076:	89fb      	ldrh	r3, [r7, #14]
 800a078:	2b13      	cmp	r3, #19
 800a07a:	d804      	bhi.n	800a086 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7fd fd65 	bl	8007b4c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	e0d1      	b.n	800a22a <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	4a6a      	ldr	r2, [pc, #424]	@ (800a234 <ip4_input+0x22c>)
 800a08c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	4a68      	ldr	r2, [pc, #416]	@ (800a234 <ip4_input+0x22c>)
 800a094:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a096:	4b67      	ldr	r3, [pc, #412]	@ (800a234 <ip4_input+0x22c>)
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a09e:	2be0      	cmp	r3, #224	@ 0xe0
 800a0a0:	d112      	bne.n	800a0c8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d007      	beq.n	800a0c2 <ip4_input+0xba>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <ip4_input+0xba>
      netif = inp;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	613b      	str	r3, [r7, #16]
 800a0c0:	e02a      	b.n	800a118 <ip4_input+0x110>
    } else {
      netif = NULL;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	613b      	str	r3, [r7, #16]
 800a0c6:	e027      	b.n	800a118 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800a0c8:	6838      	ldr	r0, [r7, #0]
 800a0ca:	f7ff ff73 	bl	8009fb4 <ip4_input_accept>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <ip4_input+0xd2>
      netif = inp;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	613b      	str	r3, [r7, #16]
 800a0d8:	e01e      	b.n	800a118 <ip4_input+0x110>
    } else {
      netif = NULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800a0de:	4b55      	ldr	r3, [pc, #340]	@ (800a234 <ip4_input+0x22c>)
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b7f      	cmp	r3, #127	@ 0x7f
 800a0e6:	d017      	beq.n	800a118 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800a0e8:	4b53      	ldr	r3, [pc, #332]	@ (800a238 <ip4_input+0x230>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	613b      	str	r3, [r7, #16]
 800a0ee:	e00e      	b.n	800a10e <ip4_input+0x106>
          if (netif == inp) {
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d006      	beq.n	800a106 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800a0f8:	6938      	ldr	r0, [r7, #16]
 800a0fa:	f7ff ff5b 	bl	8009fb4 <ip4_input_accept>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d108      	bne.n	800a116 <ip4_input+0x10e>
 800a104:	e000      	b.n	800a108 <ip4_input+0x100>
            continue;
 800a106:	bf00      	nop
        NETIF_FOREACH(netif) {
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	613b      	str	r3, [r7, #16]
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1ed      	bne.n	800a0f0 <ip4_input+0xe8>
 800a114:	e000      	b.n	800a118 <ip4_input+0x110>
            break;
 800a116:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a118:	4b46      	ldr	r3, [pc, #280]	@ (800a234 <ip4_input+0x22c>)
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 f964 	bl	800a3ec <ip4_addr_isbroadcast_u32>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d105      	bne.n	800a136 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a12a:	4b42      	ldr	r3, [pc, #264]	@ (800a234 <ip4_input+0x22c>)
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a132:	2be0      	cmp	r3, #224	@ 0xe0
 800a134:	d104      	bne.n	800a140 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7fd fd08 	bl	8007b4c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	e074      	b.n	800a22a <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d104      	bne.n	800a150 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7fd fd00 	bl	8007b4c <pbuf_free>
    return ERR_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	e06c      	b.n	800a22a <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	88db      	ldrh	r3, [r3, #6]
 800a154:	b29b      	uxth	r3, r3
 800a156:	461a      	mov	r2, r3
 800a158:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800a15c:	4013      	ands	r3, r2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00b      	beq.n	800a17a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fc88 	bl	800aa78 <ip4_reass>
 800a168:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <ip4_input+0x16c>
      return ERR_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	e05a      	b.n	800a22a <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800a17a:	4a2e      	ldr	r2, [pc, #184]	@ (800a234 <ip4_input+0x22c>)
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800a180:	4a2c      	ldr	r2, [pc, #176]	@ (800a234 <ip4_input+0x22c>)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800a186:	4a2b      	ldr	r2, [pc, #172]	@ (800a234 <ip4_input+0x22c>)
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	f003 030f 	and.w	r3, r3, #15
 800a194:	b2db      	uxtb	r3, r3
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	461a      	mov	r2, r3
 800a19c:	4b25      	ldr	r3, [pc, #148]	@ (800a234 <ip4_input+0x22c>)
 800a19e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800a1a0:	89fb      	ldrh	r3, [r7, #14]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7fd fc4b 	bl	8007a40 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	7a5b      	ldrb	r3, [r3, #9]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d006      	beq.n	800a1c0 <ip4_input+0x1b8>
 800a1b2:	2b11      	cmp	r3, #17
 800a1b4:	d109      	bne.n	800a1ca <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7fe f955 	bl	8008468 <udp_input>
        break;
 800a1be:	e021      	b.n	800a204 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff fcf8 	bl	8009bb8 <icmp_input>
        break;
 800a1c8:	e01c      	b.n	800a204 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a1ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a234 <ip4_input+0x22c>)
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	6939      	ldr	r1, [r7, #16]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 f90b 	bl	800a3ec <ip4_addr_isbroadcast_u32>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10f      	bne.n	800a1fc <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a1dc:	4b15      	ldr	r3, [pc, #84]	@ (800a234 <ip4_input+0x22c>)
 800a1de:	695b      	ldr	r3, [r3, #20]
 800a1e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a1e4:	2be0      	cmp	r3, #224	@ 0xe0
 800a1e6:	d009      	beq.n	800a1fc <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800a1e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7fd fc99 	bl	8007b26 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a1f4:	2102      	movs	r1, #2
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7ff fde2 	bl	8009dc0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7fd fca5 	bl	8007b4c <pbuf_free>
        break;
 800a202:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800a204:	4b0b      	ldr	r3, [pc, #44]	@ (800a234 <ip4_input+0x22c>)
 800a206:	2200      	movs	r2, #0
 800a208:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800a20a:	4b0a      	ldr	r3, [pc, #40]	@ (800a234 <ip4_input+0x22c>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800a210:	4b08      	ldr	r3, [pc, #32]	@ (800a234 <ip4_input+0x22c>)
 800a212:	2200      	movs	r2, #0
 800a214:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a216:	4b07      	ldr	r3, [pc, #28]	@ (800a234 <ip4_input+0x22c>)
 800a218:	2200      	movs	r2, #0
 800a21a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800a21c:	4b05      	ldr	r3, [pc, #20]	@ (800a234 <ip4_input+0x22c>)
 800a21e:	2200      	movs	r2, #0
 800a220:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a222:	4b04      	ldr	r3, [pc, #16]	@ (800a234 <ip4_input+0x22c>)
 800a224:	2200      	movs	r2, #0
 800a226:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	200052a8 	.word	0x200052a8
 800a238:	200082f8 	.word	0x200082f8

0800a23c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08a      	sub	sp, #40	@ 0x28
 800a240:	af04      	add	r7, sp, #16
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d009      	beq.n	800a268 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <ip4_output_if+0x26>
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d102      	bne.n	800a268 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800a262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a264:	3304      	adds	r3, #4
 800a266:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a268:	78fa      	ldrb	r2, [r7, #3]
 800a26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26c:	9302      	str	r3, [sp, #8]
 800a26e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a272:	9301      	str	r3, [sp, #4]
 800a274:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	4613      	mov	r3, r2
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	6979      	ldr	r1, [r7, #20]
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 f805 	bl	800a290 <ip4_output_if_src>
 800a286:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3718      	adds	r7, #24
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b088      	sub	sp, #32
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
 800a29c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	7b9b      	ldrb	r3, [r3, #14]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d006      	beq.n	800a2b4 <ip4_output_if_src+0x24>
 800a2a6:	4b4b      	ldr	r3, [pc, #300]	@ (800a3d4 <ip4_output_if_src+0x144>)
 800a2a8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800a2ac:	494a      	ldr	r1, [pc, #296]	@ (800a3d8 <ip4_output_if_src+0x148>)
 800a2ae:	484b      	ldr	r0, [pc, #300]	@ (800a3dc <ip4_output_if_src+0x14c>)
 800a2b0:	f001 f8f2 	bl	800b498 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d060      	beq.n	800a37c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800a2ba:	2314      	movs	r3, #20
 800a2bc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800a2be:	2114      	movs	r1, #20
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f7fd fbad 	bl	8007a20 <pbuf_add_header>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a2cc:	f06f 0301 	mvn.w	r3, #1
 800a2d0:	e07c      	b.n	800a3cc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	895b      	ldrh	r3, [r3, #10]
 800a2dc:	2b13      	cmp	r3, #19
 800a2de:	d806      	bhi.n	800a2ee <ip4_output_if_src+0x5e>
 800a2e0:	4b3c      	ldr	r3, [pc, #240]	@ (800a3d4 <ip4_output_if_src+0x144>)
 800a2e2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800a2e6:	493e      	ldr	r1, [pc, #248]	@ (800a3e0 <ip4_output_if_src+0x150>)
 800a2e8:	483c      	ldr	r0, [pc, #240]	@ (800a3dc <ip4_output_if_src+0x14c>)
 800a2ea:	f001 f8d5 	bl	800b498 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	78fa      	ldrb	r2, [r7, #3]
 800a2f2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800a2fa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a304:	8b7b      	ldrh	r3, [r7, #26]
 800a306:	089b      	lsrs	r3, r3, #2
 800a308:	b29b      	uxth	r3, r3
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a310:	b2da      	uxtb	r2, r3
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a31c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	891b      	ldrh	r3, [r3, #8]
 800a322:	4618      	mov	r0, r3
 800a324:	f7fc f902 	bl	800652c <lwip_htons>
 800a328:	4603      	mov	r3, r0
 800a32a:	461a      	mov	r2, r3
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	2200      	movs	r2, #0
 800a334:	719a      	strb	r2, [r3, #6]
 800a336:	2200      	movs	r2, #0
 800a338:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a33a:	4b2a      	ldr	r3, [pc, #168]	@ (800a3e4 <ip4_output_if_src+0x154>)
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fc f8f4 	bl	800652c <lwip_htons>
 800a344:	4603      	mov	r3, r0
 800a346:	461a      	mov	r2, r3
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a34c:	4b25      	ldr	r3, [pc, #148]	@ (800a3e4 <ip4_output_if_src+0x154>)
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	3301      	adds	r3, #1
 800a352:	b29a      	uxth	r2, r3
 800a354:	4b23      	ldr	r3, [pc, #140]	@ (800a3e4 <ip4_output_if_src+0x154>)
 800a356:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d104      	bne.n	800a368 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a35e:	4b22      	ldr	r3, [pc, #136]	@ (800a3e8 <ip4_output_if_src+0x158>)
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	60da      	str	r2, [r3, #12]
 800a366:	e003      	b.n	800a370 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	2200      	movs	r2, #0
 800a374:	729a      	strb	r2, [r3, #10]
 800a376:	2200      	movs	r2, #0
 800a378:	72da      	strb	r2, [r3, #11]
 800a37a:	e00f      	b.n	800a39c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	895b      	ldrh	r3, [r3, #10]
 800a380:	2b13      	cmp	r3, #19
 800a382:	d802      	bhi.n	800a38a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a384:	f06f 0301 	mvn.w	r3, #1
 800a388:	e020      	b.n	800a3cc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800a396:	f107 0314 	add.w	r3, r7, #20
 800a39a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00c      	beq.n	800a3be <ip4_output_if_src+0x12e>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	891a      	ldrh	r2, [r3, #8]
 800a3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d906      	bls.n	800a3be <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fd53 	bl	800ae60 <ip4_frag>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	e006      	b.n	800a3cc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800a3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	68f9      	ldr	r1, [r7, #12]
 800a3c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3c8:	4798      	blx	r3
 800a3ca:	4603      	mov	r3, r0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3720      	adds	r7, #32
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	0800d4dc 	.word	0x0800d4dc
 800a3d8:	0800d510 	.word	0x0800d510
 800a3dc:	0800d51c 	.word	0x0800d51c
 800a3e0:	0800d544 	.word	0x0800d544
 800a3e4:	20008402 	.word	0x20008402
 800a3e8:	0800d8c4 	.word	0x0800d8c4

0800a3ec <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d002      	beq.n	800a408 <ip4_addr_isbroadcast_u32+0x1c>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800a408:	2301      	movs	r3, #1
 800a40a:	e02a      	b.n	800a462 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a412:	f003 0302 	and.w	r3, r3, #2
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	e021      	b.n	800a462 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	3304      	adds	r3, #4
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	429a      	cmp	r2, r3
 800a428:	d101      	bne.n	800a42e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	e019      	b.n	800a462 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	3304      	adds	r3, #4
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	405a      	eors	r2, r3
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	3308      	adds	r3, #8
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4013      	ands	r3, r2
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10d      	bne.n	800a460 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	3308      	adds	r3, #8
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	43da      	mvns	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	3308      	adds	r3, #8
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a458:	429a      	cmp	r2, r3
 800a45a:	d101      	bne.n	800a460 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e000      	b.n	800a462 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800a460:	2300      	movs	r3, #0
  }
}
 800a462:	4618      	mov	r0, r3
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
	...

0800a470 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800a476:	2300      	movs	r3, #0
 800a478:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800a47a:	4b12      	ldr	r3, [pc, #72]	@ (800a4c4 <ip_reass_tmr+0x54>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800a480:	e018      	b.n	800a4b4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	7fdb      	ldrb	r3, [r3, #31]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00b      	beq.n	800a4a2 <ip_reass_tmr+0x32>
      r->timer--;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	7fdb      	ldrb	r3, [r3, #31]
 800a48e:	3b01      	subs	r3, #1
 800a490:	b2da      	uxtb	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	e008      	b.n	800a4b4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800a4ac:	68b9      	ldr	r1, [r7, #8]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f80a 	bl	800a4c8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e3      	bne.n	800a482 <ip_reass_tmr+0x12>
    }
  }
}
 800a4ba:	bf00      	nop
 800a4bc:	bf00      	nop
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	20008404 	.word	0x20008404

0800a4c8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b088      	sub	sp, #32
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d105      	bne.n	800a4ea <ip_reass_free_complete_datagram+0x22>
 800a4de:	4b45      	ldr	r3, [pc, #276]	@ (800a5f4 <ip_reass_free_complete_datagram+0x12c>)
 800a4e0:	22ab      	movs	r2, #171	@ 0xab
 800a4e2:	4945      	ldr	r1, [pc, #276]	@ (800a5f8 <ip_reass_free_complete_datagram+0x130>)
 800a4e4:	4845      	ldr	r0, [pc, #276]	@ (800a5fc <ip_reass_free_complete_datagram+0x134>)
 800a4e6:	f000 ffd7 	bl	800b498 <iprintf>
  if (prev != NULL) {
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00a      	beq.n	800a506 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d005      	beq.n	800a506 <ip_reass_free_complete_datagram+0x3e>
 800a4fa:	4b3e      	ldr	r3, [pc, #248]	@ (800a5f4 <ip_reass_free_complete_datagram+0x12c>)
 800a4fc:	22ad      	movs	r2, #173	@ 0xad
 800a4fe:	4940      	ldr	r1, [pc, #256]	@ (800a600 <ip_reass_free_complete_datagram+0x138>)
 800a500:	483e      	ldr	r0, [pc, #248]	@ (800a5fc <ip_reass_free_complete_datagram+0x134>)
 800a502:	f000 ffc9 	bl	800b498 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	889b      	ldrh	r3, [r3, #4]
 800a512:	b29b      	uxth	r3, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	d12a      	bne.n	800a56e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	6858      	ldr	r0, [r3, #4]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3308      	adds	r3, #8
 800a52e:	2214      	movs	r2, #20
 800a530:	4619      	mov	r1, r3
 800a532:	f001 f88c 	bl	800b64e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a536:	2101      	movs	r1, #1
 800a538:	69b8      	ldr	r0, [r7, #24]
 800a53a:	f7ff fc51 	bl	8009de0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a53e:	69b8      	ldr	r0, [r7, #24]
 800a540:	f7fd fb8c 	bl	8007c5c <pbuf_clen>
 800a544:	4603      	mov	r3, r0
 800a546:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a548:	8bfa      	ldrh	r2, [r7, #30]
 800a54a:	8a7b      	ldrh	r3, [r7, #18]
 800a54c:	4413      	add	r3, r2
 800a54e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a552:	db05      	blt.n	800a560 <ip_reass_free_complete_datagram+0x98>
 800a554:	4b27      	ldr	r3, [pc, #156]	@ (800a5f4 <ip_reass_free_complete_datagram+0x12c>)
 800a556:	22bc      	movs	r2, #188	@ 0xbc
 800a558:	492a      	ldr	r1, [pc, #168]	@ (800a604 <ip_reass_free_complete_datagram+0x13c>)
 800a55a:	4828      	ldr	r0, [pc, #160]	@ (800a5fc <ip_reass_free_complete_datagram+0x134>)
 800a55c:	f000 ff9c 	bl	800b498 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a560:	8bfa      	ldrh	r2, [r7, #30]
 800a562:	8a7b      	ldrh	r3, [r7, #18]
 800a564:	4413      	add	r3, r2
 800a566:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800a568:	69b8      	ldr	r0, [r7, #24]
 800a56a:	f7fd faef 	bl	8007b4c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800a574:	e01f      	b.n	800a5b6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7fd fb68 	bl	8007c5c <pbuf_clen>
 800a58c:	4603      	mov	r3, r0
 800a58e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a590:	8bfa      	ldrh	r2, [r7, #30]
 800a592:	8a7b      	ldrh	r3, [r7, #18]
 800a594:	4413      	add	r3, r2
 800a596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a59a:	db05      	blt.n	800a5a8 <ip_reass_free_complete_datagram+0xe0>
 800a59c:	4b15      	ldr	r3, [pc, #84]	@ (800a5f4 <ip_reass_free_complete_datagram+0x12c>)
 800a59e:	22cc      	movs	r2, #204	@ 0xcc
 800a5a0:	4918      	ldr	r1, [pc, #96]	@ (800a604 <ip_reass_free_complete_datagram+0x13c>)
 800a5a2:	4816      	ldr	r0, [pc, #88]	@ (800a5fc <ip_reass_free_complete_datagram+0x134>)
 800a5a4:	f000 ff78 	bl	800b498 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a5a8:	8bfa      	ldrh	r2, [r7, #30]
 800a5aa:	8a7b      	ldrh	r3, [r7, #18]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7fd facb 	bl	8007b4c <pbuf_free>
  while (p != NULL) {
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1dc      	bne.n	800a576 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800a5bc:	6839      	ldr	r1, [r7, #0]
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f8c2 	bl	800a748 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800a5c4:	4b10      	ldr	r3, [pc, #64]	@ (800a608 <ip_reass_free_complete_datagram+0x140>)
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	8bfa      	ldrh	r2, [r7, #30]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d905      	bls.n	800a5da <ip_reass_free_complete_datagram+0x112>
 800a5ce:	4b09      	ldr	r3, [pc, #36]	@ (800a5f4 <ip_reass_free_complete_datagram+0x12c>)
 800a5d0:	22d2      	movs	r2, #210	@ 0xd2
 800a5d2:	490e      	ldr	r1, [pc, #56]	@ (800a60c <ip_reass_free_complete_datagram+0x144>)
 800a5d4:	4809      	ldr	r0, [pc, #36]	@ (800a5fc <ip_reass_free_complete_datagram+0x134>)
 800a5d6:	f000 ff5f 	bl	800b498 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800a5da:	4b0b      	ldr	r3, [pc, #44]	@ (800a608 <ip_reass_free_complete_datagram+0x140>)
 800a5dc:	881a      	ldrh	r2, [r3, #0]
 800a5de:	8bfb      	ldrh	r3, [r7, #30]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	4b08      	ldr	r3, [pc, #32]	@ (800a608 <ip_reass_free_complete_datagram+0x140>)
 800a5e6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800a5e8:	8bfb      	ldrh	r3, [r7, #30]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3720      	adds	r7, #32
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	0800d574 	.word	0x0800d574
 800a5f8:	0800d5b0 	.word	0x0800d5b0
 800a5fc:	0800d5bc 	.word	0x0800d5bc
 800a600:	0800d5e4 	.word	0x0800d5e4
 800a604:	0800d5f8 	.word	0x0800d5f8
 800a608:	20008408 	.word	0x20008408
 800a60c:	0800d618 	.word	0x0800d618

0800a610 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08a      	sub	sp, #40	@ 0x28
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800a61a:	2300      	movs	r3, #0
 800a61c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800a622:	2300      	movs	r3, #0
 800a624:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800a626:	2300      	movs	r3, #0
 800a628:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800a62e:	4b28      	ldr	r3, [pc, #160]	@ (800a6d0 <ip_reass_remove_oldest_datagram+0xc0>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800a634:	e030      	b.n	800a698 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a638:	695a      	ldr	r2, [r3, #20]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d10c      	bne.n	800a65c <ip_reass_remove_oldest_datagram+0x4c>
 800a642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a644:	699a      	ldr	r2, [r3, #24]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d106      	bne.n	800a65c <ip_reass_remove_oldest_datagram+0x4c>
 800a64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a650:	899a      	ldrh	r2, [r3, #12]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	889b      	ldrh	r3, [r3, #4]
 800a656:	b29b      	uxth	r3, r3
 800a658:	429a      	cmp	r2, r3
 800a65a:	d014      	beq.n	800a686 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	3301      	adds	r3, #1
 800a660:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d104      	bne.n	800a672 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800a668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	61bb      	str	r3, [r7, #24]
 800a670:	e009      	b.n	800a686 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	7fda      	ldrb	r2, [r3, #31]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	7fdb      	ldrb	r3, [r3, #31]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d803      	bhi.n	800a686 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800a686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800a68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a690:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800a692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800a698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1cb      	bne.n	800a636 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d008      	beq.n	800a6b6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a6a4:	69b9      	ldr	r1, [r7, #24]
 800a6a6:	6a38      	ldr	r0, [r7, #32]
 800a6a8:	f7ff ff0e 	bl	800a4c8 <ip_reass_free_complete_datagram>
 800a6ac:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	da02      	bge.n	800a6c4 <ip_reass_remove_oldest_datagram+0xb4>
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	dcac      	bgt.n	800a61e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a6c4:	697b      	ldr	r3, [r7, #20]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3728      	adds	r7, #40	@ 0x28
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20008404 	.word	0x20008404

0800a6d4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a6de:	2001      	movs	r0, #1
 800a6e0:	f7fc fb80 	bl	8006de4 <memp_malloc>
 800a6e4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d110      	bne.n	800a70e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff ff8e 	bl	800a610 <ip_reass_remove_oldest_datagram>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	dc03      	bgt.n	800a704 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a6fc:	2001      	movs	r0, #1
 800a6fe:	f7fc fb71 	bl	8006de4 <memp_malloc>
 800a702:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e016      	b.n	800a73c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a70e:	2220      	movs	r2, #32
 800a710:	2100      	movs	r1, #0
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 ff25 	bl	800b562 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	220f      	movs	r2, #15
 800a71c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a71e:	4b09      	ldr	r3, [pc, #36]	@ (800a744 <ip_reass_enqueue_new_datagram+0x70>)
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a726:	4a07      	ldr	r2, [pc, #28]	@ (800a744 <ip_reass_enqueue_new_datagram+0x70>)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	3308      	adds	r3, #8
 800a730:	2214      	movs	r2, #20
 800a732:	6879      	ldr	r1, [r7, #4]
 800a734:	4618      	mov	r0, r3
 800a736:	f000 ff8a 	bl	800b64e <memcpy>
  return ipr;
 800a73a:	68fb      	ldr	r3, [r7, #12]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	20008404 	.word	0x20008404

0800a748 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a752:	4b10      	ldr	r3, [pc, #64]	@ (800a794 <ip_reass_dequeue_datagram+0x4c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d104      	bne.n	800a766 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a0c      	ldr	r2, [pc, #48]	@ (800a794 <ip_reass_dequeue_datagram+0x4c>)
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	e00d      	b.n	800a782 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d106      	bne.n	800a77a <ip_reass_dequeue_datagram+0x32>
 800a76c:	4b0a      	ldr	r3, [pc, #40]	@ (800a798 <ip_reass_dequeue_datagram+0x50>)
 800a76e:	f240 1245 	movw	r2, #325	@ 0x145
 800a772:	490a      	ldr	r1, [pc, #40]	@ (800a79c <ip_reass_dequeue_datagram+0x54>)
 800a774:	480a      	ldr	r0, [pc, #40]	@ (800a7a0 <ip_reass_dequeue_datagram+0x58>)
 800a776:	f000 fe8f 	bl	800b498 <iprintf>
    prev->next = ipr->next;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	2001      	movs	r0, #1
 800a786:	f7fc fb9d 	bl	8006ec4 <memp_free>
}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	20008404 	.word	0x20008404
 800a798:	0800d574 	.word	0x0800d574
 800a79c:	0800d63c 	.word	0x0800d63c
 800a7a0:	0800d5bc 	.word	0x0800d5bc

0800a7a4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08c      	sub	sp, #48	@ 0x30
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	885b      	ldrh	r3, [r3, #2]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fb feb1 	bl	800652c <lwip_htons>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	f003 030f 	and.w	r3, r3, #15
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800a7dc:	7e7b      	ldrb	r3, [r7, #25]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	8b7a      	ldrh	r2, [r7, #26]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d202      	bcs.n	800a7ec <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ea:	e135      	b.n	800aa58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800a7ec:	7e7b      	ldrb	r3, [r7, #25]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	8b7a      	ldrh	r2, [r7, #26]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	88db      	ldrh	r3, [r3, #6]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fb fe95 	bl	800652c <lwip_htons>
 800a802:	4603      	mov	r3, r0
 800a804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a808:	b29b      	uxth	r3, r3
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800a814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a816:	2200      	movs	r2, #0
 800a818:	701a      	strb	r2, [r3, #0]
 800a81a:	2200      	movs	r2, #0
 800a81c:	705a      	strb	r2, [r3, #1]
 800a81e:	2200      	movs	r2, #0
 800a820:	709a      	strb	r2, [r3, #2]
 800a822:	2200      	movs	r2, #0
 800a824:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a828:	8afa      	ldrh	r2, [r7, #22]
 800a82a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800a82c:	8afa      	ldrh	r2, [r7, #22]
 800a82e:	8b7b      	ldrh	r3, [r7, #26]
 800a830:	4413      	add	r3, r2
 800a832:	b29a      	uxth	r2, r3
 800a834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a836:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800a838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83a:	88db      	ldrh	r3, [r3, #6]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	8afa      	ldrh	r2, [r7, #22]
 800a840:	429a      	cmp	r2, r3
 800a842:	d902      	bls.n	800a84a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a844:	f04f 33ff 	mov.w	r3, #4294967295
 800a848:	e106      	b.n	800aa58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a850:	e068      	b.n	800a924 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800a858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a85a:	889b      	ldrh	r3, [r3, #4]
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	889b      	ldrh	r3, [r3, #4]
 800a862:	b29b      	uxth	r3, r3
 800a864:	429a      	cmp	r2, r3
 800a866:	d235      	bcs.n	800a8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a86c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a870:	2b00      	cmp	r3, #0
 800a872:	d020      	beq.n	800a8b6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a876:	889b      	ldrh	r3, [r3, #4]
 800a878:	b29a      	uxth	r2, r3
 800a87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87c:	88db      	ldrh	r3, [r3, #6]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	429a      	cmp	r2, r3
 800a882:	d307      	bcc.n	800a894 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800a884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a886:	88db      	ldrh	r3, [r3, #6]
 800a888:	b29a      	uxth	r2, r3
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	889b      	ldrh	r3, [r3, #4]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	429a      	cmp	r2, r3
 800a892:	d902      	bls.n	800a89a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a894:	f04f 33ff 	mov.w	r3, #4294967295
 800a898:	e0de      	b.n	800aa58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800a89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800a8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a2:	88db      	ldrh	r3, [r3, #6]
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a8:	889b      	ldrh	r3, [r3, #4]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d03d      	beq.n	800a92c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800a8b4:	e03a      	b.n	800a92c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800a8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b8:	88db      	ldrh	r3, [r3, #6]
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	889b      	ldrh	r3, [r3, #4]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d902      	bls.n	800a8cc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ca:	e0c5      	b.n	800aa58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	605a      	str	r2, [r3, #4]
      break;
 800a8d2:	e02b      	b.n	800a92c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800a8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d6:	889b      	ldrh	r3, [r3, #4]
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	889b      	ldrh	r3, [r3, #4]
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d102      	bne.n	800a8ea <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e8:	e0b6      	b.n	800aa58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800a8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ec:	889b      	ldrh	r3, [r3, #4]
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	88db      	ldrh	r3, [r3, #6]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d202      	bcs.n	800a900 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fe:	e0ab      	b.n	800aa58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800a900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a902:	2b00      	cmp	r3, #0
 800a904:	d009      	beq.n	800a91a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800a906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a908:	88db      	ldrh	r3, [r3, #6]
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	889b      	ldrh	r3, [r3, #4]
 800a910:	b29b      	uxth	r3, r3
 800a912:	429a      	cmp	r2, r3
 800a914:	d001      	beq.n	800a91a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800a924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a926:	2b00      	cmp	r3, #0
 800a928:	d193      	bne.n	800a852 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800a92a:	e000      	b.n	800a92e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800a92c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800a92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a930:	2b00      	cmp	r3, #0
 800a932:	d12d      	bne.n	800a990 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800a934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a936:	2b00      	cmp	r3, #0
 800a938:	d01c      	beq.n	800a974 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93c:	88db      	ldrh	r3, [r3, #6]
 800a93e:	b29a      	uxth	r2, r3
 800a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a942:	889b      	ldrh	r3, [r3, #4]
 800a944:	b29b      	uxth	r3, r3
 800a946:	429a      	cmp	r2, r3
 800a948:	d906      	bls.n	800a958 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800a94a:	4b45      	ldr	r3, [pc, #276]	@ (800aa60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a94c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800a950:	4944      	ldr	r1, [pc, #272]	@ (800aa64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800a952:	4845      	ldr	r0, [pc, #276]	@ (800aa68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a954:	f000 fda0 	bl	800b498 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800a958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800a95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a960:	88db      	ldrh	r3, [r3, #6]
 800a962:	b29a      	uxth	r2, r3
 800a964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a966:	889b      	ldrh	r3, [r3, #4]
 800a968:	b29b      	uxth	r3, r3
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d010      	beq.n	800a990 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	623b      	str	r3, [r7, #32]
 800a972:	e00d      	b.n	800a990 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d006      	beq.n	800a98a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800a97c:	4b38      	ldr	r3, [pc, #224]	@ (800aa60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a97e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800a982:	493a      	ldr	r1, [pc, #232]	@ (800aa6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800a984:	4838      	ldr	r0, [pc, #224]	@ (800aa68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a986:	f000 fd87 	bl	800b498 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d105      	bne.n	800a9a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	7f9b      	ldrb	r3, [r3, #30]
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d059      	beq.n	800aa56 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d04f      	beq.n	800aa48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d006      	beq.n	800a9be <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	889b      	ldrh	r3, [r3, #4]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	623b      	str	r3, [r7, #32]
 800a9c2:	e041      	b.n	800aa48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800a9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800a9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800a9ce:	e012      	b.n	800a9f6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800a9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d8:	88db      	ldrh	r3, [r3, #6]
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9de:	889b      	ldrh	r3, [r3, #4]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d002      	beq.n	800a9ec <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	623b      	str	r3, [r7, #32]
            break;
 800a9ea:	e007      	b.n	800a9fc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800a9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ee:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800a9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1e9      	bne.n	800a9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d022      	beq.n	800aa48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d106      	bne.n	800aa18 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800aa0a:	4b15      	ldr	r3, [pc, #84]	@ (800aa60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800aa0c:	f240 12df 	movw	r2, #479	@ 0x1df
 800aa10:	4917      	ldr	r1, [pc, #92]	@ (800aa70 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800aa12:	4815      	ldr	r0, [pc, #84]	@ (800aa68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800aa14:	f000 fd40 	bl	800b498 <iprintf>
          LWIP_ASSERT("sanity check",
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d106      	bne.n	800aa32 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800aa24:	4b0e      	ldr	r3, [pc, #56]	@ (800aa60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800aa26:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800aa2a:	4911      	ldr	r1, [pc, #68]	@ (800aa70 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800aa2c:	480e      	ldr	r0, [pc, #56]	@ (800aa68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800aa2e:	f000 fd33 	bl	800b498 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800aa32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d006      	beq.n	800aa48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800aa3a:	4b09      	ldr	r3, [pc, #36]	@ (800aa60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800aa3c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800aa40:	490c      	ldr	r1, [pc, #48]	@ (800aa74 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800aa42:	4809      	ldr	r0, [pc, #36]	@ (800aa68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800aa44:	f000 fd28 	bl	800b498 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800aa48:	6a3b      	ldr	r3, [r7, #32]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	bf14      	ite	ne
 800aa4e:	2301      	movne	r3, #1
 800aa50:	2300      	moveq	r3, #0
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	e000      	b.n	800aa58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3730      	adds	r7, #48	@ 0x30
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	0800d574 	.word	0x0800d574
 800aa64:	0800d658 	.word	0x0800d658
 800aa68:	0800d5bc 	.word	0x0800d5bc
 800aa6c:	0800d678 	.word	0x0800d678
 800aa70:	0800d6b0 	.word	0x0800d6b0
 800aa74:	0800d6c0 	.word	0x0800d6c0

0800aa78 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b08e      	sub	sp, #56	@ 0x38
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800aa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	f003 030f 	and.w	r3, r3, #15
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b14      	cmp	r3, #20
 800aa96:	f040 8171 	bne.w	800ad7c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800aa9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9c:	88db      	ldrh	r3, [r3, #6]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fb fd43 	bl	800652c <lwip_htons>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	00db      	lsls	r3, r3, #3
 800aab0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800aab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab4:	885b      	ldrh	r3, [r3, #2]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fb fd37 	bl	800652c <lwip_htons>
 800aabe:	4603      	mov	r3, r0
 800aac0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800aac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	f003 030f 	and.w	r3, r3, #15
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800aad2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aada:	429a      	cmp	r2, r3
 800aadc:	f0c0 8150 	bcc.w	800ad80 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800aae0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7fd f8b5 	bl	8007c5c <pbuf_clen>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800aaf6:	4b8c      	ldr	r3, [pc, #560]	@ (800ad28 <ip4_reass+0x2b0>)
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	461a      	mov	r2, r3
 800aafc:	8c3b      	ldrh	r3, [r7, #32]
 800aafe:	4413      	add	r3, r2
 800ab00:	2b0a      	cmp	r3, #10
 800ab02:	dd10      	ble.n	800ab26 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ab04:	8c3b      	ldrh	r3, [r7, #32]
 800ab06:	4619      	mov	r1, r3
 800ab08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab0a:	f7ff fd81 	bl	800a610 <ip_reass_remove_oldest_datagram>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 8137 	beq.w	800ad84 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ab16:	4b84      	ldr	r3, [pc, #528]	@ (800ad28 <ip4_reass+0x2b0>)
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	8c3b      	ldrh	r3, [r7, #32]
 800ab1e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ab20:	2b0a      	cmp	r3, #10
 800ab22:	f300 812f 	bgt.w	800ad84 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ab26:	4b81      	ldr	r3, [pc, #516]	@ (800ad2c <ip4_reass+0x2b4>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab2c:	e015      	b.n	800ab5a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab30:	695a      	ldr	r2, [r3, #20]
 800ab32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d10c      	bne.n	800ab54 <ip4_reass+0xdc>
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3c:	699a      	ldr	r2, [r3, #24]
 800ab3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d106      	bne.n	800ab54 <ip4_reass+0xdc>
 800ab46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab48:	899a      	ldrh	r2, [r3, #12]
 800ab4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4c:	889b      	ldrh	r3, [r3, #4]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d006      	beq.n	800ab62 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ab54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1e6      	bne.n	800ab2e <ip4_reass+0xb6>
 800ab60:	e000      	b.n	800ab64 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ab62:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ab64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d109      	bne.n	800ab7e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ab6a:	8c3b      	ldrh	r3, [r7, #32]
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab70:	f7ff fdb0 	bl	800a6d4 <ip_reass_enqueue_new_datagram>
 800ab74:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ab76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d11c      	bne.n	800abb6 <ip4_reass+0x13e>
      goto nullreturn;
 800ab7c:	e105      	b.n	800ad8a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ab7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab80:	88db      	ldrh	r3, [r3, #6]
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fb fcd1 	bl	800652c <lwip_htons>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d110      	bne.n	800abb6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ab94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab96:	89db      	ldrh	r3, [r3, #14]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fb fcc7 	bl	800652c <lwip_htons>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d006      	beq.n	800abb6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	3308      	adds	r3, #8
 800abac:	2214      	movs	r2, #20
 800abae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 fd4c 	bl	800b64e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800abb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb8:	88db      	ldrh	r3, [r3, #6]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	f003 0320 	and.w	r3, r3, #32
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	bf0c      	ite	eq
 800abc4:	2301      	moveq	r3, #1
 800abc6:	2300      	movne	r3, #0
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00e      	beq.n	800abf0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800abd2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800abd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800abd6:	4413      	add	r3, r2
 800abd8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800abda:	8b7a      	ldrh	r2, [r7, #26]
 800abdc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800abde:	429a      	cmp	r2, r3
 800abe0:	f0c0 80a0 	bcc.w	800ad24 <ip4_reass+0x2ac>
 800abe4:	8b7b      	ldrh	r3, [r7, #26]
 800abe6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800abea:	4293      	cmp	r3, r2
 800abec:	f200 809a 	bhi.w	800ad24 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800abf0:	69fa      	ldr	r2, [r7, #28]
 800abf2:	6879      	ldr	r1, [r7, #4]
 800abf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abf6:	f7ff fdd5 	bl	800a7a4 <ip_reass_chain_frag_into_datagram_and_validate>
 800abfa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac02:	f000 809b 	beq.w	800ad3c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ac06:	4b48      	ldr	r3, [pc, #288]	@ (800ad28 <ip4_reass+0x2b0>)
 800ac08:	881a      	ldrh	r2, [r3, #0]
 800ac0a:	8c3b      	ldrh	r3, [r7, #32]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	4b45      	ldr	r3, [pc, #276]	@ (800ad28 <ip4_reass+0x2b0>)
 800ac12:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00d      	beq.n	800ac36 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ac1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ac1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ac1e:	4413      	add	r3, r2
 800ac20:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ac22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac24:	8a7a      	ldrh	r2, [r7, #18]
 800ac26:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ac28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2a:	7f9b      	ldrb	r3, [r3, #30]
 800ac2c:	f043 0301 	orr.w	r3, r3, #1
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac34:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d171      	bne.n	800ad20 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3e:	8b9b      	ldrh	r3, [r3, #28]
 800ac40:	3314      	adds	r3, #20
 800ac42:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ac44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ac56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac58:	3308      	adds	r3, #8
 800ac5a:	2214      	movs	r2, #20
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac60:	f000 fcf5 	bl	800b64e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ac64:	8a3b      	ldrh	r3, [r7, #16]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fb fc60 	bl	800652c <lwip_htons>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	461a      	mov	r2, r3
 800ac70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac72:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ac74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac76:	2200      	movs	r2, #0
 800ac78:	719a      	strb	r2, [r3, #6]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ac7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac80:	2200      	movs	r2, #0
 800ac82:	729a      	strb	r2, [r3, #10]
 800ac84:	2200      	movs	r2, #0
 800ac86:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ac88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ac8e:	e00d      	b.n	800acac <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ac90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ac96:	2114      	movs	r1, #20
 800ac98:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ac9a:	f7fc fed1 	bl	8007a40 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ac9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f7fd f815 	bl	8007cd0 <pbuf_cat>
      r = iprh->next_pbuf;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800acac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1ee      	bne.n	800ac90 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800acb2:	4b1e      	ldr	r3, [pc, #120]	@ (800ad2c <ip4_reass+0x2b4>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acb8:	429a      	cmp	r2, r3
 800acba:	d102      	bne.n	800acc2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800acbc:	2300      	movs	r3, #0
 800acbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acc0:	e010      	b.n	800ace4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800acc2:	4b1a      	ldr	r3, [pc, #104]	@ (800ad2c <ip4_reass+0x2b4>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acc8:	e007      	b.n	800acda <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800acca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d006      	beq.n	800ace2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800acd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1f4      	bne.n	800acca <ip4_reass+0x252>
 800ace0:	e000      	b.n	800ace4 <ip4_reass+0x26c>
          break;
 800ace2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ace4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ace6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ace8:	f7ff fd2e 	bl	800a748 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7fc ffb5 	bl	8007c5c <pbuf_clen>
 800acf2:	4603      	mov	r3, r0
 800acf4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800acf6:	4b0c      	ldr	r3, [pc, #48]	@ (800ad28 <ip4_reass+0x2b0>)
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	8c3a      	ldrh	r2, [r7, #32]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d906      	bls.n	800ad0e <ip4_reass+0x296>
 800ad00:	4b0b      	ldr	r3, [pc, #44]	@ (800ad30 <ip4_reass+0x2b8>)
 800ad02:	f240 229b 	movw	r2, #667	@ 0x29b
 800ad06:	490b      	ldr	r1, [pc, #44]	@ (800ad34 <ip4_reass+0x2bc>)
 800ad08:	480b      	ldr	r0, [pc, #44]	@ (800ad38 <ip4_reass+0x2c0>)
 800ad0a:	f000 fbc5 	bl	800b498 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ad0e:	4b06      	ldr	r3, [pc, #24]	@ (800ad28 <ip4_reass+0x2b0>)
 800ad10:	881a      	ldrh	r2, [r3, #0]
 800ad12:	8c3b      	ldrh	r3, [r7, #32]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	4b03      	ldr	r3, [pc, #12]	@ (800ad28 <ip4_reass+0x2b0>)
 800ad1a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	e038      	b.n	800ad92 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ad20:	2300      	movs	r3, #0
 800ad22:	e036      	b.n	800ad92 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ad24:	bf00      	nop
 800ad26:	e00a      	b.n	800ad3e <ip4_reass+0x2c6>
 800ad28:	20008408 	.word	0x20008408
 800ad2c:	20008404 	.word	0x20008404
 800ad30:	0800d574 	.word	0x0800d574
 800ad34:	0800d6e4 	.word	0x0800d6e4
 800ad38:	0800d5bc 	.word	0x0800d5bc
    goto nullreturn_ipr;
 800ad3c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d106      	bne.n	800ad52 <ip4_reass+0x2da>
 800ad44:	4b15      	ldr	r3, [pc, #84]	@ (800ad9c <ip4_reass+0x324>)
 800ad46:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800ad4a:	4915      	ldr	r1, [pc, #84]	@ (800ada0 <ip4_reass+0x328>)
 800ad4c:	4815      	ldr	r0, [pc, #84]	@ (800ada4 <ip4_reass+0x32c>)
 800ad4e:	f000 fba3 	bl	800b498 <iprintf>
  if (ipr->p == NULL) {
 800ad52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d116      	bne.n	800ad88 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ad5a:	4b13      	ldr	r3, [pc, #76]	@ (800ada8 <ip4_reass+0x330>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d006      	beq.n	800ad72 <ip4_reass+0x2fa>
 800ad64:	4b0d      	ldr	r3, [pc, #52]	@ (800ad9c <ip4_reass+0x324>)
 800ad66:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ad6a:	4910      	ldr	r1, [pc, #64]	@ (800adac <ip4_reass+0x334>)
 800ad6c:	480d      	ldr	r0, [pc, #52]	@ (800ada4 <ip4_reass+0x32c>)
 800ad6e:	f000 fb93 	bl	800b498 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ad72:	2100      	movs	r1, #0
 800ad74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad76:	f7ff fce7 	bl	800a748 <ip_reass_dequeue_datagram>
 800ad7a:	e006      	b.n	800ad8a <ip4_reass+0x312>
    goto nullreturn;
 800ad7c:	bf00      	nop
 800ad7e:	e004      	b.n	800ad8a <ip4_reass+0x312>
    goto nullreturn;
 800ad80:	bf00      	nop
 800ad82:	e002      	b.n	800ad8a <ip4_reass+0x312>
      goto nullreturn;
 800ad84:	bf00      	nop
 800ad86:	e000      	b.n	800ad8a <ip4_reass+0x312>
  }

nullreturn:
 800ad88:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7fc fede 	bl	8007b4c <pbuf_free>
  return NULL;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3738      	adds	r7, #56	@ 0x38
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	0800d574 	.word	0x0800d574
 800ada0:	0800d700 	.word	0x0800d700
 800ada4:	0800d5bc 	.word	0x0800d5bc
 800ada8:	20008404 	.word	0x20008404
 800adac:	0800d70c 	.word	0x0800d70c

0800adb0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800adb4:	2002      	movs	r0, #2
 800adb6:	f7fc f815 	bl	8006de4 <memp_malloc>
 800adba:	4603      	mov	r3, r0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d106      	bne.n	800addc <ip_frag_free_pbuf_custom_ref+0x1c>
 800adce:	4b07      	ldr	r3, [pc, #28]	@ (800adec <ip_frag_free_pbuf_custom_ref+0x2c>)
 800add0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800add4:	4906      	ldr	r1, [pc, #24]	@ (800adf0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800add6:	4807      	ldr	r0, [pc, #28]	@ (800adf4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800add8:	f000 fb5e 	bl	800b498 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	2002      	movs	r0, #2
 800ade0:	f7fc f870 	bl	8006ec4 <memp_free>
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	0800d574 	.word	0x0800d574
 800adf0:	0800d72c 	.word	0x0800d72c
 800adf4:	0800d5bc 	.word	0x0800d5bc

0800adf8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d106      	bne.n	800ae18 <ipfrag_free_pbuf_custom+0x20>
 800ae0a:	4b11      	ldr	r3, [pc, #68]	@ (800ae50 <ipfrag_free_pbuf_custom+0x58>)
 800ae0c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800ae10:	4910      	ldr	r1, [pc, #64]	@ (800ae54 <ipfrag_free_pbuf_custom+0x5c>)
 800ae12:	4811      	ldr	r0, [pc, #68]	@ (800ae58 <ipfrag_free_pbuf_custom+0x60>)
 800ae14:	f000 fb40 	bl	800b498 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d006      	beq.n	800ae2e <ipfrag_free_pbuf_custom+0x36>
 800ae20:	4b0b      	ldr	r3, [pc, #44]	@ (800ae50 <ipfrag_free_pbuf_custom+0x58>)
 800ae22:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800ae26:	490d      	ldr	r1, [pc, #52]	@ (800ae5c <ipfrag_free_pbuf_custom+0x64>)
 800ae28:	480b      	ldr	r0, [pc, #44]	@ (800ae58 <ipfrag_free_pbuf_custom+0x60>)
 800ae2a:	f000 fb35 	bl	800b498 <iprintf>
  if (pcr->original != NULL) {
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d004      	beq.n	800ae40 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fc fe86 	bl	8007b4c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7ff ffbd 	bl	800adc0 <ip_frag_free_pbuf_custom_ref>
}
 800ae46:	bf00      	nop
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	0800d574 	.word	0x0800d574
 800ae54:	0800d738 	.word	0x0800d738
 800ae58:	0800d5bc 	.word	0x0800d5bc
 800ae5c:	0800d744 	.word	0x0800d744

0800ae60 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b094      	sub	sp, #80	@ 0x50
 800ae64:	af02      	add	r7, sp, #8
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ae76:	3b14      	subs	r3, #20
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	da00      	bge.n	800ae7e <ip4_frag+0x1e>
 800ae7c:	3307      	adds	r3, #7
 800ae7e:	10db      	asrs	r3, r3, #3
 800ae80:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ae82:	2314      	movs	r3, #20
 800ae84:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800ae8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae8e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ae90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	f003 030f 	and.w	r3, r3, #15
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b14      	cmp	r3, #20
 800aea0:	d002      	beq.n	800aea8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800aea2:	f06f 0305 	mvn.w	r3, #5
 800aea6:	e110      	b.n	800b0ca <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	895b      	ldrh	r3, [r3, #10]
 800aeac:	2b13      	cmp	r3, #19
 800aeae:	d809      	bhi.n	800aec4 <ip4_frag+0x64>
 800aeb0:	4b88      	ldr	r3, [pc, #544]	@ (800b0d4 <ip4_frag+0x274>)
 800aeb2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800aeb6:	4988      	ldr	r1, [pc, #544]	@ (800b0d8 <ip4_frag+0x278>)
 800aeb8:	4888      	ldr	r0, [pc, #544]	@ (800b0dc <ip4_frag+0x27c>)
 800aeba:	f000 faed 	bl	800b498 <iprintf>
 800aebe:	f06f 0305 	mvn.w	r3, #5
 800aec2:	e102      	b.n	800b0ca <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	88db      	ldrh	r3, [r3, #6]
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fb fb2e 	bl	800652c <lwip_htons>
 800aed0:	4603      	mov	r3, r0
 800aed2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800aed4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aed6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aeda:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800aede:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aee4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	891b      	ldrh	r3, [r3, #8]
 800aeea:	3b14      	subs	r3, #20
 800aeec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800aef0:	e0e1      	b.n	800b0b6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800aef2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800aefc:	4293      	cmp	r3, r2
 800aefe:	bf28      	it	cs
 800af00:	4613      	movcs	r3, r2
 800af02:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800af04:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800af08:	2114      	movs	r1, #20
 800af0a:	200e      	movs	r0, #14
 800af0c:	f7fc fb3c 	bl	8007588 <pbuf_alloc>
 800af10:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800af12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 80d5 	beq.w	800b0c4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800af1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1c:	895b      	ldrh	r3, [r3, #10]
 800af1e:	2b13      	cmp	r3, #19
 800af20:	d806      	bhi.n	800af30 <ip4_frag+0xd0>
 800af22:	4b6c      	ldr	r3, [pc, #432]	@ (800b0d4 <ip4_frag+0x274>)
 800af24:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800af28:	496d      	ldr	r1, [pc, #436]	@ (800b0e0 <ip4_frag+0x280>)
 800af2a:	486c      	ldr	r0, [pc, #432]	@ (800b0dc <ip4_frag+0x27c>)
 800af2c:	f000 fab4 	bl	800b498 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800af30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	2214      	movs	r2, #20
 800af36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 fb88 	bl	800b64e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800af3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800af44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800af46:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800af4a:	e064      	b.n	800b016 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	895a      	ldrh	r2, [r3, #10]
 800af50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	895b      	ldrh	r3, [r3, #10]
 800af5a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d906      	bls.n	800af6e <ip4_frag+0x10e>
 800af60:	4b5c      	ldr	r3, [pc, #368]	@ (800b0d4 <ip4_frag+0x274>)
 800af62:	f240 322d 	movw	r2, #813	@ 0x32d
 800af66:	495f      	ldr	r1, [pc, #380]	@ (800b0e4 <ip4_frag+0x284>)
 800af68:	485c      	ldr	r0, [pc, #368]	@ (800b0dc <ip4_frag+0x27c>)
 800af6a:	f000 fa95 	bl	800b498 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800af6e:	8bfa      	ldrh	r2, [r7, #30]
 800af70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800af74:	4293      	cmp	r3, r2
 800af76:	bf28      	it	cs
 800af78:	4613      	movcs	r3, r2
 800af7a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800af7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800af82:	2b00      	cmp	r3, #0
 800af84:	d105      	bne.n	800af92 <ip4_frag+0x132>
        poff = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	60fb      	str	r3, [r7, #12]
        continue;
 800af90:	e041      	b.n	800b016 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800af92:	f7ff ff0d 	bl	800adb0 <ip_frag_alloc_pbuf_custom_ref>
 800af96:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d103      	bne.n	800afa6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800af9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afa0:	f7fc fdd4 	bl	8007b4c <pbuf_free>
        goto memerr;
 800afa4:	e08f      	b.n	800b0c6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800afa6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800afac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800afae:	4413      	add	r3, r2
 800afb0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800afb4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800afb8:	9201      	str	r2, [sp, #4]
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4603      	mov	r3, r0
 800afbe:	2241      	movs	r2, #65	@ 0x41
 800afc0:	2000      	movs	r0, #0
 800afc2:	f7fc fc09 	bl	80077d8 <pbuf_alloced_custom>
 800afc6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d106      	bne.n	800afdc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800afce:	69b8      	ldr	r0, [r7, #24]
 800afd0:	f7ff fef6 	bl	800adc0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800afd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afd6:	f7fc fdb9 	bl	8007b4c <pbuf_free>
        goto memerr;
 800afda:	e074      	b.n	800b0c6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f7fc fe55 	bl	8007c8c <pbuf_ref>
      pcr->original = p;
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	4a3f      	ldr	r2, [pc, #252]	@ (800b0e8 <ip4_frag+0x288>)
 800afec:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800afee:	6979      	ldr	r1, [r7, #20]
 800aff0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aff2:	f7fc fe6d 	bl	8007cd0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800aff6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800affa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800b004:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d004      	beq.n	800b016 <ip4_frag+0x1b6>
        poff = 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800b016:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d196      	bne.n	800af4c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800b01e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800b020:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b024:	4413      	add	r3, r2
 800b026:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b02c:	f1a3 0213 	sub.w	r2, r3, #19
 800b030:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b034:	429a      	cmp	r2, r3
 800b036:	bfcc      	ite	gt
 800b038:	2301      	movgt	r3, #1
 800b03a:	2300      	movle	r3, #0
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800b040:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b048:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <ip4_frag+0x1f6>
 800b050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800b056:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b058:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b05c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b05e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b060:	4618      	mov	r0, r3
 800b062:	f7fb fa63 	bl	800652c <lwip_htons>
 800b066:	4603      	mov	r3, r0
 800b068:	461a      	mov	r2, r3
 800b06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800b06e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b070:	3314      	adds	r3, #20
 800b072:	b29b      	uxth	r3, r3
 800b074:	4618      	mov	r0, r3
 800b076:	f7fb fa59 	bl	800652c <lwip_htons>
 800b07a:	4603      	mov	r3, r0
 800b07c:	461a      	mov	r2, r3
 800b07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b080:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b084:	2200      	movs	r2, #0
 800b086:	729a      	strb	r2, [r3, #10]
 800b088:	2200      	movs	r2, #0
 800b08a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b094:	68b8      	ldr	r0, [r7, #8]
 800b096:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800b098:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b09a:	f7fc fd57 	bl	8007b4c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800b09e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b0a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800b0aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b0ae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800b0b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f47f af19 	bne.w	800aef2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e002      	b.n	800b0ca <ip4_frag+0x26a>
      goto memerr;
 800b0c4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800b0c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3748      	adds	r7, #72	@ 0x48
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	0800d574 	.word	0x0800d574
 800b0d8:	0800d750 	.word	0x0800d750
 800b0dc:	0800d5bc 	.word	0x0800d5bc
 800b0e0:	0800d76c 	.word	0x0800d76c
 800b0e4:	0800d78c 	.word	0x0800d78c
 800b0e8:	0800adf9 	.word	0x0800adf9

0800b0ec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800b0f6:	230e      	movs	r3, #14
 800b0f8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	895b      	ldrh	r3, [r3, #10]
 800b0fe:	2b0e      	cmp	r3, #14
 800b100:	d96e      	bls.n	800b1e0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	7bdb      	ldrb	r3, [r3, #15]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d106      	bne.n	800b118 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b110:	3301      	adds	r3, #1
 800b112:	b2da      	uxtb	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	7b1a      	ldrb	r2, [r3, #12]
 800b122:	7b5b      	ldrb	r3, [r3, #13]
 800b124:	021b      	lsls	r3, r3, #8
 800b126:	4313      	orrs	r3, r2
 800b128:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d023      	beq.n	800b17e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d10f      	bne.n	800b15e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	785b      	ldrb	r3, [r3, #1]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d11b      	bne.n	800b17e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b14a:	2b5e      	cmp	r3, #94	@ 0x5e
 800b14c:	d117      	bne.n	800b17e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	7b5b      	ldrb	r3, [r3, #13]
 800b152:	f043 0310 	orr.w	r3, r3, #16
 800b156:	b2da      	uxtb	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	735a      	strb	r2, [r3, #13]
 800b15c:	e00f      	b.n	800b17e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	2206      	movs	r2, #6
 800b162:	4928      	ldr	r1, [pc, #160]	@ (800b204 <ethernet_input+0x118>)
 800b164:	4618      	mov	r0, r3
 800b166:	f000 f9ec 	bl	800b542 <memcmp>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d106      	bne.n	800b17e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	7b5b      	ldrb	r3, [r3, #13]
 800b174:	f043 0308 	orr.w	r3, r3, #8
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800b17e:	89fb      	ldrh	r3, [r7, #14]
 800b180:	2b08      	cmp	r3, #8
 800b182:	d003      	beq.n	800b18c <ethernet_input+0xa0>
 800b184:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800b188:	d014      	beq.n	800b1b4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800b18a:	e032      	b.n	800b1f2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b192:	f003 0308 	and.w	r3, r3, #8
 800b196:	2b00      	cmp	r3, #0
 800b198:	d024      	beq.n	800b1e4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b19a:	8afb      	ldrh	r3, [r7, #22]
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7fc fc4e 	bl	8007a40 <pbuf_remove_header>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d11e      	bne.n	800b1e8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7fe ff2b 	bl	800a008 <ip4_input>
      break;
 800b1b2:	e013      	b.n	800b1dc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b1ba:	f003 0308 	and.w	r3, r3, #8
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d014      	beq.n	800b1ec <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b1c2:	8afb      	ldrh	r3, [r7, #22]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f7fc fc3a 	bl	8007a40 <pbuf_remove_header>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10e      	bne.n	800b1f0 <ethernet_input+0x104>
        etharp_input(p, netif);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7fe f8cb 	bl	8009370 <etharp_input>
      break;
 800b1da:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e00c      	b.n	800b1fa <ethernet_input+0x10e>
    goto free_and_return;
 800b1e0:	bf00      	nop
 800b1e2:	e006      	b.n	800b1f2 <ethernet_input+0x106>
        goto free_and_return;
 800b1e4:	bf00      	nop
 800b1e6:	e004      	b.n	800b1f2 <ethernet_input+0x106>
        goto free_and_return;
 800b1e8:	bf00      	nop
 800b1ea:	e002      	b.n	800b1f2 <ethernet_input+0x106>
        goto free_and_return;
 800b1ec:	bf00      	nop
 800b1ee:	e000      	b.n	800b1f2 <ethernet_input+0x106>
        goto free_and_return;
 800b1f0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7fc fcaa 	bl	8007b4c <pbuf_free>
  return ERR_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	0800d8c8 	.word	0x0800d8c8

0800b208 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b216:	8c3b      	ldrh	r3, [r7, #32]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fb f987 	bl	800652c <lwip_htons>
 800b21e:	4603      	mov	r3, r0
 800b220:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800b222:	210e      	movs	r1, #14
 800b224:	68b8      	ldr	r0, [r7, #8]
 800b226:	f7fc fbfb 	bl	8007a20 <pbuf_add_header>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d125      	bne.n	800b27c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	8afa      	ldrh	r2, [r7, #22]
 800b23a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	2206      	movs	r2, #6
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fa03 	bl	800b64e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	3306      	adds	r3, #6
 800b24c:	2206      	movs	r2, #6
 800b24e:	6879      	ldr	r1, [r7, #4]
 800b250:	4618      	mov	r0, r3
 800b252:	f000 f9fc 	bl	800b64e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b25c:	2b06      	cmp	r3, #6
 800b25e:	d006      	beq.n	800b26e <ethernet_output+0x66>
 800b260:	4b0a      	ldr	r3, [pc, #40]	@ (800b28c <ethernet_output+0x84>)
 800b262:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800b266:	490a      	ldr	r1, [pc, #40]	@ (800b290 <ethernet_output+0x88>)
 800b268:	480a      	ldr	r0, [pc, #40]	@ (800b294 <ethernet_output+0x8c>)
 800b26a:	f000 f915 	bl	800b498 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	68b9      	ldr	r1, [r7, #8]
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	4798      	blx	r3
 800b278:	4603      	mov	r3, r0
 800b27a:	e002      	b.n	800b282 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800b27c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800b27e:	f06f 0301 	mvn.w	r3, #1
}
 800b282:	4618      	mov	r0, r3
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	0800d79c 	.word	0x0800d79c
 800b290:	0800d7d4 	.word	0x0800d7d4
 800b294:	0800d808 	.word	0x0800d808

0800b298 <rand>:
 800b298:	4b16      	ldr	r3, [pc, #88]	@ (800b2f4 <rand+0x5c>)
 800b29a:	b510      	push	{r4, lr}
 800b29c:	681c      	ldr	r4, [r3, #0]
 800b29e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b2a0:	b9b3      	cbnz	r3, 800b2d0 <rand+0x38>
 800b2a2:	2018      	movs	r0, #24
 800b2a4:	f000 fa4a 	bl	800b73c <malloc>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	6320      	str	r0, [r4, #48]	@ 0x30
 800b2ac:	b920      	cbnz	r0, 800b2b8 <rand+0x20>
 800b2ae:	4b12      	ldr	r3, [pc, #72]	@ (800b2f8 <rand+0x60>)
 800b2b0:	4812      	ldr	r0, [pc, #72]	@ (800b2fc <rand+0x64>)
 800b2b2:	2152      	movs	r1, #82	@ 0x52
 800b2b4:	f000 f9da 	bl	800b66c <__assert_func>
 800b2b8:	4911      	ldr	r1, [pc, #68]	@ (800b300 <rand+0x68>)
 800b2ba:	4b12      	ldr	r3, [pc, #72]	@ (800b304 <rand+0x6c>)
 800b2bc:	e9c0 1300 	strd	r1, r3, [r0]
 800b2c0:	4b11      	ldr	r3, [pc, #68]	@ (800b308 <rand+0x70>)
 800b2c2:	6083      	str	r3, [r0, #8]
 800b2c4:	230b      	movs	r3, #11
 800b2c6:	8183      	strh	r3, [r0, #12]
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	2001      	movs	r0, #1
 800b2cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b2d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b2d2:	480e      	ldr	r0, [pc, #56]	@ (800b30c <rand+0x74>)
 800b2d4:	690b      	ldr	r3, [r1, #16]
 800b2d6:	694c      	ldr	r4, [r1, #20]
 800b2d8:	4a0d      	ldr	r2, [pc, #52]	@ (800b310 <rand+0x78>)
 800b2da:	4358      	muls	r0, r3
 800b2dc:	fb02 0004 	mla	r0, r2, r4, r0
 800b2e0:	fba3 3202 	umull	r3, r2, r3, r2
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	eb40 0002 	adc.w	r0, r0, r2
 800b2ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b2ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b2f2:	bd10      	pop	{r4, pc}
 800b2f4:	20000030 	.word	0x20000030
 800b2f8:	0800d8d6 	.word	0x0800d8d6
 800b2fc:	0800d8ed 	.word	0x0800d8ed
 800b300:	abcd330e 	.word	0xabcd330e
 800b304:	e66d1234 	.word	0xe66d1234
 800b308:	0005deec 	.word	0x0005deec
 800b30c:	5851f42d 	.word	0x5851f42d
 800b310:	4c957f2d 	.word	0x4c957f2d

0800b314 <std>:
 800b314:	2300      	movs	r3, #0
 800b316:	b510      	push	{r4, lr}
 800b318:	4604      	mov	r4, r0
 800b31a:	e9c0 3300 	strd	r3, r3, [r0]
 800b31e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b322:	6083      	str	r3, [r0, #8]
 800b324:	8181      	strh	r1, [r0, #12]
 800b326:	6643      	str	r3, [r0, #100]	@ 0x64
 800b328:	81c2      	strh	r2, [r0, #14]
 800b32a:	6183      	str	r3, [r0, #24]
 800b32c:	4619      	mov	r1, r3
 800b32e:	2208      	movs	r2, #8
 800b330:	305c      	adds	r0, #92	@ 0x5c
 800b332:	f000 f916 	bl	800b562 <memset>
 800b336:	4b0d      	ldr	r3, [pc, #52]	@ (800b36c <std+0x58>)
 800b338:	6263      	str	r3, [r4, #36]	@ 0x24
 800b33a:	4b0d      	ldr	r3, [pc, #52]	@ (800b370 <std+0x5c>)
 800b33c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b33e:	4b0d      	ldr	r3, [pc, #52]	@ (800b374 <std+0x60>)
 800b340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b342:	4b0d      	ldr	r3, [pc, #52]	@ (800b378 <std+0x64>)
 800b344:	6323      	str	r3, [r4, #48]	@ 0x30
 800b346:	4b0d      	ldr	r3, [pc, #52]	@ (800b37c <std+0x68>)
 800b348:	6224      	str	r4, [r4, #32]
 800b34a:	429c      	cmp	r4, r3
 800b34c:	d006      	beq.n	800b35c <std+0x48>
 800b34e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b352:	4294      	cmp	r4, r2
 800b354:	d002      	beq.n	800b35c <std+0x48>
 800b356:	33d0      	adds	r3, #208	@ 0xd0
 800b358:	429c      	cmp	r4, r3
 800b35a:	d105      	bne.n	800b368 <std+0x54>
 800b35c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b364:	f000 b970 	b.w	800b648 <__retarget_lock_init_recursive>
 800b368:	bd10      	pop	{r4, pc}
 800b36a:	bf00      	nop
 800b36c:	0800b4bd 	.word	0x0800b4bd
 800b370:	0800b4df 	.word	0x0800b4df
 800b374:	0800b517 	.word	0x0800b517
 800b378:	0800b53b 	.word	0x0800b53b
 800b37c:	2000840c 	.word	0x2000840c

0800b380 <stdio_exit_handler>:
 800b380:	4a02      	ldr	r2, [pc, #8]	@ (800b38c <stdio_exit_handler+0xc>)
 800b382:	4903      	ldr	r1, [pc, #12]	@ (800b390 <stdio_exit_handler+0x10>)
 800b384:	4803      	ldr	r0, [pc, #12]	@ (800b394 <stdio_exit_handler+0x14>)
 800b386:	f000 b869 	b.w	800b45c <_fwalk_sglue>
 800b38a:	bf00      	nop
 800b38c:	20000024 	.word	0x20000024
 800b390:	0800bf51 	.word	0x0800bf51
 800b394:	20000034 	.word	0x20000034

0800b398 <cleanup_stdio>:
 800b398:	6841      	ldr	r1, [r0, #4]
 800b39a:	4b0c      	ldr	r3, [pc, #48]	@ (800b3cc <cleanup_stdio+0x34>)
 800b39c:	4299      	cmp	r1, r3
 800b39e:	b510      	push	{r4, lr}
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	d001      	beq.n	800b3a8 <cleanup_stdio+0x10>
 800b3a4:	f000 fdd4 	bl	800bf50 <_fflush_r>
 800b3a8:	68a1      	ldr	r1, [r4, #8]
 800b3aa:	4b09      	ldr	r3, [pc, #36]	@ (800b3d0 <cleanup_stdio+0x38>)
 800b3ac:	4299      	cmp	r1, r3
 800b3ae:	d002      	beq.n	800b3b6 <cleanup_stdio+0x1e>
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f000 fdcd 	bl	800bf50 <_fflush_r>
 800b3b6:	68e1      	ldr	r1, [r4, #12]
 800b3b8:	4b06      	ldr	r3, [pc, #24]	@ (800b3d4 <cleanup_stdio+0x3c>)
 800b3ba:	4299      	cmp	r1, r3
 800b3bc:	d004      	beq.n	800b3c8 <cleanup_stdio+0x30>
 800b3be:	4620      	mov	r0, r4
 800b3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c4:	f000 bdc4 	b.w	800bf50 <_fflush_r>
 800b3c8:	bd10      	pop	{r4, pc}
 800b3ca:	bf00      	nop
 800b3cc:	2000840c 	.word	0x2000840c
 800b3d0:	20008474 	.word	0x20008474
 800b3d4:	200084dc 	.word	0x200084dc

0800b3d8 <global_stdio_init.part.0>:
 800b3d8:	b510      	push	{r4, lr}
 800b3da:	4b0b      	ldr	r3, [pc, #44]	@ (800b408 <global_stdio_init.part.0+0x30>)
 800b3dc:	4c0b      	ldr	r4, [pc, #44]	@ (800b40c <global_stdio_init.part.0+0x34>)
 800b3de:	4a0c      	ldr	r2, [pc, #48]	@ (800b410 <global_stdio_init.part.0+0x38>)
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2104      	movs	r1, #4
 800b3e8:	f7ff ff94 	bl	800b314 <std>
 800b3ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	2109      	movs	r1, #9
 800b3f4:	f7ff ff8e 	bl	800b314 <std>
 800b3f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3fc:	2202      	movs	r2, #2
 800b3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b402:	2112      	movs	r1, #18
 800b404:	f7ff bf86 	b.w	800b314 <std>
 800b408:	20008544 	.word	0x20008544
 800b40c:	2000840c 	.word	0x2000840c
 800b410:	0800b381 	.word	0x0800b381

0800b414 <__sfp_lock_acquire>:
 800b414:	4801      	ldr	r0, [pc, #4]	@ (800b41c <__sfp_lock_acquire+0x8>)
 800b416:	f000 b918 	b.w	800b64a <__retarget_lock_acquire_recursive>
 800b41a:	bf00      	nop
 800b41c:	2000854d 	.word	0x2000854d

0800b420 <__sfp_lock_release>:
 800b420:	4801      	ldr	r0, [pc, #4]	@ (800b428 <__sfp_lock_release+0x8>)
 800b422:	f000 b913 	b.w	800b64c <__retarget_lock_release_recursive>
 800b426:	bf00      	nop
 800b428:	2000854d 	.word	0x2000854d

0800b42c <__sinit>:
 800b42c:	b510      	push	{r4, lr}
 800b42e:	4604      	mov	r4, r0
 800b430:	f7ff fff0 	bl	800b414 <__sfp_lock_acquire>
 800b434:	6a23      	ldr	r3, [r4, #32]
 800b436:	b11b      	cbz	r3, 800b440 <__sinit+0x14>
 800b438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b43c:	f7ff bff0 	b.w	800b420 <__sfp_lock_release>
 800b440:	4b04      	ldr	r3, [pc, #16]	@ (800b454 <__sinit+0x28>)
 800b442:	6223      	str	r3, [r4, #32]
 800b444:	4b04      	ldr	r3, [pc, #16]	@ (800b458 <__sinit+0x2c>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1f5      	bne.n	800b438 <__sinit+0xc>
 800b44c:	f7ff ffc4 	bl	800b3d8 <global_stdio_init.part.0>
 800b450:	e7f2      	b.n	800b438 <__sinit+0xc>
 800b452:	bf00      	nop
 800b454:	0800b399 	.word	0x0800b399
 800b458:	20008544 	.word	0x20008544

0800b45c <_fwalk_sglue>:
 800b45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b460:	4607      	mov	r7, r0
 800b462:	4688      	mov	r8, r1
 800b464:	4614      	mov	r4, r2
 800b466:	2600      	movs	r6, #0
 800b468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b46c:	f1b9 0901 	subs.w	r9, r9, #1
 800b470:	d505      	bpl.n	800b47e <_fwalk_sglue+0x22>
 800b472:	6824      	ldr	r4, [r4, #0]
 800b474:	2c00      	cmp	r4, #0
 800b476:	d1f7      	bne.n	800b468 <_fwalk_sglue+0xc>
 800b478:	4630      	mov	r0, r6
 800b47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47e:	89ab      	ldrh	r3, [r5, #12]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d907      	bls.n	800b494 <_fwalk_sglue+0x38>
 800b484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b488:	3301      	adds	r3, #1
 800b48a:	d003      	beq.n	800b494 <_fwalk_sglue+0x38>
 800b48c:	4629      	mov	r1, r5
 800b48e:	4638      	mov	r0, r7
 800b490:	47c0      	blx	r8
 800b492:	4306      	orrs	r6, r0
 800b494:	3568      	adds	r5, #104	@ 0x68
 800b496:	e7e9      	b.n	800b46c <_fwalk_sglue+0x10>

0800b498 <iprintf>:
 800b498:	b40f      	push	{r0, r1, r2, r3}
 800b49a:	b507      	push	{r0, r1, r2, lr}
 800b49c:	4906      	ldr	r1, [pc, #24]	@ (800b4b8 <iprintf+0x20>)
 800b49e:	ab04      	add	r3, sp, #16
 800b4a0:	6808      	ldr	r0, [r1, #0]
 800b4a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a6:	6881      	ldr	r1, [r0, #8]
 800b4a8:	9301      	str	r3, [sp, #4]
 800b4aa:	f000 fa27 	bl	800b8fc <_vfiprintf_r>
 800b4ae:	b003      	add	sp, #12
 800b4b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4b4:	b004      	add	sp, #16
 800b4b6:	4770      	bx	lr
 800b4b8:	20000030 	.word	0x20000030

0800b4bc <__sread>:
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	460c      	mov	r4, r1
 800b4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c4:	f000 f878 	bl	800b5b8 <_read_r>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	bfab      	itete	ge
 800b4cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b4ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b4d0:	181b      	addge	r3, r3, r0
 800b4d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b4d6:	bfac      	ite	ge
 800b4d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b4da:	81a3      	strhlt	r3, [r4, #12]
 800b4dc:	bd10      	pop	{r4, pc}

0800b4de <__swrite>:
 800b4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e2:	461f      	mov	r7, r3
 800b4e4:	898b      	ldrh	r3, [r1, #12]
 800b4e6:	05db      	lsls	r3, r3, #23
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	4616      	mov	r6, r2
 800b4ee:	d505      	bpl.n	800b4fc <__swrite+0x1e>
 800b4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f000 f84c 	bl	800b594 <_lseek_r>
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b502:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b506:	81a3      	strh	r3, [r4, #12]
 800b508:	4632      	mov	r2, r6
 800b50a:	463b      	mov	r3, r7
 800b50c:	4628      	mov	r0, r5
 800b50e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b512:	f000 b863 	b.w	800b5dc <_write_r>

0800b516 <__sseek>:
 800b516:	b510      	push	{r4, lr}
 800b518:	460c      	mov	r4, r1
 800b51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b51e:	f000 f839 	bl	800b594 <_lseek_r>
 800b522:	1c43      	adds	r3, r0, #1
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	bf15      	itete	ne
 800b528:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b52a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b52e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b532:	81a3      	strheq	r3, [r4, #12]
 800b534:	bf18      	it	ne
 800b536:	81a3      	strhne	r3, [r4, #12]
 800b538:	bd10      	pop	{r4, pc}

0800b53a <__sclose>:
 800b53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b53e:	f000 b819 	b.w	800b574 <_close_r>

0800b542 <memcmp>:
 800b542:	b510      	push	{r4, lr}
 800b544:	3901      	subs	r1, #1
 800b546:	4402      	add	r2, r0
 800b548:	4290      	cmp	r0, r2
 800b54a:	d101      	bne.n	800b550 <memcmp+0xe>
 800b54c:	2000      	movs	r0, #0
 800b54e:	e005      	b.n	800b55c <memcmp+0x1a>
 800b550:	7803      	ldrb	r3, [r0, #0]
 800b552:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b556:	42a3      	cmp	r3, r4
 800b558:	d001      	beq.n	800b55e <memcmp+0x1c>
 800b55a:	1b18      	subs	r0, r3, r4
 800b55c:	bd10      	pop	{r4, pc}
 800b55e:	3001      	adds	r0, #1
 800b560:	e7f2      	b.n	800b548 <memcmp+0x6>

0800b562 <memset>:
 800b562:	4402      	add	r2, r0
 800b564:	4603      	mov	r3, r0
 800b566:	4293      	cmp	r3, r2
 800b568:	d100      	bne.n	800b56c <memset+0xa>
 800b56a:	4770      	bx	lr
 800b56c:	f803 1b01 	strb.w	r1, [r3], #1
 800b570:	e7f9      	b.n	800b566 <memset+0x4>
	...

0800b574 <_close_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4d06      	ldr	r5, [pc, #24]	@ (800b590 <_close_r+0x1c>)
 800b578:	2300      	movs	r3, #0
 800b57a:	4604      	mov	r4, r0
 800b57c:	4608      	mov	r0, r1
 800b57e:	602b      	str	r3, [r5, #0]
 800b580:	f7f5 fbe4 	bl	8000d4c <_close>
 800b584:	1c43      	adds	r3, r0, #1
 800b586:	d102      	bne.n	800b58e <_close_r+0x1a>
 800b588:	682b      	ldr	r3, [r5, #0]
 800b58a:	b103      	cbz	r3, 800b58e <_close_r+0x1a>
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	20008548 	.word	0x20008548

0800b594 <_lseek_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d07      	ldr	r5, [pc, #28]	@ (800b5b4 <_lseek_r+0x20>)
 800b598:	4604      	mov	r4, r0
 800b59a:	4608      	mov	r0, r1
 800b59c:	4611      	mov	r1, r2
 800b59e:	2200      	movs	r2, #0
 800b5a0:	602a      	str	r2, [r5, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f7f5 fbf9 	bl	8000d9a <_lseek>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	d102      	bne.n	800b5b2 <_lseek_r+0x1e>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	b103      	cbz	r3, 800b5b2 <_lseek_r+0x1e>
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}
 800b5b4:	20008548 	.word	0x20008548

0800b5b8 <_read_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4d07      	ldr	r5, [pc, #28]	@ (800b5d8 <_read_r+0x20>)
 800b5bc:	4604      	mov	r4, r0
 800b5be:	4608      	mov	r0, r1
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	602a      	str	r2, [r5, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f7f5 fb87 	bl	8000cda <_read>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_read_r+0x1e>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_read_r+0x1e>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20008548 	.word	0x20008548

0800b5dc <_write_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4d07      	ldr	r5, [pc, #28]	@ (800b5fc <_write_r+0x20>)
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	4608      	mov	r0, r1
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	602a      	str	r2, [r5, #0]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f7f5 fb92 	bl	8000d14 <_write>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_write_r+0x1e>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_write_r+0x1e>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	20008548 	.word	0x20008548

0800b600 <__libc_init_array>:
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	4d0d      	ldr	r5, [pc, #52]	@ (800b638 <__libc_init_array+0x38>)
 800b604:	4c0d      	ldr	r4, [pc, #52]	@ (800b63c <__libc_init_array+0x3c>)
 800b606:	1b64      	subs	r4, r4, r5
 800b608:	10a4      	asrs	r4, r4, #2
 800b60a:	2600      	movs	r6, #0
 800b60c:	42a6      	cmp	r6, r4
 800b60e:	d109      	bne.n	800b624 <__libc_init_array+0x24>
 800b610:	4d0b      	ldr	r5, [pc, #44]	@ (800b640 <__libc_init_array+0x40>)
 800b612:	4c0c      	ldr	r4, [pc, #48]	@ (800b644 <__libc_init_array+0x44>)
 800b614:	f000 fe4a 	bl	800c2ac <_init>
 800b618:	1b64      	subs	r4, r4, r5
 800b61a:	10a4      	asrs	r4, r4, #2
 800b61c:	2600      	movs	r6, #0
 800b61e:	42a6      	cmp	r6, r4
 800b620:	d105      	bne.n	800b62e <__libc_init_array+0x2e>
 800b622:	bd70      	pop	{r4, r5, r6, pc}
 800b624:	f855 3b04 	ldr.w	r3, [r5], #4
 800b628:	4798      	blx	r3
 800b62a:	3601      	adds	r6, #1
 800b62c:	e7ee      	b.n	800b60c <__libc_init_array+0xc>
 800b62e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b632:	4798      	blx	r3
 800b634:	3601      	adds	r6, #1
 800b636:	e7f2      	b.n	800b61e <__libc_init_array+0x1e>
 800b638:	0800d9bc 	.word	0x0800d9bc
 800b63c:	0800d9bc 	.word	0x0800d9bc
 800b640:	0800d9bc 	.word	0x0800d9bc
 800b644:	0800d9c0 	.word	0x0800d9c0

0800b648 <__retarget_lock_init_recursive>:
 800b648:	4770      	bx	lr

0800b64a <__retarget_lock_acquire_recursive>:
 800b64a:	4770      	bx	lr

0800b64c <__retarget_lock_release_recursive>:
 800b64c:	4770      	bx	lr

0800b64e <memcpy>:
 800b64e:	440a      	add	r2, r1
 800b650:	4291      	cmp	r1, r2
 800b652:	f100 33ff 	add.w	r3, r0, #4294967295
 800b656:	d100      	bne.n	800b65a <memcpy+0xc>
 800b658:	4770      	bx	lr
 800b65a:	b510      	push	{r4, lr}
 800b65c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b660:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b664:	4291      	cmp	r1, r2
 800b666:	d1f9      	bne.n	800b65c <memcpy+0xe>
 800b668:	bd10      	pop	{r4, pc}
	...

0800b66c <__assert_func>:
 800b66c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b66e:	4614      	mov	r4, r2
 800b670:	461a      	mov	r2, r3
 800b672:	4b09      	ldr	r3, [pc, #36]	@ (800b698 <__assert_func+0x2c>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4605      	mov	r5, r0
 800b678:	68d8      	ldr	r0, [r3, #12]
 800b67a:	b954      	cbnz	r4, 800b692 <__assert_func+0x26>
 800b67c:	4b07      	ldr	r3, [pc, #28]	@ (800b69c <__assert_func+0x30>)
 800b67e:	461c      	mov	r4, r3
 800b680:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b684:	9100      	str	r1, [sp, #0]
 800b686:	462b      	mov	r3, r5
 800b688:	4905      	ldr	r1, [pc, #20]	@ (800b6a0 <__assert_func+0x34>)
 800b68a:	f000 fc89 	bl	800bfa0 <fiprintf>
 800b68e:	f000 fd3d 	bl	800c10c <abort>
 800b692:	4b04      	ldr	r3, [pc, #16]	@ (800b6a4 <__assert_func+0x38>)
 800b694:	e7f4      	b.n	800b680 <__assert_func+0x14>
 800b696:	bf00      	nop
 800b698:	20000030 	.word	0x20000030
 800b69c:	0800d980 	.word	0x0800d980
 800b6a0:	0800d952 	.word	0x0800d952
 800b6a4:	0800d945 	.word	0x0800d945

0800b6a8 <_free_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	2900      	cmp	r1, #0
 800b6ae:	d041      	beq.n	800b734 <_free_r+0x8c>
 800b6b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6b4:	1f0c      	subs	r4, r1, #4
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	bfb8      	it	lt
 800b6ba:	18e4      	addlt	r4, r4, r3
 800b6bc:	f000 f8e8 	bl	800b890 <__malloc_lock>
 800b6c0:	4a1d      	ldr	r2, [pc, #116]	@ (800b738 <_free_r+0x90>)
 800b6c2:	6813      	ldr	r3, [r2, #0]
 800b6c4:	b933      	cbnz	r3, 800b6d4 <_free_r+0x2c>
 800b6c6:	6063      	str	r3, [r4, #4]
 800b6c8:	6014      	str	r4, [r2, #0]
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6d0:	f000 b8e4 	b.w	800b89c <__malloc_unlock>
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	d908      	bls.n	800b6ea <_free_r+0x42>
 800b6d8:	6820      	ldr	r0, [r4, #0]
 800b6da:	1821      	adds	r1, r4, r0
 800b6dc:	428b      	cmp	r3, r1
 800b6de:	bf01      	itttt	eq
 800b6e0:	6819      	ldreq	r1, [r3, #0]
 800b6e2:	685b      	ldreq	r3, [r3, #4]
 800b6e4:	1809      	addeq	r1, r1, r0
 800b6e6:	6021      	streq	r1, [r4, #0]
 800b6e8:	e7ed      	b.n	800b6c6 <_free_r+0x1e>
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	b10b      	cbz	r3, 800b6f4 <_free_r+0x4c>
 800b6f0:	42a3      	cmp	r3, r4
 800b6f2:	d9fa      	bls.n	800b6ea <_free_r+0x42>
 800b6f4:	6811      	ldr	r1, [r2, #0]
 800b6f6:	1850      	adds	r0, r2, r1
 800b6f8:	42a0      	cmp	r0, r4
 800b6fa:	d10b      	bne.n	800b714 <_free_r+0x6c>
 800b6fc:	6820      	ldr	r0, [r4, #0]
 800b6fe:	4401      	add	r1, r0
 800b700:	1850      	adds	r0, r2, r1
 800b702:	4283      	cmp	r3, r0
 800b704:	6011      	str	r1, [r2, #0]
 800b706:	d1e0      	bne.n	800b6ca <_free_r+0x22>
 800b708:	6818      	ldr	r0, [r3, #0]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	6053      	str	r3, [r2, #4]
 800b70e:	4408      	add	r0, r1
 800b710:	6010      	str	r0, [r2, #0]
 800b712:	e7da      	b.n	800b6ca <_free_r+0x22>
 800b714:	d902      	bls.n	800b71c <_free_r+0x74>
 800b716:	230c      	movs	r3, #12
 800b718:	602b      	str	r3, [r5, #0]
 800b71a:	e7d6      	b.n	800b6ca <_free_r+0x22>
 800b71c:	6820      	ldr	r0, [r4, #0]
 800b71e:	1821      	adds	r1, r4, r0
 800b720:	428b      	cmp	r3, r1
 800b722:	bf04      	itt	eq
 800b724:	6819      	ldreq	r1, [r3, #0]
 800b726:	685b      	ldreq	r3, [r3, #4]
 800b728:	6063      	str	r3, [r4, #4]
 800b72a:	bf04      	itt	eq
 800b72c:	1809      	addeq	r1, r1, r0
 800b72e:	6021      	streq	r1, [r4, #0]
 800b730:	6054      	str	r4, [r2, #4]
 800b732:	e7ca      	b.n	800b6ca <_free_r+0x22>
 800b734:	bd38      	pop	{r3, r4, r5, pc}
 800b736:	bf00      	nop
 800b738:	20008554 	.word	0x20008554

0800b73c <malloc>:
 800b73c:	4b02      	ldr	r3, [pc, #8]	@ (800b748 <malloc+0xc>)
 800b73e:	4601      	mov	r1, r0
 800b740:	6818      	ldr	r0, [r3, #0]
 800b742:	f000 b825 	b.w	800b790 <_malloc_r>
 800b746:	bf00      	nop
 800b748:	20000030 	.word	0x20000030

0800b74c <sbrk_aligned>:
 800b74c:	b570      	push	{r4, r5, r6, lr}
 800b74e:	4e0f      	ldr	r6, [pc, #60]	@ (800b78c <sbrk_aligned+0x40>)
 800b750:	460c      	mov	r4, r1
 800b752:	6831      	ldr	r1, [r6, #0]
 800b754:	4605      	mov	r5, r0
 800b756:	b911      	cbnz	r1, 800b75e <sbrk_aligned+0x12>
 800b758:	f000 fcc8 	bl	800c0ec <_sbrk_r>
 800b75c:	6030      	str	r0, [r6, #0]
 800b75e:	4621      	mov	r1, r4
 800b760:	4628      	mov	r0, r5
 800b762:	f000 fcc3 	bl	800c0ec <_sbrk_r>
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	d103      	bne.n	800b772 <sbrk_aligned+0x26>
 800b76a:	f04f 34ff 	mov.w	r4, #4294967295
 800b76e:	4620      	mov	r0, r4
 800b770:	bd70      	pop	{r4, r5, r6, pc}
 800b772:	1cc4      	adds	r4, r0, #3
 800b774:	f024 0403 	bic.w	r4, r4, #3
 800b778:	42a0      	cmp	r0, r4
 800b77a:	d0f8      	beq.n	800b76e <sbrk_aligned+0x22>
 800b77c:	1a21      	subs	r1, r4, r0
 800b77e:	4628      	mov	r0, r5
 800b780:	f000 fcb4 	bl	800c0ec <_sbrk_r>
 800b784:	3001      	adds	r0, #1
 800b786:	d1f2      	bne.n	800b76e <sbrk_aligned+0x22>
 800b788:	e7ef      	b.n	800b76a <sbrk_aligned+0x1e>
 800b78a:	bf00      	nop
 800b78c:	20008550 	.word	0x20008550

0800b790 <_malloc_r>:
 800b790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b794:	1ccd      	adds	r5, r1, #3
 800b796:	f025 0503 	bic.w	r5, r5, #3
 800b79a:	3508      	adds	r5, #8
 800b79c:	2d0c      	cmp	r5, #12
 800b79e:	bf38      	it	cc
 800b7a0:	250c      	movcc	r5, #12
 800b7a2:	2d00      	cmp	r5, #0
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	db01      	blt.n	800b7ac <_malloc_r+0x1c>
 800b7a8:	42a9      	cmp	r1, r5
 800b7aa:	d904      	bls.n	800b7b6 <_malloc_r+0x26>
 800b7ac:	230c      	movs	r3, #12
 800b7ae:	6033      	str	r3, [r6, #0]
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b88c <_malloc_r+0xfc>
 800b7ba:	f000 f869 	bl	800b890 <__malloc_lock>
 800b7be:	f8d8 3000 	ldr.w	r3, [r8]
 800b7c2:	461c      	mov	r4, r3
 800b7c4:	bb44      	cbnz	r4, 800b818 <_malloc_r+0x88>
 800b7c6:	4629      	mov	r1, r5
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f7ff ffbf 	bl	800b74c <sbrk_aligned>
 800b7ce:	1c43      	adds	r3, r0, #1
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	d158      	bne.n	800b886 <_malloc_r+0xf6>
 800b7d4:	f8d8 4000 	ldr.w	r4, [r8]
 800b7d8:	4627      	mov	r7, r4
 800b7da:	2f00      	cmp	r7, #0
 800b7dc:	d143      	bne.n	800b866 <_malloc_r+0xd6>
 800b7de:	2c00      	cmp	r4, #0
 800b7e0:	d04b      	beq.n	800b87a <_malloc_r+0xea>
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	eb04 0903 	add.w	r9, r4, r3
 800b7ec:	f000 fc7e 	bl	800c0ec <_sbrk_r>
 800b7f0:	4581      	cmp	r9, r0
 800b7f2:	d142      	bne.n	800b87a <_malloc_r+0xea>
 800b7f4:	6821      	ldr	r1, [r4, #0]
 800b7f6:	1a6d      	subs	r5, r5, r1
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f7ff ffa6 	bl	800b74c <sbrk_aligned>
 800b800:	3001      	adds	r0, #1
 800b802:	d03a      	beq.n	800b87a <_malloc_r+0xea>
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	442b      	add	r3, r5
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	f8d8 3000 	ldr.w	r3, [r8]
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	bb62      	cbnz	r2, 800b86c <_malloc_r+0xdc>
 800b812:	f8c8 7000 	str.w	r7, [r8]
 800b816:	e00f      	b.n	800b838 <_malloc_r+0xa8>
 800b818:	6822      	ldr	r2, [r4, #0]
 800b81a:	1b52      	subs	r2, r2, r5
 800b81c:	d420      	bmi.n	800b860 <_malloc_r+0xd0>
 800b81e:	2a0b      	cmp	r2, #11
 800b820:	d917      	bls.n	800b852 <_malloc_r+0xc2>
 800b822:	1961      	adds	r1, r4, r5
 800b824:	42a3      	cmp	r3, r4
 800b826:	6025      	str	r5, [r4, #0]
 800b828:	bf18      	it	ne
 800b82a:	6059      	strne	r1, [r3, #4]
 800b82c:	6863      	ldr	r3, [r4, #4]
 800b82e:	bf08      	it	eq
 800b830:	f8c8 1000 	streq.w	r1, [r8]
 800b834:	5162      	str	r2, [r4, r5]
 800b836:	604b      	str	r3, [r1, #4]
 800b838:	4630      	mov	r0, r6
 800b83a:	f000 f82f 	bl	800b89c <__malloc_unlock>
 800b83e:	f104 000b 	add.w	r0, r4, #11
 800b842:	1d23      	adds	r3, r4, #4
 800b844:	f020 0007 	bic.w	r0, r0, #7
 800b848:	1ac2      	subs	r2, r0, r3
 800b84a:	bf1c      	itt	ne
 800b84c:	1a1b      	subne	r3, r3, r0
 800b84e:	50a3      	strne	r3, [r4, r2]
 800b850:	e7af      	b.n	800b7b2 <_malloc_r+0x22>
 800b852:	6862      	ldr	r2, [r4, #4]
 800b854:	42a3      	cmp	r3, r4
 800b856:	bf0c      	ite	eq
 800b858:	f8c8 2000 	streq.w	r2, [r8]
 800b85c:	605a      	strne	r2, [r3, #4]
 800b85e:	e7eb      	b.n	800b838 <_malloc_r+0xa8>
 800b860:	4623      	mov	r3, r4
 800b862:	6864      	ldr	r4, [r4, #4]
 800b864:	e7ae      	b.n	800b7c4 <_malloc_r+0x34>
 800b866:	463c      	mov	r4, r7
 800b868:	687f      	ldr	r7, [r7, #4]
 800b86a:	e7b6      	b.n	800b7da <_malloc_r+0x4a>
 800b86c:	461a      	mov	r2, r3
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	42a3      	cmp	r3, r4
 800b872:	d1fb      	bne.n	800b86c <_malloc_r+0xdc>
 800b874:	2300      	movs	r3, #0
 800b876:	6053      	str	r3, [r2, #4]
 800b878:	e7de      	b.n	800b838 <_malloc_r+0xa8>
 800b87a:	230c      	movs	r3, #12
 800b87c:	6033      	str	r3, [r6, #0]
 800b87e:	4630      	mov	r0, r6
 800b880:	f000 f80c 	bl	800b89c <__malloc_unlock>
 800b884:	e794      	b.n	800b7b0 <_malloc_r+0x20>
 800b886:	6005      	str	r5, [r0, #0]
 800b888:	e7d6      	b.n	800b838 <_malloc_r+0xa8>
 800b88a:	bf00      	nop
 800b88c:	20008554 	.word	0x20008554

0800b890 <__malloc_lock>:
 800b890:	4801      	ldr	r0, [pc, #4]	@ (800b898 <__malloc_lock+0x8>)
 800b892:	f7ff beda 	b.w	800b64a <__retarget_lock_acquire_recursive>
 800b896:	bf00      	nop
 800b898:	2000854c 	.word	0x2000854c

0800b89c <__malloc_unlock>:
 800b89c:	4801      	ldr	r0, [pc, #4]	@ (800b8a4 <__malloc_unlock+0x8>)
 800b89e:	f7ff bed5 	b.w	800b64c <__retarget_lock_release_recursive>
 800b8a2:	bf00      	nop
 800b8a4:	2000854c 	.word	0x2000854c

0800b8a8 <__sfputc_r>:
 800b8a8:	6893      	ldr	r3, [r2, #8]
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	b410      	push	{r4}
 800b8b0:	6093      	str	r3, [r2, #8]
 800b8b2:	da08      	bge.n	800b8c6 <__sfputc_r+0x1e>
 800b8b4:	6994      	ldr	r4, [r2, #24]
 800b8b6:	42a3      	cmp	r3, r4
 800b8b8:	db01      	blt.n	800b8be <__sfputc_r+0x16>
 800b8ba:	290a      	cmp	r1, #10
 800b8bc:	d103      	bne.n	800b8c6 <__sfputc_r+0x1e>
 800b8be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8c2:	f000 bb7f 	b.w	800bfc4 <__swbuf_r>
 800b8c6:	6813      	ldr	r3, [r2, #0]
 800b8c8:	1c58      	adds	r0, r3, #1
 800b8ca:	6010      	str	r0, [r2, #0]
 800b8cc:	7019      	strb	r1, [r3, #0]
 800b8ce:	4608      	mov	r0, r1
 800b8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <__sfputs_r>:
 800b8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d8:	4606      	mov	r6, r0
 800b8da:	460f      	mov	r7, r1
 800b8dc:	4614      	mov	r4, r2
 800b8de:	18d5      	adds	r5, r2, r3
 800b8e0:	42ac      	cmp	r4, r5
 800b8e2:	d101      	bne.n	800b8e8 <__sfputs_r+0x12>
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	e007      	b.n	800b8f8 <__sfputs_r+0x22>
 800b8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ec:	463a      	mov	r2, r7
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f7ff ffda 	bl	800b8a8 <__sfputc_r>
 800b8f4:	1c43      	adds	r3, r0, #1
 800b8f6:	d1f3      	bne.n	800b8e0 <__sfputs_r+0xa>
 800b8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8fc <_vfiprintf_r>:
 800b8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b900:	460d      	mov	r5, r1
 800b902:	b09d      	sub	sp, #116	@ 0x74
 800b904:	4614      	mov	r4, r2
 800b906:	4698      	mov	r8, r3
 800b908:	4606      	mov	r6, r0
 800b90a:	b118      	cbz	r0, 800b914 <_vfiprintf_r+0x18>
 800b90c:	6a03      	ldr	r3, [r0, #32]
 800b90e:	b90b      	cbnz	r3, 800b914 <_vfiprintf_r+0x18>
 800b910:	f7ff fd8c 	bl	800b42c <__sinit>
 800b914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b916:	07d9      	lsls	r1, r3, #31
 800b918:	d405      	bmi.n	800b926 <_vfiprintf_r+0x2a>
 800b91a:	89ab      	ldrh	r3, [r5, #12]
 800b91c:	059a      	lsls	r2, r3, #22
 800b91e:	d402      	bmi.n	800b926 <_vfiprintf_r+0x2a>
 800b920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b922:	f7ff fe92 	bl	800b64a <__retarget_lock_acquire_recursive>
 800b926:	89ab      	ldrh	r3, [r5, #12]
 800b928:	071b      	lsls	r3, r3, #28
 800b92a:	d501      	bpl.n	800b930 <_vfiprintf_r+0x34>
 800b92c:	692b      	ldr	r3, [r5, #16]
 800b92e:	b99b      	cbnz	r3, 800b958 <_vfiprintf_r+0x5c>
 800b930:	4629      	mov	r1, r5
 800b932:	4630      	mov	r0, r6
 800b934:	f000 fb84 	bl	800c040 <__swsetup_r>
 800b938:	b170      	cbz	r0, 800b958 <_vfiprintf_r+0x5c>
 800b93a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b93c:	07dc      	lsls	r4, r3, #31
 800b93e:	d504      	bpl.n	800b94a <_vfiprintf_r+0x4e>
 800b940:	f04f 30ff 	mov.w	r0, #4294967295
 800b944:	b01d      	add	sp, #116	@ 0x74
 800b946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94a:	89ab      	ldrh	r3, [r5, #12]
 800b94c:	0598      	lsls	r0, r3, #22
 800b94e:	d4f7      	bmi.n	800b940 <_vfiprintf_r+0x44>
 800b950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b952:	f7ff fe7b 	bl	800b64c <__retarget_lock_release_recursive>
 800b956:	e7f3      	b.n	800b940 <_vfiprintf_r+0x44>
 800b958:	2300      	movs	r3, #0
 800b95a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b95c:	2320      	movs	r3, #32
 800b95e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b962:	f8cd 800c 	str.w	r8, [sp, #12]
 800b966:	2330      	movs	r3, #48	@ 0x30
 800b968:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb18 <_vfiprintf_r+0x21c>
 800b96c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b970:	f04f 0901 	mov.w	r9, #1
 800b974:	4623      	mov	r3, r4
 800b976:	469a      	mov	sl, r3
 800b978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b97c:	b10a      	cbz	r2, 800b982 <_vfiprintf_r+0x86>
 800b97e:	2a25      	cmp	r2, #37	@ 0x25
 800b980:	d1f9      	bne.n	800b976 <_vfiprintf_r+0x7a>
 800b982:	ebba 0b04 	subs.w	fp, sl, r4
 800b986:	d00b      	beq.n	800b9a0 <_vfiprintf_r+0xa4>
 800b988:	465b      	mov	r3, fp
 800b98a:	4622      	mov	r2, r4
 800b98c:	4629      	mov	r1, r5
 800b98e:	4630      	mov	r0, r6
 800b990:	f7ff ffa1 	bl	800b8d6 <__sfputs_r>
 800b994:	3001      	adds	r0, #1
 800b996:	f000 80a7 	beq.w	800bae8 <_vfiprintf_r+0x1ec>
 800b99a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b99c:	445a      	add	r2, fp
 800b99e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f000 809f 	beq.w	800bae8 <_vfiprintf_r+0x1ec>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9b4:	f10a 0a01 	add.w	sl, sl, #1
 800b9b8:	9304      	str	r3, [sp, #16]
 800b9ba:	9307      	str	r3, [sp, #28]
 800b9bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9c2:	4654      	mov	r4, sl
 800b9c4:	2205      	movs	r2, #5
 800b9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ca:	4853      	ldr	r0, [pc, #332]	@ (800bb18 <_vfiprintf_r+0x21c>)
 800b9cc:	f7f4 fc38 	bl	8000240 <memchr>
 800b9d0:	9a04      	ldr	r2, [sp, #16]
 800b9d2:	b9d8      	cbnz	r0, 800ba0c <_vfiprintf_r+0x110>
 800b9d4:	06d1      	lsls	r1, r2, #27
 800b9d6:	bf44      	itt	mi
 800b9d8:	2320      	movmi	r3, #32
 800b9da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9de:	0713      	lsls	r3, r2, #28
 800b9e0:	bf44      	itt	mi
 800b9e2:	232b      	movmi	r3, #43	@ 0x2b
 800b9e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9ee:	d015      	beq.n	800ba1c <_vfiprintf_r+0x120>
 800b9f0:	9a07      	ldr	r2, [sp, #28]
 800b9f2:	4654      	mov	r4, sl
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	f04f 0c0a 	mov.w	ip, #10
 800b9fa:	4621      	mov	r1, r4
 800b9fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba00:	3b30      	subs	r3, #48	@ 0x30
 800ba02:	2b09      	cmp	r3, #9
 800ba04:	d94b      	bls.n	800ba9e <_vfiprintf_r+0x1a2>
 800ba06:	b1b0      	cbz	r0, 800ba36 <_vfiprintf_r+0x13a>
 800ba08:	9207      	str	r2, [sp, #28]
 800ba0a:	e014      	b.n	800ba36 <_vfiprintf_r+0x13a>
 800ba0c:	eba0 0308 	sub.w	r3, r0, r8
 800ba10:	fa09 f303 	lsl.w	r3, r9, r3
 800ba14:	4313      	orrs	r3, r2
 800ba16:	9304      	str	r3, [sp, #16]
 800ba18:	46a2      	mov	sl, r4
 800ba1a:	e7d2      	b.n	800b9c2 <_vfiprintf_r+0xc6>
 800ba1c:	9b03      	ldr	r3, [sp, #12]
 800ba1e:	1d19      	adds	r1, r3, #4
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	9103      	str	r1, [sp, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	bfbb      	ittet	lt
 800ba28:	425b      	neglt	r3, r3
 800ba2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba2e:	9307      	strge	r3, [sp, #28]
 800ba30:	9307      	strlt	r3, [sp, #28]
 800ba32:	bfb8      	it	lt
 800ba34:	9204      	strlt	r2, [sp, #16]
 800ba36:	7823      	ldrb	r3, [r4, #0]
 800ba38:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba3a:	d10a      	bne.n	800ba52 <_vfiprintf_r+0x156>
 800ba3c:	7863      	ldrb	r3, [r4, #1]
 800ba3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba40:	d132      	bne.n	800baa8 <_vfiprintf_r+0x1ac>
 800ba42:	9b03      	ldr	r3, [sp, #12]
 800ba44:	1d1a      	adds	r2, r3, #4
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	9203      	str	r2, [sp, #12]
 800ba4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba4e:	3402      	adds	r4, #2
 800ba50:	9305      	str	r3, [sp, #20]
 800ba52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb28 <_vfiprintf_r+0x22c>
 800ba56:	7821      	ldrb	r1, [r4, #0]
 800ba58:	2203      	movs	r2, #3
 800ba5a:	4650      	mov	r0, sl
 800ba5c:	f7f4 fbf0 	bl	8000240 <memchr>
 800ba60:	b138      	cbz	r0, 800ba72 <_vfiprintf_r+0x176>
 800ba62:	9b04      	ldr	r3, [sp, #16]
 800ba64:	eba0 000a 	sub.w	r0, r0, sl
 800ba68:	2240      	movs	r2, #64	@ 0x40
 800ba6a:	4082      	lsls	r2, r0
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	3401      	adds	r4, #1
 800ba70:	9304      	str	r3, [sp, #16]
 800ba72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba76:	4829      	ldr	r0, [pc, #164]	@ (800bb1c <_vfiprintf_r+0x220>)
 800ba78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba7c:	2206      	movs	r2, #6
 800ba7e:	f7f4 fbdf 	bl	8000240 <memchr>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d03f      	beq.n	800bb06 <_vfiprintf_r+0x20a>
 800ba86:	4b26      	ldr	r3, [pc, #152]	@ (800bb20 <_vfiprintf_r+0x224>)
 800ba88:	bb1b      	cbnz	r3, 800bad2 <_vfiprintf_r+0x1d6>
 800ba8a:	9b03      	ldr	r3, [sp, #12]
 800ba8c:	3307      	adds	r3, #7
 800ba8e:	f023 0307 	bic.w	r3, r3, #7
 800ba92:	3308      	adds	r3, #8
 800ba94:	9303      	str	r3, [sp, #12]
 800ba96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba98:	443b      	add	r3, r7
 800ba9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba9c:	e76a      	b.n	800b974 <_vfiprintf_r+0x78>
 800ba9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800baa2:	460c      	mov	r4, r1
 800baa4:	2001      	movs	r0, #1
 800baa6:	e7a8      	b.n	800b9fa <_vfiprintf_r+0xfe>
 800baa8:	2300      	movs	r3, #0
 800baaa:	3401      	adds	r4, #1
 800baac:	9305      	str	r3, [sp, #20]
 800baae:	4619      	mov	r1, r3
 800bab0:	f04f 0c0a 	mov.w	ip, #10
 800bab4:	4620      	mov	r0, r4
 800bab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baba:	3a30      	subs	r2, #48	@ 0x30
 800babc:	2a09      	cmp	r2, #9
 800babe:	d903      	bls.n	800bac8 <_vfiprintf_r+0x1cc>
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d0c6      	beq.n	800ba52 <_vfiprintf_r+0x156>
 800bac4:	9105      	str	r1, [sp, #20]
 800bac6:	e7c4      	b.n	800ba52 <_vfiprintf_r+0x156>
 800bac8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bacc:	4604      	mov	r4, r0
 800bace:	2301      	movs	r3, #1
 800bad0:	e7f0      	b.n	800bab4 <_vfiprintf_r+0x1b8>
 800bad2:	ab03      	add	r3, sp, #12
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	462a      	mov	r2, r5
 800bad8:	4b12      	ldr	r3, [pc, #72]	@ (800bb24 <_vfiprintf_r+0x228>)
 800bada:	a904      	add	r1, sp, #16
 800badc:	4630      	mov	r0, r6
 800bade:	f3af 8000 	nop.w
 800bae2:	4607      	mov	r7, r0
 800bae4:	1c78      	adds	r0, r7, #1
 800bae6:	d1d6      	bne.n	800ba96 <_vfiprintf_r+0x19a>
 800bae8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baea:	07d9      	lsls	r1, r3, #31
 800baec:	d405      	bmi.n	800bafa <_vfiprintf_r+0x1fe>
 800baee:	89ab      	ldrh	r3, [r5, #12]
 800baf0:	059a      	lsls	r2, r3, #22
 800baf2:	d402      	bmi.n	800bafa <_vfiprintf_r+0x1fe>
 800baf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baf6:	f7ff fda9 	bl	800b64c <__retarget_lock_release_recursive>
 800bafa:	89ab      	ldrh	r3, [r5, #12]
 800bafc:	065b      	lsls	r3, r3, #25
 800bafe:	f53f af1f 	bmi.w	800b940 <_vfiprintf_r+0x44>
 800bb02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb04:	e71e      	b.n	800b944 <_vfiprintf_r+0x48>
 800bb06:	ab03      	add	r3, sp, #12
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	462a      	mov	r2, r5
 800bb0c:	4b05      	ldr	r3, [pc, #20]	@ (800bb24 <_vfiprintf_r+0x228>)
 800bb0e:	a904      	add	r1, sp, #16
 800bb10:	4630      	mov	r0, r6
 800bb12:	f000 f879 	bl	800bc08 <_printf_i>
 800bb16:	e7e4      	b.n	800bae2 <_vfiprintf_r+0x1e6>
 800bb18:	0800d981 	.word	0x0800d981
 800bb1c:	0800d98b 	.word	0x0800d98b
 800bb20:	00000000 	.word	0x00000000
 800bb24:	0800b8d7 	.word	0x0800b8d7
 800bb28:	0800d987 	.word	0x0800d987

0800bb2c <_printf_common>:
 800bb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb30:	4616      	mov	r6, r2
 800bb32:	4698      	mov	r8, r3
 800bb34:	688a      	ldr	r2, [r1, #8]
 800bb36:	690b      	ldr	r3, [r1, #16]
 800bb38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	bfb8      	it	lt
 800bb40:	4613      	movlt	r3, r2
 800bb42:	6033      	str	r3, [r6, #0]
 800bb44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bb48:	4607      	mov	r7, r0
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	b10a      	cbz	r2, 800bb52 <_printf_common+0x26>
 800bb4e:	3301      	adds	r3, #1
 800bb50:	6033      	str	r3, [r6, #0]
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	0699      	lsls	r1, r3, #26
 800bb56:	bf42      	ittt	mi
 800bb58:	6833      	ldrmi	r3, [r6, #0]
 800bb5a:	3302      	addmi	r3, #2
 800bb5c:	6033      	strmi	r3, [r6, #0]
 800bb5e:	6825      	ldr	r5, [r4, #0]
 800bb60:	f015 0506 	ands.w	r5, r5, #6
 800bb64:	d106      	bne.n	800bb74 <_printf_common+0x48>
 800bb66:	f104 0a19 	add.w	sl, r4, #25
 800bb6a:	68e3      	ldr	r3, [r4, #12]
 800bb6c:	6832      	ldr	r2, [r6, #0]
 800bb6e:	1a9b      	subs	r3, r3, r2
 800bb70:	42ab      	cmp	r3, r5
 800bb72:	dc26      	bgt.n	800bbc2 <_printf_common+0x96>
 800bb74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb78:	6822      	ldr	r2, [r4, #0]
 800bb7a:	3b00      	subs	r3, #0
 800bb7c:	bf18      	it	ne
 800bb7e:	2301      	movne	r3, #1
 800bb80:	0692      	lsls	r2, r2, #26
 800bb82:	d42b      	bmi.n	800bbdc <_printf_common+0xb0>
 800bb84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb88:	4641      	mov	r1, r8
 800bb8a:	4638      	mov	r0, r7
 800bb8c:	47c8      	blx	r9
 800bb8e:	3001      	adds	r0, #1
 800bb90:	d01e      	beq.n	800bbd0 <_printf_common+0xa4>
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	6922      	ldr	r2, [r4, #16]
 800bb96:	f003 0306 	and.w	r3, r3, #6
 800bb9a:	2b04      	cmp	r3, #4
 800bb9c:	bf02      	ittt	eq
 800bb9e:	68e5      	ldreq	r5, [r4, #12]
 800bba0:	6833      	ldreq	r3, [r6, #0]
 800bba2:	1aed      	subeq	r5, r5, r3
 800bba4:	68a3      	ldr	r3, [r4, #8]
 800bba6:	bf0c      	ite	eq
 800bba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbac:	2500      	movne	r5, #0
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	bfc4      	itt	gt
 800bbb2:	1a9b      	subgt	r3, r3, r2
 800bbb4:	18ed      	addgt	r5, r5, r3
 800bbb6:	2600      	movs	r6, #0
 800bbb8:	341a      	adds	r4, #26
 800bbba:	42b5      	cmp	r5, r6
 800bbbc:	d11a      	bne.n	800bbf4 <_printf_common+0xc8>
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	e008      	b.n	800bbd4 <_printf_common+0xa8>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	4652      	mov	r2, sl
 800bbc6:	4641      	mov	r1, r8
 800bbc8:	4638      	mov	r0, r7
 800bbca:	47c8      	blx	r9
 800bbcc:	3001      	adds	r0, #1
 800bbce:	d103      	bne.n	800bbd8 <_printf_common+0xac>
 800bbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbd8:	3501      	adds	r5, #1
 800bbda:	e7c6      	b.n	800bb6a <_printf_common+0x3e>
 800bbdc:	18e1      	adds	r1, r4, r3
 800bbde:	1c5a      	adds	r2, r3, #1
 800bbe0:	2030      	movs	r0, #48	@ 0x30
 800bbe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bbe6:	4422      	add	r2, r4
 800bbe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bbec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bbf0:	3302      	adds	r3, #2
 800bbf2:	e7c7      	b.n	800bb84 <_printf_common+0x58>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	4622      	mov	r2, r4
 800bbf8:	4641      	mov	r1, r8
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	47c8      	blx	r9
 800bbfe:	3001      	adds	r0, #1
 800bc00:	d0e6      	beq.n	800bbd0 <_printf_common+0xa4>
 800bc02:	3601      	adds	r6, #1
 800bc04:	e7d9      	b.n	800bbba <_printf_common+0x8e>
	...

0800bc08 <_printf_i>:
 800bc08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc0c:	7e0f      	ldrb	r7, [r1, #24]
 800bc0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bc10:	2f78      	cmp	r7, #120	@ 0x78
 800bc12:	4691      	mov	r9, r2
 800bc14:	4680      	mov	r8, r0
 800bc16:	460c      	mov	r4, r1
 800bc18:	469a      	mov	sl, r3
 800bc1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bc1e:	d807      	bhi.n	800bc30 <_printf_i+0x28>
 800bc20:	2f62      	cmp	r7, #98	@ 0x62
 800bc22:	d80a      	bhi.n	800bc3a <_printf_i+0x32>
 800bc24:	2f00      	cmp	r7, #0
 800bc26:	f000 80d2 	beq.w	800bdce <_printf_i+0x1c6>
 800bc2a:	2f58      	cmp	r7, #88	@ 0x58
 800bc2c:	f000 80b9 	beq.w	800bda2 <_printf_i+0x19a>
 800bc30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bc38:	e03a      	b.n	800bcb0 <_printf_i+0xa8>
 800bc3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bc3e:	2b15      	cmp	r3, #21
 800bc40:	d8f6      	bhi.n	800bc30 <_printf_i+0x28>
 800bc42:	a101      	add	r1, pc, #4	@ (adr r1, 800bc48 <_printf_i+0x40>)
 800bc44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc48:	0800bca1 	.word	0x0800bca1
 800bc4c:	0800bcb5 	.word	0x0800bcb5
 800bc50:	0800bc31 	.word	0x0800bc31
 800bc54:	0800bc31 	.word	0x0800bc31
 800bc58:	0800bc31 	.word	0x0800bc31
 800bc5c:	0800bc31 	.word	0x0800bc31
 800bc60:	0800bcb5 	.word	0x0800bcb5
 800bc64:	0800bc31 	.word	0x0800bc31
 800bc68:	0800bc31 	.word	0x0800bc31
 800bc6c:	0800bc31 	.word	0x0800bc31
 800bc70:	0800bc31 	.word	0x0800bc31
 800bc74:	0800bdb5 	.word	0x0800bdb5
 800bc78:	0800bcdf 	.word	0x0800bcdf
 800bc7c:	0800bd6f 	.word	0x0800bd6f
 800bc80:	0800bc31 	.word	0x0800bc31
 800bc84:	0800bc31 	.word	0x0800bc31
 800bc88:	0800bdd7 	.word	0x0800bdd7
 800bc8c:	0800bc31 	.word	0x0800bc31
 800bc90:	0800bcdf 	.word	0x0800bcdf
 800bc94:	0800bc31 	.word	0x0800bc31
 800bc98:	0800bc31 	.word	0x0800bc31
 800bc9c:	0800bd77 	.word	0x0800bd77
 800bca0:	6833      	ldr	r3, [r6, #0]
 800bca2:	1d1a      	adds	r2, r3, #4
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	6032      	str	r2, [r6, #0]
 800bca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bcac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e09d      	b.n	800bdf0 <_printf_i+0x1e8>
 800bcb4:	6833      	ldr	r3, [r6, #0]
 800bcb6:	6820      	ldr	r0, [r4, #0]
 800bcb8:	1d19      	adds	r1, r3, #4
 800bcba:	6031      	str	r1, [r6, #0]
 800bcbc:	0606      	lsls	r6, r0, #24
 800bcbe:	d501      	bpl.n	800bcc4 <_printf_i+0xbc>
 800bcc0:	681d      	ldr	r5, [r3, #0]
 800bcc2:	e003      	b.n	800bccc <_printf_i+0xc4>
 800bcc4:	0645      	lsls	r5, r0, #25
 800bcc6:	d5fb      	bpl.n	800bcc0 <_printf_i+0xb8>
 800bcc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bccc:	2d00      	cmp	r5, #0
 800bcce:	da03      	bge.n	800bcd8 <_printf_i+0xd0>
 800bcd0:	232d      	movs	r3, #45	@ 0x2d
 800bcd2:	426d      	negs	r5, r5
 800bcd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcd8:	4859      	ldr	r0, [pc, #356]	@ (800be40 <_printf_i+0x238>)
 800bcda:	230a      	movs	r3, #10
 800bcdc:	e011      	b.n	800bd02 <_printf_i+0xfa>
 800bcde:	6821      	ldr	r1, [r4, #0]
 800bce0:	6833      	ldr	r3, [r6, #0]
 800bce2:	0608      	lsls	r0, r1, #24
 800bce4:	f853 5b04 	ldr.w	r5, [r3], #4
 800bce8:	d402      	bmi.n	800bcf0 <_printf_i+0xe8>
 800bcea:	0649      	lsls	r1, r1, #25
 800bcec:	bf48      	it	mi
 800bcee:	b2ad      	uxthmi	r5, r5
 800bcf0:	2f6f      	cmp	r7, #111	@ 0x6f
 800bcf2:	4853      	ldr	r0, [pc, #332]	@ (800be40 <_printf_i+0x238>)
 800bcf4:	6033      	str	r3, [r6, #0]
 800bcf6:	bf14      	ite	ne
 800bcf8:	230a      	movne	r3, #10
 800bcfa:	2308      	moveq	r3, #8
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bd02:	6866      	ldr	r6, [r4, #4]
 800bd04:	60a6      	str	r6, [r4, #8]
 800bd06:	2e00      	cmp	r6, #0
 800bd08:	bfa2      	ittt	ge
 800bd0a:	6821      	ldrge	r1, [r4, #0]
 800bd0c:	f021 0104 	bicge.w	r1, r1, #4
 800bd10:	6021      	strge	r1, [r4, #0]
 800bd12:	b90d      	cbnz	r5, 800bd18 <_printf_i+0x110>
 800bd14:	2e00      	cmp	r6, #0
 800bd16:	d04b      	beq.n	800bdb0 <_printf_i+0x1a8>
 800bd18:	4616      	mov	r6, r2
 800bd1a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd1e:	fb03 5711 	mls	r7, r3, r1, r5
 800bd22:	5dc7      	ldrb	r7, [r0, r7]
 800bd24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd28:	462f      	mov	r7, r5
 800bd2a:	42bb      	cmp	r3, r7
 800bd2c:	460d      	mov	r5, r1
 800bd2e:	d9f4      	bls.n	800bd1a <_printf_i+0x112>
 800bd30:	2b08      	cmp	r3, #8
 800bd32:	d10b      	bne.n	800bd4c <_printf_i+0x144>
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	07df      	lsls	r7, r3, #31
 800bd38:	d508      	bpl.n	800bd4c <_printf_i+0x144>
 800bd3a:	6923      	ldr	r3, [r4, #16]
 800bd3c:	6861      	ldr	r1, [r4, #4]
 800bd3e:	4299      	cmp	r1, r3
 800bd40:	bfde      	ittt	le
 800bd42:	2330      	movle	r3, #48	@ 0x30
 800bd44:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd48:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd4c:	1b92      	subs	r2, r2, r6
 800bd4e:	6122      	str	r2, [r4, #16]
 800bd50:	f8cd a000 	str.w	sl, [sp]
 800bd54:	464b      	mov	r3, r9
 800bd56:	aa03      	add	r2, sp, #12
 800bd58:	4621      	mov	r1, r4
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	f7ff fee6 	bl	800bb2c <_printf_common>
 800bd60:	3001      	adds	r0, #1
 800bd62:	d14a      	bne.n	800bdfa <_printf_i+0x1f2>
 800bd64:	f04f 30ff 	mov.w	r0, #4294967295
 800bd68:	b004      	add	sp, #16
 800bd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	f043 0320 	orr.w	r3, r3, #32
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	4833      	ldr	r0, [pc, #204]	@ (800be44 <_printf_i+0x23c>)
 800bd78:	2778      	movs	r7, #120	@ 0x78
 800bd7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	6831      	ldr	r1, [r6, #0]
 800bd82:	061f      	lsls	r7, r3, #24
 800bd84:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd88:	d402      	bmi.n	800bd90 <_printf_i+0x188>
 800bd8a:	065f      	lsls	r7, r3, #25
 800bd8c:	bf48      	it	mi
 800bd8e:	b2ad      	uxthmi	r5, r5
 800bd90:	6031      	str	r1, [r6, #0]
 800bd92:	07d9      	lsls	r1, r3, #31
 800bd94:	bf44      	itt	mi
 800bd96:	f043 0320 	orrmi.w	r3, r3, #32
 800bd9a:	6023      	strmi	r3, [r4, #0]
 800bd9c:	b11d      	cbz	r5, 800bda6 <_printf_i+0x19e>
 800bd9e:	2310      	movs	r3, #16
 800bda0:	e7ac      	b.n	800bcfc <_printf_i+0xf4>
 800bda2:	4827      	ldr	r0, [pc, #156]	@ (800be40 <_printf_i+0x238>)
 800bda4:	e7e9      	b.n	800bd7a <_printf_i+0x172>
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	f023 0320 	bic.w	r3, r3, #32
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	e7f6      	b.n	800bd9e <_printf_i+0x196>
 800bdb0:	4616      	mov	r6, r2
 800bdb2:	e7bd      	b.n	800bd30 <_printf_i+0x128>
 800bdb4:	6833      	ldr	r3, [r6, #0]
 800bdb6:	6825      	ldr	r5, [r4, #0]
 800bdb8:	6961      	ldr	r1, [r4, #20]
 800bdba:	1d18      	adds	r0, r3, #4
 800bdbc:	6030      	str	r0, [r6, #0]
 800bdbe:	062e      	lsls	r6, r5, #24
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	d501      	bpl.n	800bdc8 <_printf_i+0x1c0>
 800bdc4:	6019      	str	r1, [r3, #0]
 800bdc6:	e002      	b.n	800bdce <_printf_i+0x1c6>
 800bdc8:	0668      	lsls	r0, r5, #25
 800bdca:	d5fb      	bpl.n	800bdc4 <_printf_i+0x1bc>
 800bdcc:	8019      	strh	r1, [r3, #0]
 800bdce:	2300      	movs	r3, #0
 800bdd0:	6123      	str	r3, [r4, #16]
 800bdd2:	4616      	mov	r6, r2
 800bdd4:	e7bc      	b.n	800bd50 <_printf_i+0x148>
 800bdd6:	6833      	ldr	r3, [r6, #0]
 800bdd8:	1d1a      	adds	r2, r3, #4
 800bdda:	6032      	str	r2, [r6, #0]
 800bddc:	681e      	ldr	r6, [r3, #0]
 800bdde:	6862      	ldr	r2, [r4, #4]
 800bde0:	2100      	movs	r1, #0
 800bde2:	4630      	mov	r0, r6
 800bde4:	f7f4 fa2c 	bl	8000240 <memchr>
 800bde8:	b108      	cbz	r0, 800bdee <_printf_i+0x1e6>
 800bdea:	1b80      	subs	r0, r0, r6
 800bdec:	6060      	str	r0, [r4, #4]
 800bdee:	6863      	ldr	r3, [r4, #4]
 800bdf0:	6123      	str	r3, [r4, #16]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdf8:	e7aa      	b.n	800bd50 <_printf_i+0x148>
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	4632      	mov	r2, r6
 800bdfe:	4649      	mov	r1, r9
 800be00:	4640      	mov	r0, r8
 800be02:	47d0      	blx	sl
 800be04:	3001      	adds	r0, #1
 800be06:	d0ad      	beq.n	800bd64 <_printf_i+0x15c>
 800be08:	6823      	ldr	r3, [r4, #0]
 800be0a:	079b      	lsls	r3, r3, #30
 800be0c:	d413      	bmi.n	800be36 <_printf_i+0x22e>
 800be0e:	68e0      	ldr	r0, [r4, #12]
 800be10:	9b03      	ldr	r3, [sp, #12]
 800be12:	4298      	cmp	r0, r3
 800be14:	bfb8      	it	lt
 800be16:	4618      	movlt	r0, r3
 800be18:	e7a6      	b.n	800bd68 <_printf_i+0x160>
 800be1a:	2301      	movs	r3, #1
 800be1c:	4632      	mov	r2, r6
 800be1e:	4649      	mov	r1, r9
 800be20:	4640      	mov	r0, r8
 800be22:	47d0      	blx	sl
 800be24:	3001      	adds	r0, #1
 800be26:	d09d      	beq.n	800bd64 <_printf_i+0x15c>
 800be28:	3501      	adds	r5, #1
 800be2a:	68e3      	ldr	r3, [r4, #12]
 800be2c:	9903      	ldr	r1, [sp, #12]
 800be2e:	1a5b      	subs	r3, r3, r1
 800be30:	42ab      	cmp	r3, r5
 800be32:	dcf2      	bgt.n	800be1a <_printf_i+0x212>
 800be34:	e7eb      	b.n	800be0e <_printf_i+0x206>
 800be36:	2500      	movs	r5, #0
 800be38:	f104 0619 	add.w	r6, r4, #25
 800be3c:	e7f5      	b.n	800be2a <_printf_i+0x222>
 800be3e:	bf00      	nop
 800be40:	0800d992 	.word	0x0800d992
 800be44:	0800d9a3 	.word	0x0800d9a3

0800be48 <__sflush_r>:
 800be48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be50:	0716      	lsls	r6, r2, #28
 800be52:	4605      	mov	r5, r0
 800be54:	460c      	mov	r4, r1
 800be56:	d454      	bmi.n	800bf02 <__sflush_r+0xba>
 800be58:	684b      	ldr	r3, [r1, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	dc02      	bgt.n	800be64 <__sflush_r+0x1c>
 800be5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be60:	2b00      	cmp	r3, #0
 800be62:	dd48      	ble.n	800bef6 <__sflush_r+0xae>
 800be64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be66:	2e00      	cmp	r6, #0
 800be68:	d045      	beq.n	800bef6 <__sflush_r+0xae>
 800be6a:	2300      	movs	r3, #0
 800be6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be70:	682f      	ldr	r7, [r5, #0]
 800be72:	6a21      	ldr	r1, [r4, #32]
 800be74:	602b      	str	r3, [r5, #0]
 800be76:	d030      	beq.n	800beda <__sflush_r+0x92>
 800be78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be7a:	89a3      	ldrh	r3, [r4, #12]
 800be7c:	0759      	lsls	r1, r3, #29
 800be7e:	d505      	bpl.n	800be8c <__sflush_r+0x44>
 800be80:	6863      	ldr	r3, [r4, #4]
 800be82:	1ad2      	subs	r2, r2, r3
 800be84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be86:	b10b      	cbz	r3, 800be8c <__sflush_r+0x44>
 800be88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be8a:	1ad2      	subs	r2, r2, r3
 800be8c:	2300      	movs	r3, #0
 800be8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be90:	6a21      	ldr	r1, [r4, #32]
 800be92:	4628      	mov	r0, r5
 800be94:	47b0      	blx	r6
 800be96:	1c43      	adds	r3, r0, #1
 800be98:	89a3      	ldrh	r3, [r4, #12]
 800be9a:	d106      	bne.n	800beaa <__sflush_r+0x62>
 800be9c:	6829      	ldr	r1, [r5, #0]
 800be9e:	291d      	cmp	r1, #29
 800bea0:	d82b      	bhi.n	800befa <__sflush_r+0xb2>
 800bea2:	4a2a      	ldr	r2, [pc, #168]	@ (800bf4c <__sflush_r+0x104>)
 800bea4:	410a      	asrs	r2, r1
 800bea6:	07d6      	lsls	r6, r2, #31
 800bea8:	d427      	bmi.n	800befa <__sflush_r+0xb2>
 800beaa:	2200      	movs	r2, #0
 800beac:	6062      	str	r2, [r4, #4]
 800beae:	04d9      	lsls	r1, r3, #19
 800beb0:	6922      	ldr	r2, [r4, #16]
 800beb2:	6022      	str	r2, [r4, #0]
 800beb4:	d504      	bpl.n	800bec0 <__sflush_r+0x78>
 800beb6:	1c42      	adds	r2, r0, #1
 800beb8:	d101      	bne.n	800bebe <__sflush_r+0x76>
 800beba:	682b      	ldr	r3, [r5, #0]
 800bebc:	b903      	cbnz	r3, 800bec0 <__sflush_r+0x78>
 800bebe:	6560      	str	r0, [r4, #84]	@ 0x54
 800bec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bec2:	602f      	str	r7, [r5, #0]
 800bec4:	b1b9      	cbz	r1, 800bef6 <__sflush_r+0xae>
 800bec6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800beca:	4299      	cmp	r1, r3
 800becc:	d002      	beq.n	800bed4 <__sflush_r+0x8c>
 800bece:	4628      	mov	r0, r5
 800bed0:	f7ff fbea 	bl	800b6a8 <_free_r>
 800bed4:	2300      	movs	r3, #0
 800bed6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bed8:	e00d      	b.n	800bef6 <__sflush_r+0xae>
 800beda:	2301      	movs	r3, #1
 800bedc:	4628      	mov	r0, r5
 800bede:	47b0      	blx	r6
 800bee0:	4602      	mov	r2, r0
 800bee2:	1c50      	adds	r0, r2, #1
 800bee4:	d1c9      	bne.n	800be7a <__sflush_r+0x32>
 800bee6:	682b      	ldr	r3, [r5, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d0c6      	beq.n	800be7a <__sflush_r+0x32>
 800beec:	2b1d      	cmp	r3, #29
 800beee:	d001      	beq.n	800bef4 <__sflush_r+0xac>
 800bef0:	2b16      	cmp	r3, #22
 800bef2:	d11e      	bne.n	800bf32 <__sflush_r+0xea>
 800bef4:	602f      	str	r7, [r5, #0]
 800bef6:	2000      	movs	r0, #0
 800bef8:	e022      	b.n	800bf40 <__sflush_r+0xf8>
 800befa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800befe:	b21b      	sxth	r3, r3
 800bf00:	e01b      	b.n	800bf3a <__sflush_r+0xf2>
 800bf02:	690f      	ldr	r7, [r1, #16]
 800bf04:	2f00      	cmp	r7, #0
 800bf06:	d0f6      	beq.n	800bef6 <__sflush_r+0xae>
 800bf08:	0793      	lsls	r3, r2, #30
 800bf0a:	680e      	ldr	r6, [r1, #0]
 800bf0c:	bf08      	it	eq
 800bf0e:	694b      	ldreq	r3, [r1, #20]
 800bf10:	600f      	str	r7, [r1, #0]
 800bf12:	bf18      	it	ne
 800bf14:	2300      	movne	r3, #0
 800bf16:	eba6 0807 	sub.w	r8, r6, r7
 800bf1a:	608b      	str	r3, [r1, #8]
 800bf1c:	f1b8 0f00 	cmp.w	r8, #0
 800bf20:	dde9      	ble.n	800bef6 <__sflush_r+0xae>
 800bf22:	6a21      	ldr	r1, [r4, #32]
 800bf24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf26:	4643      	mov	r3, r8
 800bf28:	463a      	mov	r2, r7
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	47b0      	blx	r6
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	dc08      	bgt.n	800bf44 <__sflush_r+0xfc>
 800bf32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf3a:	81a3      	strh	r3, [r4, #12]
 800bf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf44:	4407      	add	r7, r0
 800bf46:	eba8 0800 	sub.w	r8, r8, r0
 800bf4a:	e7e7      	b.n	800bf1c <__sflush_r+0xd4>
 800bf4c:	dfbffffe 	.word	0xdfbffffe

0800bf50 <_fflush_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	690b      	ldr	r3, [r1, #16]
 800bf54:	4605      	mov	r5, r0
 800bf56:	460c      	mov	r4, r1
 800bf58:	b913      	cbnz	r3, 800bf60 <_fflush_r+0x10>
 800bf5a:	2500      	movs	r5, #0
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	bd38      	pop	{r3, r4, r5, pc}
 800bf60:	b118      	cbz	r0, 800bf6a <_fflush_r+0x1a>
 800bf62:	6a03      	ldr	r3, [r0, #32]
 800bf64:	b90b      	cbnz	r3, 800bf6a <_fflush_r+0x1a>
 800bf66:	f7ff fa61 	bl	800b42c <__sinit>
 800bf6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d0f3      	beq.n	800bf5a <_fflush_r+0xa>
 800bf72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf74:	07d0      	lsls	r0, r2, #31
 800bf76:	d404      	bmi.n	800bf82 <_fflush_r+0x32>
 800bf78:	0599      	lsls	r1, r3, #22
 800bf7a:	d402      	bmi.n	800bf82 <_fflush_r+0x32>
 800bf7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf7e:	f7ff fb64 	bl	800b64a <__retarget_lock_acquire_recursive>
 800bf82:	4628      	mov	r0, r5
 800bf84:	4621      	mov	r1, r4
 800bf86:	f7ff ff5f 	bl	800be48 <__sflush_r>
 800bf8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf8c:	07da      	lsls	r2, r3, #31
 800bf8e:	4605      	mov	r5, r0
 800bf90:	d4e4      	bmi.n	800bf5c <_fflush_r+0xc>
 800bf92:	89a3      	ldrh	r3, [r4, #12]
 800bf94:	059b      	lsls	r3, r3, #22
 800bf96:	d4e1      	bmi.n	800bf5c <_fflush_r+0xc>
 800bf98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf9a:	f7ff fb57 	bl	800b64c <__retarget_lock_release_recursive>
 800bf9e:	e7dd      	b.n	800bf5c <_fflush_r+0xc>

0800bfa0 <fiprintf>:
 800bfa0:	b40e      	push	{r1, r2, r3}
 800bfa2:	b503      	push	{r0, r1, lr}
 800bfa4:	4601      	mov	r1, r0
 800bfa6:	ab03      	add	r3, sp, #12
 800bfa8:	4805      	ldr	r0, [pc, #20]	@ (800bfc0 <fiprintf+0x20>)
 800bfaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfae:	6800      	ldr	r0, [r0, #0]
 800bfb0:	9301      	str	r3, [sp, #4]
 800bfb2:	f7ff fca3 	bl	800b8fc <_vfiprintf_r>
 800bfb6:	b002      	add	sp, #8
 800bfb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfbc:	b003      	add	sp, #12
 800bfbe:	4770      	bx	lr
 800bfc0:	20000030 	.word	0x20000030

0800bfc4 <__swbuf_r>:
 800bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc6:	460e      	mov	r6, r1
 800bfc8:	4614      	mov	r4, r2
 800bfca:	4605      	mov	r5, r0
 800bfcc:	b118      	cbz	r0, 800bfd6 <__swbuf_r+0x12>
 800bfce:	6a03      	ldr	r3, [r0, #32]
 800bfd0:	b90b      	cbnz	r3, 800bfd6 <__swbuf_r+0x12>
 800bfd2:	f7ff fa2b 	bl	800b42c <__sinit>
 800bfd6:	69a3      	ldr	r3, [r4, #24]
 800bfd8:	60a3      	str	r3, [r4, #8]
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	071a      	lsls	r2, r3, #28
 800bfde:	d501      	bpl.n	800bfe4 <__swbuf_r+0x20>
 800bfe0:	6923      	ldr	r3, [r4, #16]
 800bfe2:	b943      	cbnz	r3, 800bff6 <__swbuf_r+0x32>
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f000 f82a 	bl	800c040 <__swsetup_r>
 800bfec:	b118      	cbz	r0, 800bff6 <__swbuf_r+0x32>
 800bfee:	f04f 37ff 	mov.w	r7, #4294967295
 800bff2:	4638      	mov	r0, r7
 800bff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	6922      	ldr	r2, [r4, #16]
 800bffa:	1a98      	subs	r0, r3, r2
 800bffc:	6963      	ldr	r3, [r4, #20]
 800bffe:	b2f6      	uxtb	r6, r6
 800c000:	4283      	cmp	r3, r0
 800c002:	4637      	mov	r7, r6
 800c004:	dc05      	bgt.n	800c012 <__swbuf_r+0x4e>
 800c006:	4621      	mov	r1, r4
 800c008:	4628      	mov	r0, r5
 800c00a:	f7ff ffa1 	bl	800bf50 <_fflush_r>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d1ed      	bne.n	800bfee <__swbuf_r+0x2a>
 800c012:	68a3      	ldr	r3, [r4, #8]
 800c014:	3b01      	subs	r3, #1
 800c016:	60a3      	str	r3, [r4, #8]
 800c018:	6823      	ldr	r3, [r4, #0]
 800c01a:	1c5a      	adds	r2, r3, #1
 800c01c:	6022      	str	r2, [r4, #0]
 800c01e:	701e      	strb	r6, [r3, #0]
 800c020:	6962      	ldr	r2, [r4, #20]
 800c022:	1c43      	adds	r3, r0, #1
 800c024:	429a      	cmp	r2, r3
 800c026:	d004      	beq.n	800c032 <__swbuf_r+0x6e>
 800c028:	89a3      	ldrh	r3, [r4, #12]
 800c02a:	07db      	lsls	r3, r3, #31
 800c02c:	d5e1      	bpl.n	800bff2 <__swbuf_r+0x2e>
 800c02e:	2e0a      	cmp	r6, #10
 800c030:	d1df      	bne.n	800bff2 <__swbuf_r+0x2e>
 800c032:	4621      	mov	r1, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f7ff ff8b 	bl	800bf50 <_fflush_r>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d0d9      	beq.n	800bff2 <__swbuf_r+0x2e>
 800c03e:	e7d6      	b.n	800bfee <__swbuf_r+0x2a>

0800c040 <__swsetup_r>:
 800c040:	b538      	push	{r3, r4, r5, lr}
 800c042:	4b29      	ldr	r3, [pc, #164]	@ (800c0e8 <__swsetup_r+0xa8>)
 800c044:	4605      	mov	r5, r0
 800c046:	6818      	ldr	r0, [r3, #0]
 800c048:	460c      	mov	r4, r1
 800c04a:	b118      	cbz	r0, 800c054 <__swsetup_r+0x14>
 800c04c:	6a03      	ldr	r3, [r0, #32]
 800c04e:	b90b      	cbnz	r3, 800c054 <__swsetup_r+0x14>
 800c050:	f7ff f9ec 	bl	800b42c <__sinit>
 800c054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c058:	0719      	lsls	r1, r3, #28
 800c05a:	d422      	bmi.n	800c0a2 <__swsetup_r+0x62>
 800c05c:	06da      	lsls	r2, r3, #27
 800c05e:	d407      	bmi.n	800c070 <__swsetup_r+0x30>
 800c060:	2209      	movs	r2, #9
 800c062:	602a      	str	r2, [r5, #0]
 800c064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c068:	81a3      	strh	r3, [r4, #12]
 800c06a:	f04f 30ff 	mov.w	r0, #4294967295
 800c06e:	e033      	b.n	800c0d8 <__swsetup_r+0x98>
 800c070:	0758      	lsls	r0, r3, #29
 800c072:	d512      	bpl.n	800c09a <__swsetup_r+0x5a>
 800c074:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c076:	b141      	cbz	r1, 800c08a <__swsetup_r+0x4a>
 800c078:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c07c:	4299      	cmp	r1, r3
 800c07e:	d002      	beq.n	800c086 <__swsetup_r+0x46>
 800c080:	4628      	mov	r0, r5
 800c082:	f7ff fb11 	bl	800b6a8 <_free_r>
 800c086:	2300      	movs	r3, #0
 800c088:	6363      	str	r3, [r4, #52]	@ 0x34
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c090:	81a3      	strh	r3, [r4, #12]
 800c092:	2300      	movs	r3, #0
 800c094:	6063      	str	r3, [r4, #4]
 800c096:	6923      	ldr	r3, [r4, #16]
 800c098:	6023      	str	r3, [r4, #0]
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	f043 0308 	orr.w	r3, r3, #8
 800c0a0:	81a3      	strh	r3, [r4, #12]
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	b94b      	cbnz	r3, 800c0ba <__swsetup_r+0x7a>
 800c0a6:	89a3      	ldrh	r3, [r4, #12]
 800c0a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0b0:	d003      	beq.n	800c0ba <__swsetup_r+0x7a>
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f000 f856 	bl	800c166 <__smakebuf_r>
 800c0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0be:	f013 0201 	ands.w	r2, r3, #1
 800c0c2:	d00a      	beq.n	800c0da <__swsetup_r+0x9a>
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	60a2      	str	r2, [r4, #8]
 800c0c8:	6962      	ldr	r2, [r4, #20]
 800c0ca:	4252      	negs	r2, r2
 800c0cc:	61a2      	str	r2, [r4, #24]
 800c0ce:	6922      	ldr	r2, [r4, #16]
 800c0d0:	b942      	cbnz	r2, 800c0e4 <__swsetup_r+0xa4>
 800c0d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c0d6:	d1c5      	bne.n	800c064 <__swsetup_r+0x24>
 800c0d8:	bd38      	pop	{r3, r4, r5, pc}
 800c0da:	0799      	lsls	r1, r3, #30
 800c0dc:	bf58      	it	pl
 800c0de:	6962      	ldrpl	r2, [r4, #20]
 800c0e0:	60a2      	str	r2, [r4, #8]
 800c0e2:	e7f4      	b.n	800c0ce <__swsetup_r+0x8e>
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	e7f7      	b.n	800c0d8 <__swsetup_r+0x98>
 800c0e8:	20000030 	.word	0x20000030

0800c0ec <_sbrk_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4d06      	ldr	r5, [pc, #24]	@ (800c108 <_sbrk_r+0x1c>)
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	602b      	str	r3, [r5, #0]
 800c0f8:	f7f4 fe5c 	bl	8000db4 <_sbrk>
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	d102      	bne.n	800c106 <_sbrk_r+0x1a>
 800c100:	682b      	ldr	r3, [r5, #0]
 800c102:	b103      	cbz	r3, 800c106 <_sbrk_r+0x1a>
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	bd38      	pop	{r3, r4, r5, pc}
 800c108:	20008548 	.word	0x20008548

0800c10c <abort>:
 800c10c:	b508      	push	{r3, lr}
 800c10e:	2006      	movs	r0, #6
 800c110:	f000 f88e 	bl	800c230 <raise>
 800c114:	2001      	movs	r0, #1
 800c116:	f7f4 fdd5 	bl	8000cc4 <_exit>

0800c11a <__swhatbuf_r>:
 800c11a:	b570      	push	{r4, r5, r6, lr}
 800c11c:	460c      	mov	r4, r1
 800c11e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c122:	2900      	cmp	r1, #0
 800c124:	b096      	sub	sp, #88	@ 0x58
 800c126:	4615      	mov	r5, r2
 800c128:	461e      	mov	r6, r3
 800c12a:	da0d      	bge.n	800c148 <__swhatbuf_r+0x2e>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c132:	f04f 0100 	mov.w	r1, #0
 800c136:	bf14      	ite	ne
 800c138:	2340      	movne	r3, #64	@ 0x40
 800c13a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c13e:	2000      	movs	r0, #0
 800c140:	6031      	str	r1, [r6, #0]
 800c142:	602b      	str	r3, [r5, #0]
 800c144:	b016      	add	sp, #88	@ 0x58
 800c146:	bd70      	pop	{r4, r5, r6, pc}
 800c148:	466a      	mov	r2, sp
 800c14a:	f000 f879 	bl	800c240 <_fstat_r>
 800c14e:	2800      	cmp	r0, #0
 800c150:	dbec      	blt.n	800c12c <__swhatbuf_r+0x12>
 800c152:	9901      	ldr	r1, [sp, #4]
 800c154:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c158:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c15c:	4259      	negs	r1, r3
 800c15e:	4159      	adcs	r1, r3
 800c160:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c164:	e7eb      	b.n	800c13e <__swhatbuf_r+0x24>

0800c166 <__smakebuf_r>:
 800c166:	898b      	ldrh	r3, [r1, #12]
 800c168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c16a:	079d      	lsls	r5, r3, #30
 800c16c:	4606      	mov	r6, r0
 800c16e:	460c      	mov	r4, r1
 800c170:	d507      	bpl.n	800c182 <__smakebuf_r+0x1c>
 800c172:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c176:	6023      	str	r3, [r4, #0]
 800c178:	6123      	str	r3, [r4, #16]
 800c17a:	2301      	movs	r3, #1
 800c17c:	6163      	str	r3, [r4, #20]
 800c17e:	b003      	add	sp, #12
 800c180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c182:	ab01      	add	r3, sp, #4
 800c184:	466a      	mov	r2, sp
 800c186:	f7ff ffc8 	bl	800c11a <__swhatbuf_r>
 800c18a:	9f00      	ldr	r7, [sp, #0]
 800c18c:	4605      	mov	r5, r0
 800c18e:	4639      	mov	r1, r7
 800c190:	4630      	mov	r0, r6
 800c192:	f7ff fafd 	bl	800b790 <_malloc_r>
 800c196:	b948      	cbnz	r0, 800c1ac <__smakebuf_r+0x46>
 800c198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c19c:	059a      	lsls	r2, r3, #22
 800c19e:	d4ee      	bmi.n	800c17e <__smakebuf_r+0x18>
 800c1a0:	f023 0303 	bic.w	r3, r3, #3
 800c1a4:	f043 0302 	orr.w	r3, r3, #2
 800c1a8:	81a3      	strh	r3, [r4, #12]
 800c1aa:	e7e2      	b.n	800c172 <__smakebuf_r+0xc>
 800c1ac:	89a3      	ldrh	r3, [r4, #12]
 800c1ae:	6020      	str	r0, [r4, #0]
 800c1b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1b4:	81a3      	strh	r3, [r4, #12]
 800c1b6:	9b01      	ldr	r3, [sp, #4]
 800c1b8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1bc:	b15b      	cbz	r3, 800c1d6 <__smakebuf_r+0x70>
 800c1be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f000 f84e 	bl	800c264 <_isatty_r>
 800c1c8:	b128      	cbz	r0, 800c1d6 <__smakebuf_r+0x70>
 800c1ca:	89a3      	ldrh	r3, [r4, #12]
 800c1cc:	f023 0303 	bic.w	r3, r3, #3
 800c1d0:	f043 0301 	orr.w	r3, r3, #1
 800c1d4:	81a3      	strh	r3, [r4, #12]
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	431d      	orrs	r5, r3
 800c1da:	81a5      	strh	r5, [r4, #12]
 800c1dc:	e7cf      	b.n	800c17e <__smakebuf_r+0x18>

0800c1de <_raise_r>:
 800c1de:	291f      	cmp	r1, #31
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	d904      	bls.n	800c1f2 <_raise_r+0x14>
 800c1e8:	2316      	movs	r3, #22
 800c1ea:	6003      	str	r3, [r0, #0]
 800c1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f0:	bd38      	pop	{r3, r4, r5, pc}
 800c1f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c1f4:	b112      	cbz	r2, 800c1fc <_raise_r+0x1e>
 800c1f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1fa:	b94b      	cbnz	r3, 800c210 <_raise_r+0x32>
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	f000 f853 	bl	800c2a8 <_getpid_r>
 800c202:	4622      	mov	r2, r4
 800c204:	4601      	mov	r1, r0
 800c206:	4628      	mov	r0, r5
 800c208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c20c:	f000 b83a 	b.w	800c284 <_kill_r>
 800c210:	2b01      	cmp	r3, #1
 800c212:	d00a      	beq.n	800c22a <_raise_r+0x4c>
 800c214:	1c59      	adds	r1, r3, #1
 800c216:	d103      	bne.n	800c220 <_raise_r+0x42>
 800c218:	2316      	movs	r3, #22
 800c21a:	6003      	str	r3, [r0, #0]
 800c21c:	2001      	movs	r0, #1
 800c21e:	e7e7      	b.n	800c1f0 <_raise_r+0x12>
 800c220:	2100      	movs	r1, #0
 800c222:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c226:	4620      	mov	r0, r4
 800c228:	4798      	blx	r3
 800c22a:	2000      	movs	r0, #0
 800c22c:	e7e0      	b.n	800c1f0 <_raise_r+0x12>
	...

0800c230 <raise>:
 800c230:	4b02      	ldr	r3, [pc, #8]	@ (800c23c <raise+0xc>)
 800c232:	4601      	mov	r1, r0
 800c234:	6818      	ldr	r0, [r3, #0]
 800c236:	f7ff bfd2 	b.w	800c1de <_raise_r>
 800c23a:	bf00      	nop
 800c23c:	20000030 	.word	0x20000030

0800c240 <_fstat_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	4d07      	ldr	r5, [pc, #28]	@ (800c260 <_fstat_r+0x20>)
 800c244:	2300      	movs	r3, #0
 800c246:	4604      	mov	r4, r0
 800c248:	4608      	mov	r0, r1
 800c24a:	4611      	mov	r1, r2
 800c24c:	602b      	str	r3, [r5, #0]
 800c24e:	f7f4 fd89 	bl	8000d64 <_fstat>
 800c252:	1c43      	adds	r3, r0, #1
 800c254:	d102      	bne.n	800c25c <_fstat_r+0x1c>
 800c256:	682b      	ldr	r3, [r5, #0]
 800c258:	b103      	cbz	r3, 800c25c <_fstat_r+0x1c>
 800c25a:	6023      	str	r3, [r4, #0]
 800c25c:	bd38      	pop	{r3, r4, r5, pc}
 800c25e:	bf00      	nop
 800c260:	20008548 	.word	0x20008548

0800c264 <_isatty_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d06      	ldr	r5, [pc, #24]	@ (800c280 <_isatty_r+0x1c>)
 800c268:	2300      	movs	r3, #0
 800c26a:	4604      	mov	r4, r0
 800c26c:	4608      	mov	r0, r1
 800c26e:	602b      	str	r3, [r5, #0]
 800c270:	f7f4 fd88 	bl	8000d84 <_isatty>
 800c274:	1c43      	adds	r3, r0, #1
 800c276:	d102      	bne.n	800c27e <_isatty_r+0x1a>
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	b103      	cbz	r3, 800c27e <_isatty_r+0x1a>
 800c27c:	6023      	str	r3, [r4, #0]
 800c27e:	bd38      	pop	{r3, r4, r5, pc}
 800c280:	20008548 	.word	0x20008548

0800c284 <_kill_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d07      	ldr	r5, [pc, #28]	@ (800c2a4 <_kill_r+0x20>)
 800c288:	2300      	movs	r3, #0
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	4611      	mov	r1, r2
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	f7f4 fd05 	bl	8000ca0 <_kill>
 800c296:	1c43      	adds	r3, r0, #1
 800c298:	d102      	bne.n	800c2a0 <_kill_r+0x1c>
 800c29a:	682b      	ldr	r3, [r5, #0]
 800c29c:	b103      	cbz	r3, 800c2a0 <_kill_r+0x1c>
 800c29e:	6023      	str	r3, [r4, #0]
 800c2a0:	bd38      	pop	{r3, r4, r5, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20008548 	.word	0x20008548

0800c2a8 <_getpid_r>:
 800c2a8:	f7f4 bcf2 	b.w	8000c90 <_getpid>

0800c2ac <_init>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	bf00      	nop
 800c2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2b2:	bc08      	pop	{r3}
 800c2b4:	469e      	mov	lr, r3
 800c2b6:	4770      	bx	lr

0800c2b8 <_fini>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	bf00      	nop
 800c2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2be:	bc08      	pop	{r3}
 800c2c0:	469e      	mov	lr, r3
 800c2c2:	4770      	bx	lr

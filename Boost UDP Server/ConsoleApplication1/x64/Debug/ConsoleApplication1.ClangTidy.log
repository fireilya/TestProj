D:\Cube development artefacts\TestProj-main\Boost UDP Server\ConsoleApplication1\ConsoleApplication1.cpp:26:14: warning: unused parameter 'argc' [clang-diagnostic-unused-parameter]
int main(int argc, char* argv[]) {
             ^
D:\Cube development artefacts\TestProj-main\Boost UDP Server\ConsoleApplication1\ConsoleApplication1.cpp:26:26: warning: unused parameter 'argv' [clang-diagnostic-unused-parameter]
int main(int argc, char* argv[]) {
                         ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:79:20: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
  arg->exit_event_ = exit_event_ = ::CreateEventW(0, true, false, 0);
                   ^
D:\Cube development artefacts\TestProj-main\Boost UDP Server\ConsoleApplication1\ConsoleApplication1.cpp:27:5: note: Calling 'handle_connections'
    handle_connections();
    ^~~~~~~~~~~~~~~~~~~~
D:\Cube development artefacts\TestProj-main\Boost UDP Server\ConsoleApplication1\ConsoleApplication1.cpp:11:25: note: Calling constructor for 'basic_datagram_socket<boost::asio::ip::udp, boost::asio::any_io_executor>'
        ip::udp::socket sock(service, ip::udp::endpoint(ip::udp::v4(), 3333));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/basic_datagram_socket.hpp:205:7: note: Calling constructor for 'basic_socket<boost::asio::ip::udp, boost::asio::any_io_executor>'
    : basic_socket<Protocol, Executor>(context, endpoint)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/basic_socket.hpp:233:7: note: Calling constructor for 'io_object_impl<boost::asio::detail::win_iocp_socket_service<boost::asio::ip::udp>, boost::asio::any_io_executor>'
    : impl_(0, 0, context)
      ^~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/io_object_impl.hpp:58:17: note: Calling 'use_service<boost::asio::detail::win_iocp_socket_service<boost::asio::ip::udp>>'
    : service_(&boost::asio::use_service<IoObjectService>(context)),
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/impl/io_context.hpp:41:10: note: Calling 'service_registry::use_service'
  return ioc.service_registry_->template use_service<Service>(ioc);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.hpp:39:33: note: Calling 'service_registry::do_use_service'
  return *static_cast<Service*>(do_use_service(key, factory, &owner));
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.ipp:121:3: note: Loop condition is false. Execution continues on line 131
  while (service)
  ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.ipp:132:36: note: Calling 'service_registry::create'
  auto_service_ptr new_service = { factory(owner) };
                                   ^~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.hpp:86:14: note: Calling constructor for 'win_iocp_socket_service<boost::asio::ip::udp>'
  return new Service(*static_cast<Owner*>(owner));
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/win_iocp_socket_service.hpp:135:7: note: Calling constructor for 'win_iocp_socket_service_base'
      win_iocp_socket_service_base(context)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_socket_service_base.ipp:33:19: note: Calling 'use_service<boost::asio::detail::win_iocp_io_context>'
    iocp_service_(use_service<win_iocp_io_context>(context)),
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/impl/execution_context.hpp:35:10: note: Calling 'service_registry::use_service'
  return e.service_registry_->template use_service<Service>();
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.hpp:30:33: note: Calling 'service_registry::do_use_service'
  return *static_cast<Service*>(do_use_service(key, factory, &owner_));
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.ipp:121:3: note: Loop condition is false. Execution continues on line 131
  while (service)
  ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.ipp:132:36: note: Calling 'service_registry::create'
  auto_service_ptr new_service = { factory(owner) };
                                   ^~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.hpp:86:14: note: Calling constructor for 'win_iocp_io_context'
  return new Service(*static_cast<Owner*>(owner));
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:96:26: note: 'concurrency_hint' is < 0
      static_cast<DWORD>(concurrency_hint >= 0 ? concurrency_hint : DWORD(~0)));
                         ^~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:96:26: note: '?' condition is false
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:97:7: note: Assuming field 'handle' is non-null
  if (!iocp_.handle)
      ^~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:97:3: note: Taking false branch
  if (!iocp_.handle)
  ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:105:7: note: 'own_thread' is true
  if (own_thread)
      ^~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:105:3: note: Taking true branch
  if (own_thread)
  ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:108:23: note: Calling constructor for 'win_thread'
    thread_.reset(new boost::asio::detail::thread(thread_function(this)));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/win_thread.hpp:74:18: note: Memory is allocated
    start_thread(new func<Function>(f), stack_size);
                 ^~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/win_thread.hpp:74:5: note: Calling 'win_thread::start_thread'
    start_thread(new func<Function>(f), stack_size);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:70:7: note: Assuming 'entry_event' is null
  if (!entry_event)
      ^~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:70:3: note: Taking true branch
  if (!entry_event)
  ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:73:5: note: Memory is released
    delete arg;
    ^~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:79:20: note: Use of memory after it is freed
  arg->exit_event_ = exit_event_ = ::CreateEventW(0, true, false, 0);
  ~~~~~~~~~~~~~~~~ ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:90:38: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
  thread_ = reinterpret_cast<HANDLE>(::_beginthreadex(0,
                                     ^
D:\Cube development artefacts\TestProj-main\Boost UDP Server\ConsoleApplication1\ConsoleApplication1.cpp:27:5: note: Calling 'handle_connections'
    handle_connections();
    ^~~~~~~~~~~~~~~~~~~~
D:\Cube development artefacts\TestProj-main\Boost UDP Server\ConsoleApplication1\ConsoleApplication1.cpp:11:25: note: Calling constructor for 'basic_datagram_socket<boost::asio::ip::udp, boost::asio::any_io_executor>'
        ip::udp::socket sock(service, ip::udp::endpoint(ip::udp::v4(), 3333));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/basic_datagram_socket.hpp:205:7: note: Calling constructor for 'basic_socket<boost::asio::ip::udp, boost::asio::any_io_executor>'
    : basic_socket<Protocol, Executor>(context, endpoint)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/basic_socket.hpp:233:7: note: Calling constructor for 'io_object_impl<boost::asio::detail::win_iocp_socket_service<boost::asio::ip::udp>, boost::asio::any_io_executor>'
    : impl_(0, 0, context)
      ^~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/io_object_impl.hpp:58:17: note: Calling 'use_service<boost::asio::detail::win_iocp_socket_service<boost::asio::ip::udp>>'
    : service_(&boost::asio::use_service<IoObjectService>(context)),
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/impl/io_context.hpp:41:10: note: Calling 'service_registry::use_service'
  return ioc.service_registry_->template use_service<Service>(ioc);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.hpp:39:33: note: Calling 'service_registry::do_use_service'
  return *static_cast<Service*>(do_use_service(key, factory, &owner));
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.ipp:121:3: note: Loop condition is false. Execution continues on line 131
  while (service)
  ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.ipp:132:36: note: Calling 'service_registry::create'
  auto_service_ptr new_service = { factory(owner) };
                                   ^~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.hpp:86:14: note: Calling constructor for 'win_iocp_socket_service<boost::asio::ip::udp>'
  return new Service(*static_cast<Owner*>(owner));
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/win_iocp_socket_service.hpp:135:7: note: Calling constructor for 'win_iocp_socket_service_base'
      win_iocp_socket_service_base(context)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_socket_service_base.ipp:33:19: note: Calling 'use_service<boost::asio::detail::win_iocp_io_context>'
    iocp_service_(use_service<win_iocp_io_context>(context)),
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/impl/execution_context.hpp:35:10: note: Calling 'service_registry::use_service'
  return e.service_registry_->template use_service<Service>();
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.hpp:30:33: note: Calling 'service_registry::do_use_service'
  return *static_cast<Service*>(do_use_service(key, factory, &owner_));
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Suppressed 5 warnings (5 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.ipp:121:3: note: Loop condition is false. Execution continues on line 131
  while (service)
  ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.ipp:132:36: note: Calling 'service_registry::create'
  auto_service_ptr new_service = { factory(owner) };
                                   ^~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/service_registry.hpp:86:14: note: Calling constructor for 'win_iocp_io_context'
  return new Service(*static_cast<Owner*>(owner));
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:96:26: note: 'concurrency_hint' is < 0
      static_cast<DWORD>(concurrency_hint >= 0 ? concurrency_hint : DWORD(~0)));
                         ^~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:96:26: note: '?' condition is false
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:97:7: note: Assuming field 'handle' is non-null
  if (!iocp_.handle)
      ^~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:97:3: note: Taking false branch
  if (!iocp_.handle)
  ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:105:7: note: 'own_thread' is true
  if (own_thread)
      ^~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:105:3: note: Taking true branch
  if (own_thread)
  ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_iocp_io_context.ipp:108:23: note: Calling constructor for 'win_thread'
    thread_.reset(new boost::asio::detail::thread(thread_function(this)));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/win_thread.hpp:74:18: note: Memory is allocated
    start_thread(new func<Function>(f), stack_size);
                 ^~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/win_thread.hpp:74:5: note: Calling 'win_thread::start_thread'
    start_thread(new func<Function>(f), stack_size);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:70:7: note: Assuming 'entry_event' is non-null
  if (!entry_event)
      ^~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:70:3: note: Taking false branch
  if (!entry_event)
  ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:80:7: note: Assuming field 'exit_event_' is null
  if (!exit_event_)
      ^~~~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:80:3: note: Taking true branch
  if (!exit_event_)
  ^
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:83:5: note: Memory is released
    delete arg;
    ^~~~~~~~~~
D:\VS Projects\LIBRARIES\boost_1_84_0\boost/asio/detail/impl/win_thread.ipp:90:38: note: Use of memory after it is freed
  thread_ = reinterpret_cast<HANDLE>(::_beginthreadex(0,
                                     ^
